package pe.com.bn.modc.controller;

import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;

import javax.imageio.ImageIO;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.swing.ImageIcon;
import org.springframework.http.MediaType;

//import javax.ws.rs.core.MediaType;

import pe.com.bn.modc.common.Constant;
import pe.com.bn.modc.common.Constante;
import pe.com.bn.modc.common.DatosSesion;
import pe.com.bn.modc.common.Funciones;
import pe.com.bn.modc.common.GeneratePdfCronograma;
import pe.com.bn.modc.common.LoggerBn;
import pe.com.bn.modc.common.Util;
import pe.com.bn.modc.common.View;
import pe.com.bn.modc.config.CustomUser;
import pe.com.bn.modc.dao.impl.ConsultaDocumentoImpl;
import pe.com.bn.modc.dao.impl.ConsultaImagen;
import pe.com.bn.modc.dao.impl.EnvioCorreoValidacion;
import pe.com.bn.modc.dao.impl.RepoLogAuditoria;
import pe.com.bn.modc.dao.inte.EstadosCuentaDAO;
import pe.com.bn.modc.dao.inte.IntLogAuditoria;
import pe.com.bn.modc.dao.pool.CargarDocumento;
import pe.com.bn.modc.dao.pool.ConexionJndi;
import pe.com.bn.modc.domain.mapper.BnAuditoriaPM;
import pe.com.bn.modc.domain.mapper.BnCancelacion;
import pe.com.bn.modc.domain.mapper.BnConsultaParametros;
import pe.com.bn.modc.domain.mapper.BnContextParametro;
import pe.com.bn.modc.domain.mapper.BnEnviarDoc;
import pe.com.bn.modc.domain.mapper.BnHojaResumen;
import pe.com.bn.modc.domain.mapper.BnIndicador;
import pe.com.bn.modc.domain.mapper.BnLetraCambio;
import pe.com.bn.modc.domain.mapper.BnLogAuditoriaPM;
import pe.com.bn.modc.domain.mapper.BnPase;
import pe.com.bn.modc.domain.mapper.BnPoliza;
import pe.com.bn.modc.domain.mapper.BnPolizaPrestamo;
import pe.com.bn.modc.domain.mapper.BnSolicitud;
import pe.com.bn.modc.domain.mapper.BnSolicitudPrestamo;
import pe.com.bn.modc.domain.mapper.BnValidarCorreoOTP;
import pe.com.bn.modc.domain.mapper.CashDispositionSettings;
import pe.com.bn.modc.domain.mapper.ComprasExtranjero;
import pe.com.bn.modc.domain.mapper.ComprasInternet;
import pe.com.bn.modc.domain.mapper.ConfigPDisposicionEfectivo;
import pe.com.bn.modc.domain.mapper.ConfiguracionTarjetaRequestTemp;
import pe.com.bn.modc.domain.mapper.GeneracionCronograma;
import pe.com.bn.modc.domain.mapper.GuardarTarjetaResponse;
import pe.com.bn.modc.domain.mapper.LetraCambio;
import pe.com.bn.modc.domain.mapper.Notificacion;
import pe.com.bn.modc.exceptions.ExternalException;
import pe.com.bn.modc.exceptions.ParametrosCompException;
import pe.com.bn.modc.domain.mapper.BnwsParametro.ParamSimm;
import pe.com.bn.modc.domain.mapper.GeneracionCronogramaRepro;
import pe.com.bn.modc.domain.mapper.GuardarTarjetaRequest;
import pe.com.bn.modc.listener.CompService;
import pe.com.bn.modc.listener.Testeopdf;
import pe.com.bn.modc.listener.contextListenerProperties;
import pe.com.bn.modc.model.AudiLog;
import pe.com.bn.modc.model.BodyCronograma;
import pe.com.bn.modc.model.BodyGeneracionCronograma;
import pe.com.bn.modc.model.BodyGeneracionCronogramaRepro;
import pe.com.bn.modc.model.BodyHojaResumen;
import pe.com.bn.modc.model.BodyIndicador;
import pe.com.bn.modc.model.BodyLetraCambio;
import pe.com.bn.modc.model.BodyPase;
import pe.com.bn.modc.model.BodyPolizaPrestamo;
import pe.com.bn.modc.model.BodySolicitudPrestamo;
import pe.com.bn.modc.trama.interactive.CicsSoapConnection;
import pe.com.bn.modc.trama.interactive.RequestMensajeHost;
import pe.com.bn.modc.services.inte.ServiceEnvioEmail;
import pe.com.bn.modc.model.ParametrosComp;

import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.convert.ImageConverter;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.Base64Utils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.Principal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.sql.Date;
//import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.regex.Pattern;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.codehaus.jackson.map.ObjectMapper;
import org.json.JSONException;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.html.WebColors;
import com.itextpdf.text.pdf.PdfCopy;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.codec.PngImage;
import com.tivoli.pd.jutil.z;

import www.bn.simm.ws.open.bean.Adjunto;
import www.bn.simm.ws.open.bean.DatosCorreo;
import www.bn.simm.ws.open.bean.DatosParametro;
import www.bn.simm.ws.open.bean.ReqListMessage;
import www.bn.simm.ws.open.bean.RequestMessage;
import www.bn.simm.ws.open.bean.ResponseMessage;
import www.bn.simm.ws.open.service.ArrayOfTns1ReqListMessage;
import www.bn.simm.ws.open.service.ServiceMessageProxy;
import java.math.RoundingMode;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@Controller
public class AdministracionController {

	@Autowired
	private ParametrosComp parametrosComp;
	@Autowired
	private ServiceEnvioEmail serviceEnvioEmail;
	@Autowired
	private CompService compService;
	@Autowired
	private EnvioCorreoValidacion servicioEnvioCorreo;
	ConexionJndi dss = new ConexionJndi();

	private static LoggerBn log = LoggerBn.getInstance(contextListenerProperties.class.getName());

	// private static LoggerBn log =
	// LoggerBn.getInstance(AdministracionController.class.getName());

	// private static LoggerWS log =
	// LoggerWS.getInstance(AdministracionController.class.getName());
	// private static LoggerBn log4 =
	// LoggerBn.getInstance(AdministracionController.class.getName());

	@RequestMapping("exPrestamoAct")
	public String exPrestamoAct(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String valor1 = request.getParameter("numero");
		String cta = request.getParameter("cta");
		String nro_prestamo = cta + valor1;
		String es_platinum = " ";

		CicsSoapConnection cics = new CicsSoapConnection();
		RequestMensajeHost host = new RequestMensajeHost();

		BnPolizaPrestamo poliza = null;

		poliza = host.getEmisionDocumentosPrestamo(nro_prestamo);

		String prima = Funciones.formatearMonto(Funciones.tramaToBigDecimal(poliza.getSprima_des(), 2));

		// HOJA DE RESUMEN

		BodyHojaResumen hojaInput = new BodyHojaResumen();
		BodyHojaResumen hojaOutPut = new BodyHojaResumen();

		hojaInput.cargarData(nro_prestamo);
		hojaInput.toShowData();

		String inputHoja = hojaInput.toString();

		BodyHojaResumen bodyIn1 = new BodyHojaResumen();
		BodyHojaResumen bodyOut1 = null;

		bodyOut1 = cics.enviarTramaHojaResumen(hojaInput, bodyIn1);
		System.out.println("hoja de resumen");

		// System.out.println(bodyOut1.toShowData());

		BnHojaResumen hojaResumen = null;

		if (bodyOut1 != null) {
			hojaResumen = new BnHojaResumen();

			hojaResumen.setTOPERACION(bodyOut1.getByTag("DFH-TOPERACION"));
			hojaResumen.setNPRESTAMO(bodyOut1.getByTag("DFH-NPRESTAMO"));
			hojaResumen.setSPRESTAMO(bodyOut1.getByTag("DFH-SPRESTAMO"));
			hojaResumen.setSINTERES(bodyOut1.getByTag("DFH-SINTERES"));
			hojaResumen.setSTASA_IC(bodyOut1.getByTag("DFH-STAS-IC"));
			hojaResumen.setSTASA_IM(bodyOut1.getByTag("DFH-STASA-IM"));
			hojaResumen.setCIA_SEG_DESGV(bodyOut1.getByTag("DFH-CIA-SEG-DESGV"));
			hojaResumen.setPSEGURO_DESGV(bodyOut1.getByTag("DFH-PSEGURO-DESGV"));
			hojaResumen.setPEMISION_DESGV(bodyOut1.getByTag("DFH-PEMISION-DESGV"));
			hojaResumen.setSSEGURO_DESGV(bodyOut1.getByTag("DFH-SSEGURO-DESGV"));
			hojaResumen.setNPOLIZA_DESGV(bodyOut1.getByTag("DFH-NPOLIZA-DESGV"));
			hojaResumen.setCIA_ASEG_CP(bodyOut1.getByTag("DFH-CIA-ASEG-CP"));
			hojaResumen.setSPRIMA_CP(bodyOut1.getByTag("DFH-SPRIMA-CP"));
			hojaResumen.setSEMISION_CP(bodyOut1.getByTag("DFH-SEMISION-CP"));
			hojaResumen.setPREFIJO_CP(bodyOut1.getByTag("DFH-PREFIJO-CP"));
			hojaResumen.setFILLER_CP(bodyOut1.getByTag("DFH-FILLER-CP"));
			hojaResumen.setNPOLIZA_CP(bodyOut1.getByTag("DFH-NPOLIZA-CP"));
			hojaResumen.setSSEGURO_CP(bodyOut1.getByTag("DFH-SSEGURO-CP"));
			hojaResumen.setSENDOSO(bodyOut1.getByTag("DFH-SENDOSO"));
			hojaResumen.setSENVIO(bodyOut1.getByTag("DFH-SENVIO"));
			hojaResumen.setNO_AMORTCAP(bodyOut1.getByTag("DFH-NO-AMORTCAP"));
			hojaResumen.setSI_PAGINT(bodyOut1.getByTag("DFH-SI-PAGINT"));
			hojaResumen.setCERROR(bodyOut1.getByTag("DFH-CERROR"));
			hojaResumen.setMSJ(bodyOut1.getByTag("DFH-MSJ"));

		}

		String saldoPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSPRESTAMO(), 2));
		String saldoInteres = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSINTERES(), 2));
		String saldoTasaIC = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSTASA_IC(), 7));
		String saldoTasaIM = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSTASA_IM(), 7));

		String sSeguroDesgravamen = Funciones
				.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSSEGURO_DESGV(), 2));
		String nPolizaDesgravamen = Funciones.validar_texto_reves(hojaResumen.getNPOLIZA_DESGV());
		String sPrimaCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSPRIMA_CP(), 2));
		String sEmisionCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal11(hojaResumen.getSEMISION_CP()));
		String sSeguroCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSSEGURO_CP(), 2));
		String sEndosoCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSENDOSO(), 2));

		String nPolizaCP = hojaResumen.getNPOLIZA_CP();
		String sEnvioCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSENVIO(), 2));
		String prefijoCP = hojaResumen.getPREFIJO_CP();

		String siPagint = hojaResumen.getSI_PAGINT();
		String noamortcap = hojaResumen.getNO_AMORTCAP();

		GeneracionCronograma cronograma = null;

		try {

			BodyGeneracionCronograma cronogramaInput = new BodyGeneracionCronograma();

			String tipo_prestamo = "05";

			cronogramaInput.cargarData(tipo_prestamo, nro_prestamo);

			// System.out.println("Cronograma input :"
			// +cronogramaInput.toShowData());

			String inputCronograma = cronogramaInput.toString();

			BodyGeneracionCronograma bodyIn2 = new BodyGeneracionCronograma();
			BodyGeneracionCronograma cronogramaOutPut = null;

			cronogramaOutPut = cics.enviarTrama(cronogramaInput, bodyIn2);

			// System.out.println(cronogramaOutPut.toShowData());

			if (cronogramaOutPut != null) {
				cronograma = new GeneracionCronograma();

				cronograma.setTOPERACION(cronogramaOutPut.getByTag("DFH-TOPERACION-76"));
				cronograma.setNPRESTAMO(cronogramaOutPut.getByTag("DFH-NPRESTAMO-76"));
				cronograma.setFDSBOLSO(cronogramaOutPut.getByTag("DFH-FDSBOLSO-76"));
				cronograma.setSPRESTAMO(cronogramaOutPut.getByTag("DFH-SPRESTAMO-76"));

				// cronograma.setSPRESTAMO(Funciones.getSimMonedaxCuenta(cronogramaOutPut.getByTag("DFH-SPRESTAMO-76"))+ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-SDEUDA-DIA-76"),2)));

				cronograma.setSAMORTIZADO(cronogramaOutPut.getByTag("DFH-SAMORTIZADO-76"));
				cronograma.setSACTUAL(cronogramaOutPut.getByTag("DFH-SACTUAL-76"));
				cronograma.setSDEUDA_D(cronogramaOutPut.getByTag("DFH-SDEUDA-DIA-76"));
				cronograma.setNCUOTAS(cronogramaOutPut.getByTag("DFH-NCUOTAS-76"));
				// cronograma.setMAIL(cronogramaOutPut.getByTag("DFH-CRONOGRAMA"));

				ArrayList<String> bcuota = new ArrayList<String>();
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-1").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-2").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-3").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-4").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-5").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-6").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-7").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-8").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-9").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-10").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-11").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-12").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-13").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-14").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-15").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-16").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-17").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-18").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-19").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-20").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-21").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-22").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-23").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-24").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-25").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-26").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-27").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-28").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-29").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-30").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-31").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-32").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-33").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-34").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-35").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-36").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-37").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-38").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-39").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-40").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-41").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-42").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-43").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-44").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-45").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-46").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-47").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-48").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-49").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-50").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-51").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-52").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-53").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-54").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-55").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-56").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-57").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-58").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-59").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-60").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-61").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-62").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-63").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-64").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-65").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-66").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-67").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-68").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-69").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-70").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-71").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-72").trim());
				cronograma.setBCUOTA(bcuota);

				ArrayList<String> acuota = new ArrayList<String>();
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-1").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-2").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-3").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-4").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-5").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-6").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-7").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-8").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-9").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-10").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-11").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-12").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-13").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-14").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-15").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-16").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-17").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-18").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-19").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-20").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-21").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-22").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-23").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-24").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-25").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-26").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-27").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-28").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-29").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-30").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-31").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-32").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-33").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-34").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-35").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-36").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-37").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-38").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-39").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-40").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-41").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-42").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-43").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-44").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-45").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-46").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-47").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-48").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-49").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-50").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-51").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-52").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-53").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-54").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-55").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-56").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-57").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-58").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-59").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-60").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-61").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-62").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-63").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-64").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-65").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-66").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-67").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-68").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-69").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-70").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-71").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-72").trim());
				cronograma.setACUOTA(acuota);

				ArrayList<String> fvcto = new ArrayList<String>();
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-1").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-2").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-3").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-4").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-5").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-6").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-7").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-8").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-9").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-10").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-11").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-12").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-13").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-14").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-15").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-16").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-17").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-18").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-19").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-20").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-21").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-22").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-23").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-24").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-25").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-26").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-27").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-28").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-29").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-30").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-31").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-32").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-33").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-34").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-35").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-36").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-37").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-38").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-39").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-40").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-41").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-42").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-43").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-44").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-45").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-46").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-47").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-48").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-49").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-50").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-51").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-52").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-53").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-54").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-55").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-56").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-57").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-58").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-59").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-60").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-61").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-62").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-63").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-64").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-65").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-66").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-67").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-68").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-69").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-70").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-71").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-72").trim());
				cronograma.setFVCTO(fvcto);

				ArrayList<String> fcancel = new ArrayList<String>();
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-1").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-2").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-3").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-4").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-5").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-6").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-7").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-8").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-9").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-10").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-11").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-12").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-13").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-14").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-15").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-16").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-17").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-18").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-19").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-20").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-21").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-22").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-23").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-24").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-25").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-26").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-27").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-28").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-29").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-30").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-31").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-32").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-33").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-34").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-35").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-36").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-37").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-38").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-39").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-40").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-41").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-42").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-43").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-44").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-45").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-46").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-47").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-48").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-49").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-50").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-51").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-52").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-53").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-54").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-55").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-56").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-57").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-58").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-59").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-60").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-61").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-62").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-63").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-64").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-65").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-66").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-67").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-68").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-69").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-70").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-71").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-72").trim());
				cronograma.setFCANCEL(fcancel);

				ArrayList<String> gcuota = new ArrayList<String>();
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-1").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-2").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-3").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-4").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-5").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-6").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-7").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-8").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-9").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-10").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-11").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-12").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-13").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-14").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-15").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-16").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-17").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-18").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-19").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-20").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-21").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-22").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-23").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-24").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-25").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-26").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-27").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-28").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-29").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-30").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-31").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-32").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-33").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-34").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-35").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-36").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-37").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-38").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-39").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-40").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-41").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-42").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-43").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-44").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-45").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-46").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-47").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-48").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-49").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-50").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-51").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-52").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-53").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-54").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-55").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-56").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-57").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-58").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-59").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-60").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-61").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-62").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-63").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-64").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-65").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-66").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-67").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-68").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-69").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-70").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-71").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-72").trim());
				cronograma.setGCUOTA(gcuota);

				ArrayList<String> samortizacion = new ArrayList<String>();
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-1").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-2").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-3").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-4").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-5").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-6").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-7").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-8").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-9").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-10").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-11").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-12").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-13").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-14").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-15").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-16").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-17").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-18").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-19").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-20").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-21").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-22").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-23").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-24").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-25").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-26").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-27").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-28").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-29").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-30").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-31").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-32").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-33").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-34").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-35").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-36").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-37").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-38").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-39").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-40").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-41").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-42").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-43").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-44").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-45").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-46").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-47").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-48").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-49").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-50").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-51").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-52").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-53").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-54").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-55").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-56").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-57").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-58").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-59").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-60").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-61").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-62").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-63").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-64").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-65").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-66").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-67").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-68").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-69").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-70").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-71").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-72").trim());
				cronograma.setSAMORTIZACION(samortizacion);

				ArrayList<String> sinteres = new ArrayList<String>();
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-1").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-2").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-3").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-4").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-5").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-6").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-7").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-8").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-9").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-10").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-11").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-12").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-13").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-14").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-15").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-16").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-17").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-18").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-19").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-20").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-21").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-22").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-23").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-24").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-25").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-26").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-27").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-28").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-29").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-30").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-31").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-32").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-33").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-34").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-35").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-36").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-37").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-38").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-39").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-40").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-41").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-42").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-43").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-44").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-45").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-46").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-47").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-48").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-49").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-50").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-51").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-52").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-53").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-54").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-55").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-56").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-57").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-58").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-59").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-60").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-61").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-62").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-63").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-64").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-65").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-66").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-67").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-68").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-69").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-70").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-71").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-72").trim());
				cronograma.setSINTERES(sinteres);

				ArrayList<String> sdesgravamen = new ArrayList<String>();
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-1").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-2").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-3").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-4").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-5").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-6").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-7").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-8").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-9").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-10").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-11").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-12").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-13").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-14").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-15").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-16").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-17").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-18").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-19").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-20").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-21").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-22").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-23").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-24").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-25").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-26").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-27").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-28").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-29").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-30").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-31").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-32").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-33").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-34").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-35").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-36").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-37").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-38").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-39").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-40").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-41").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-42").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-43").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-44").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-45").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-46").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-47").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-48").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-49").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-50").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-51").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-52").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-53").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-54").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-55").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-56").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-57").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-58").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-59").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-60").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-61").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-62").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-63").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-64").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-65").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-66").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-67").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-68").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-69").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-70").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-71").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-72").trim());
				cronograma.setSDESGRAVAMEN(sdesgravamen);

				ArrayList<String> sdcuota = new ArrayList<String>();
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-1").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-2").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-3").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-4").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-5").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-6").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-7").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-8").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-9").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-10").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-11").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-12").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-13").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-14").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-15").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-16").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-17").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-18").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-19").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-20").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-21").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-22").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-23").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-24").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-25").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-26").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-27").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-28").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-29").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-30").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-31").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-32").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-33").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-34").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-35").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-36").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-37").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-38").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-39").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-40").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-41").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-42").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-43").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-44").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-45").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-46").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-47").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-48").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-49").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-50").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-51").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-52").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-53").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-54").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-55").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-56").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-57").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-58").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-59").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-60").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-61").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-62").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-63").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-64").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-65").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-66").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-67").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-68").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-69").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-70").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-71").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-72").trim());
				cronograma.setSDCUOTA(sdcuota);

				cronograma.setACLIENTE(cronogramaOutPut.getByTag("DFH-ACLIENTE-76").trim());
				cronograma.setDOCUMENTO(cronogramaOutPut.getByTag("DFH-DOCUMENTO-76").trim());
				cronograma.setTELEFONO(cronogramaOutPut.getByTag("DFH-TELEFONO-76").trim());
				cronograma.setDCLIENTE(cronogramaOutPut.getByTag("DFH-DCLIENTE-76").trim());
				cronograma.setDOCUMGAR(cronogramaOutPut.getByTag("DFH-DOCUMGAR-76").trim());
				cronograma.setAGARANTE(cronogramaOutPut.getByTag("DFH-AGARANTE-76").trim());
				cronograma.setDGARANTE(cronogramaOutPut.getByTag("DFH-DGARANTE-76").trim());

				cronograma.setTASA(cronogramaOutPut.getByTag("DFH-TASA-76").trim());

				// cronograma.setTASA(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-TASA-76"),7))+
				// " %");

				// System.out.println("TASA: "+cronograma.getTASA());

				cronograma.setTCEA(cronogramaOutPut.getByTag("DFH-TCEA-76").trim());

				// cronograma.setTCEA(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-TCEA-76"),7))+
				// " %");

				cronograma.setSGCPRO(cronogramaOutPut.getByTag("DFH-SGCPRO-76").trim());

				// cronograma.setSGCPRO(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-SGCPRO-76"),2))+
				// " %");

				cronograma.setCERROR(cronogramaOutPut.getByTag("DFH-CERROR-76").trim());
				cronograma.setMSJ(cronogramaOutPut.getByTag("DFH-MSJ-76").trim());

				cronograma.setMSGNO_HOST(cronogramaOutPut.getByTag("msgnoHost").trim());
				cronograma.setMSJE_HOST(cronogramaOutPut.getByTag("msjeHost").trim());
			}

		} catch (Exception e) {
			// log.error(e,"","");
		}

		String fechaDesembolso = cronograma.getFDSBOLSO();
		String diaDesembolso = "";
		String mesDesembolso = "";
		String annioDesembolso = "";

		if (fechaDesembolso.equals("")) {
			fechaDesembolso = "";
		} else {
			annioDesembolso = (cronograma.getFDSBOLSO()).substring(0, 4);
			mesDesembolso = (cronograma.getFDSBOLSO()).substring(4, 6);
			diaDesembolso = (cronograma.getFDSBOLSO()).substring(6, 8);

			fechaDesembolso = diaDesembolso + "/" + mesDesembolso + "/" + annioDesembolso;
			
		}

		// Formatear Apellidos y Nombres de Cliente
		String aCliente = cronograma.getACLIENTE();

		if (aCliente.equals("")) {
			aCliente = "";
		} else {
			aCliente = Funciones.validar_texto_reves(cronograma.getACLIENTE());
		}

		// Formatear Apellidos y Nombres de Garante
		String aGarante = cronograma.getAGARANTE();

		if (aGarante.equals("")) {
			aGarante = "";
		} else {
			aGarante = Funciones.validar_texto_reves(cronograma.getAGARANTE());
		}

		// Formatear DNI de Cliente para pagaré
		String dniCliente = cronograma.getDOCUMENTO();

		if (dniCliente.equals("")) {
			dniCliente = "";
		} else {
			dniCliente = (cronograma.getDOCUMENTO()).substring(4);
		}

		// Formatear DNI de Cliente para Cronograma
		String dniClienteCronograma = cronograma.getDOCUMENTO();

		if (dniClienteCronograma.equals("")) {
			dniClienteCronograma = "";
		} else {
			dniClienteCronograma = (cronograma.getDOCUMENTO()).substring(0, 3) + " "
					+ (cronograma.getDOCUMENTO()).substring(4);
		}

		// Formatear Número de Teléfono de Cliente
		String tlfCliente = cronograma.getTELEFONO();

		if (tlfCliente.equals("")) {
			tlfCliente = "";
		} else {
			tlfCliente = cronograma.getTELEFONO();
		}

		// Formatear DNI de Garante
		String dniGarante = cronograma.getDOCUMGAR();

		if (dniGarante.equals("")) {
			dniGarante = "";
		} else {
			dniGarante = (cronograma.getDOCUMGAR()).substring(4);
		}

		// Formatear Monto de Préstamo
		String deudaTotal = cronograma.getSPRESTAMO();

		if (deudaTotal.equals("")) {
			deudaTotal = "";
		} else {
			deudaTotal = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getSPRESTAMO(), 2));
		}

		// Formatear Tasa Int.
		String tasa = cronograma.getTASA();

		if (tasa.equals("")) {
			tasa = "";
		} else {
			tasa = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getTASA(), 7));
		}

		// Fdormatear TCEA
		String tcea = cronograma.getTCEA();

		if (tcea.equals("")) {
			tcea = "";
		} else {
			tcea = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getTCEA(), 7));
		}

		// Formatear Seguro de Cuota Protegida
		String seguroCP = cronograma.getSGCPRO();

		if (seguroCP.equals("")) {
			seguroCP = "";
		} else {
			seguroCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getSGCPRO(), 2));
		}

		// Formatear Número de Préstamo para Cronograma

		String nPrestamoCronograma = cronograma.getNPRESTAMO();
		String valor11 = "";
		String valor2 = "";

		if (nPrestamoCronograma.equals("")) {
			nPrestamoCronograma = "";
		} else {
			valor11 = (cronograma.getNPRESTAMO()).substring(0, 11);
			valor2 = (cronograma.getNPRESTAMO()).substring(11, 13);

			nPrestamoCronograma = valor11 + "-" + valor2;
		}

		// Formatear Número de Préstamo para Pagaré

		String nPrestamoPP = cronograma.getNPRESTAMO();

		if (nPrestamoPP.equals("")) {
			nPrestamoPP = "";
		} else {
			nPrestamoPP = cronograma.getNPRESTAMO();
		}

		// Formatear Dirección de Cliente
		String dCliente = cronograma.getDCLIENTE();

		if (dCliente.equals("")) {
			dCliente = "";
		} else {
			dCliente = Funciones.validar_texto_reves(cronograma.getDCLIENTE());
		}

		// Formatear Dirección de Garante
		String dGarante = cronograma.getDGARANTE();

		if (dGarante.equals("")) {
			dGarante = "";
		} else {
			dGarante = Funciones.validar_texto_reves(cronograma.getDGARANTE());
		}

		// Solicitud de prestamo

		BnSolicitudPrestamo solicitud = null;

		BodySolicitudPrestamo solicitudInput = new BodySolicitudPrestamo();

		String tipo_prestamo = "07";

		solicitudInput.cargarData(tipo_prestamo, nro_prestamo);

		System.out.println("Solicitud input :" + solicitudInput.toShowData());

		String inputSolicitud = solicitudInput.toString();

		BodySolicitudPrestamo bodyIn3 = new BodySolicitudPrestamo();
		BodySolicitudPrestamo solicitudOutPut = null;

		solicitudOutPut = cics.enviarTrama(solicitudInput, bodyIn3);

		System.out.println("solicitud cambio moneda:" + solicitudInput.toShowData());

		System.out.println("solicitud cambio moneda:" + solicitudOutPut.toShowData());

		if (solicitudOutPut != null) {
			solicitud = new BnSolicitudPrestamo();

			solicitud.setTOPERACION(solicitudOutPut.getByTag("DFH-TOPERACION").trim());
			solicitud.setNPRESTAMO(solicitudOutPut.getByTag("DFH-NPRESTAMO").trim());
			solicitud.setTPRESTAMO(solicitudOutPut.getByTag("DFH-TPRESTAMO").trim());
			solicitud.setFSOLICITUD(solicitudOutPut.getByTag("DFH-FSOLICITUD").trim());
			solicitud.setMODALIDAD(solicitudOutPut.getByTag("DFH-MODALIDAD").trim());
			solicitud.setACLIENTE(solicitudOutPut.getByTag("DFH-ACLIENTE").trim());
			solicitud.setDOCUMENTO(solicitudOutPut.getByTag("DFH-DOCUMENTO").trim());
			solicitud.setFNAC(solicitudOutPut.getByTag("DFH-FNAC").trim());
			solicitud.setECIVIL(solicitudOutPut.getByTag("DFH-ECIVIL").trim());
			solicitud.setSEXO(solicitudOutPut.getByTag("DFH-SEXO"));
			solicitud.setTELEFONO(solicitudOutPut.getByTag("DFH-TELEFONO").trim());
			solicitud.setCELULAR(solicitudOutPut.getByTag("DFH-CELULAR").trim());
			solicitud.setDCLIENTE(solicitudOutPut.getByTag("DFH-DCLIENTE").trim());
			solicitud.setDISTRITO(solicitudOutPut.getByTag("DFH-DISTRITO").trim());
			solicitud.setPROVINCIA(solicitudOutPut.getByTag("DFH-PROVINCIA").trim());
			solicitud.setDPTO(solicitudOutPut.getByTag("DFH-DPTO").trim());
			solicitud.setREFERENCIA(solicitudOutPut.getByTag("DFH-REFERENCIA").trim());
			solicitud.setCORREO(solicitudOutPut.getByTag("DFH-CORREO").trim());
			solicitud.setCORRESPONDENCIA(solicitudOutPut.getByTag("DFH-CORRESPONDENCIA").trim());
			solicitud.setCLABORAL(solicitudOutPut.getByTag("DFH-CLABORAL").trim());
			solicitud.setENTIDAD(solicitudOutPut.getByTag("DFH-ENTIDAD").trim());
			solicitud.setTLABORAL(solicitudOutPut.getByTag("DFH-TLABORAL").trim());
			solicitud.setFINGRESO(solicitudOutPut.getByTag("DFH-FINGRESO").trim());
			solicitud.setSINGRESOS(solicitudOutPut.getByTag("DFH-SINGRESOS").trim());
			solicitud.setACLIENTEG(solicitudOutPut.getByTag("DFH-ACLIENTE-G").trim());
			solicitud.setDOCUMENTOG(solicitudOutPut.getByTag("DFH-DOCUMENTO-G").trim());
			solicitud.setFNACG(solicitudOutPut.getByTag("DFH-FNAC-G").trim());
			solicitud.setECIVILG(solicitudOutPut.getByTag("DFH-ECIVIL-G").trim());
			solicitud.setSEXOG(solicitudOutPut.getByTag("DFH-SEXO-G").trim());
			solicitud.setTELEFONOG(solicitudOutPut.getByTag("DFH-TELEFONO-G").trim());
			solicitud.setCELULARG(solicitudOutPut.getByTag("DFH-CELULAR-G").trim());
			solicitud.setDCLIENTEG(solicitudOutPut.getByTag("DFH-DCLIENTE-G").trim());
			solicitud.setDISTRITOG(solicitudOutPut.getByTag("DFH-DISTRITO-G").trim());
			solicitud.setPROVINCIAG(solicitudOutPut.getByTag("DFH-PROVINCIA-G").trim());
			solicitud.setDPTOG(solicitudOutPut.getByTag("DFH-DPTO-G").trim());
			solicitud.setREFERENCIAG(solicitudOutPut.getByTag("DFH-REFERENCIA-G").trim());
			solicitud.setCORREOG(solicitudOutPut.getByTag("DFH-CORREO-G").trim());
			solicitud.setCORRESPONDENCIAG(solicitudOutPut.getByTag("DFH-CORRESPONDENCIA-G").trim());
			solicitud.setCLABORALG(solicitudOutPut.getByTag("DFH-CLABORAL-G").trim());
			solicitud.setENTIDADG(solicitudOutPut.getByTag("DFH-ENTIDAD-G").trim());
			solicitud.setTLABORALG(solicitudOutPut.getByTag("DFH-TLABORAL-G").trim());
			solicitud.setFINGRESOG(solicitudOutPut.getByTag("DFH-FINGRESO-G").trim());
			solicitud.setSINGRESOSG(solicitudOutPut.getByTag("DFH-SINGRESOS-G").trim());
			solicitud.setSSOLICITADO(solicitudOutPut.getByTag("DFH-SSOLICITADO").trim());
			solicitud.setSABONADO(solicitudOutPut.getByTag("DFH-SABONADO").trim());
			solicitud.setICUOTAP(solicitudOutPut.getByTag("DFH-ICUOTAP").trim());
			solicitud.setIENDOSO(solicitudOutPut.getByTag("DFH-IENDOSO").trim());
			solicitud.setIPGRACIA(solicitudOutPut.getByTag("DFH-IPGRACIA").trim());
			solicitud.setDPAGO(solicitudOutPut.getByTag("DFH-DPAGO").trim());
			solicitud.setTASA(solicitudOutPut.getByTag("DFH-TASA").trim());
			solicitud.setTCEA(solicitudOutPut.getByTag("DFH-TCEA").trim());
			solicitud.setCCUENTA(solicitudOutPut.getByTag("DFH-CCUENTA").trim());
			solicitud.setCCUENTAG(solicitudOutPut.getByTag("DFH-CCUENTA-G").trim());
			solicitud.setSDESGRAVAMEN(solicitudOutPut.getByTag("DFH-SDESGRAVAMEN").trim());
			solicitud.setSCUOTAP(solicitudOutPut.getByTag("DFH-SCUOTAP").trim());
			solicitud.setNCUOTAS(solicitudOutPut.getByTag("DFH-NCUOTAS").trim());

			String ind = solicitudOutPut.getByTag("DFH-CMONEDA");
			int ind1 = ind.length();

			if (ind1 < 4) {
				solicitud.setCMONEDA(ind);

			} else {

				solicitud.setCMONEDA(ind.substring(0, 4));

				solicitud.setINDICADOR(ind.substring(ind1 - 1, ind1));

			}

			solicitud.setSCUOTA(solicitudOutPut.getByTag("DFH-SCUOTA").trim());
			solicitud.setNPRESTRENOV(solicitudOutPut.getByTag("DFH-NPREST-RENOV").trim());
			solicitud.setSDEUDA(solicitudOutPut.getByTag("DFH-SDEUDA").trim());
			solicitud.setSNETO(solicitudOutPut.getByTag("DFH-SNETO").trim());
			solicitud.setGESTOR(solicitudOutPut.getByTag("DFH-GESTOR").trim());
			solicitud.setSUPER(solicitudOutPut.getByTag("DFH-SUPER").trim());
			solicitud.setAGENCIA(solicitudOutPut.getByTag("DFH-AGENCIA").trim());
			solicitud.setCERROR(solicitudOutPut.getByTag("DFH-CERROR").trim());
			solicitud.setMSJ(solicitudOutPut.getByTag("DFH-MSJ").trim());
			solicitud.setMSGNO_HOST(solicitudOutPut.getByTag("msgnoHost").trim());
			solicitud.setMSJE_HOST(solicitudOutPut.getByTag("msjeHost").trim());
		}

		// ***************************************************SOLICITUD***************************************************
		// Formatear Número de Préstamo
		String numeroPrestamo = solicitud.getNPRESTAMO();

		if (numeroPrestamo.equals("")) {
			numeroPrestamo = " ";
		} else {
			numeroPrestamo = solicitud.getNPRESTAMO();
		}

		String numeroPrestamoRenov = solicitud.getNPRESTRENOV();

		if (numeroPrestamoRenov.equals("")) {
			numeroPrestamoRenov = " ";
		} else {
			numeroPrestamoRenov = solicitud.getNPRESTRENOV();
		}

		// Formatear Tipo de Préstamo
		String tipoPrestamo = solicitud.getTPRESTAMO();

		if (tipoPrestamo.equals("")) {
			tipoPrestamo = " ";
		} else {
			tipoPrestamo = solicitud.getTPRESTAMO();
		}

		// Formatear Fecha de Solicitud
		String fechaSolicitudPrestamo = solicitud.getFSOLICITUD();

		if (fechaSolicitudPrestamo.equals("")) {
			fechaSolicitudPrestamo = " ";
		} else {

			fechaSolicitudPrestamo = solicitud.getFSOLICITUD();
		}
		// System.out.println("FECHA SOLICITUD DE PRÉSTAMO: "+fechaSolicitudPrestamo);

		// Formatear Modalidad de Préstamo
		String modalidadPrestamo = solicitud.getMODALIDAD();

		if (modalidadPrestamo.equals("")) {
			modalidadPrestamo = " ";
		} else {
			modalidadPrestamo = solicitud.getMODALIDAD();
		}

		// Formatear Nombre del Cliente
		String aCliente1 = solicitud.getACLIENTE();

		if (aCliente1.equals("")) {
			aCliente1 = " ";
		} else {
			aCliente1 = Funciones.validar_texto_reves(solicitud.getACLIENTE());
		}

		// Formatear DNI de Cliente
		String dniCliente1 = solicitud.getDOCUMENTO();

		if (dniCliente1.equals("")) {
			dniCliente1 = " ";
		} else {
			dniCliente1 = solicitud.getDOCUMENTO();
		}

		// Formatear Fecha de Nacimiento de Cliente
		String fechNacCliente = solicitud.getFNAC();

		if (fechNacCliente.equals("")) {
			fechNacCliente = " ";
		} else {
			fechNacCliente = (solicitud.getFNAC()).replace("/", "-");
		}

		// Formatear Estado Civil de Cliente
		String eCivilCliente = solicitud.getECIVIL();
		int longitudECivilCliente = (solicitud.getECIVIL()).length();

		if (eCivilCliente.equals("")) {
			eCivilCliente = " ";
		} else {
			eCivilCliente = (solicitud.getECIVIL()).substring(2, longitudECivilCliente);
		}

		// Formatear Sexo de Cliente
		String sexoCliente = solicitud.getSEXO();

		if (sexoCliente.equals("")) {
			sexoCliente = " ";
		} else {
			sexoCliente = solicitud.getSEXO();
		}

		// Formatear Teléfono de Cliente
		String telefonoCliente1 = solicitud.getTELEFONO();

		if (telefonoCliente1.equals("") || telefonoCliente1.equals("0000000000")
				|| telefonoCliente1.equals("0000000")) {

			telefonoCliente1 = " ";
		} else {
			telefonoCliente1 = solicitud.getTELEFONO();
		}

		// Formatear Celular de Cliente
		String celularCliente1 = solicitud.getCELULAR();

		if (celularCliente1.equals("") || celularCliente1.equalsIgnoreCase("0000000000")) {
			celularCliente1 = " ";
		} else {
			celularCliente1 = solicitud.getCELULAR();
		}

		// Formatear Dirección de Cliente
		String direccCliente = solicitud.getDCLIENTE();

		if (direccCliente.equals("")) {
			direccCliente = " ";
		} else {
			direccCliente = Funciones.validar_texto_reves(solicitud.getDCLIENTE());
		}

		// Formatear Distrito de Cliente
		String distritoCliente = solicitud.getDISTRITO();

		if (distritoCliente.equals("")) {
			distritoCliente = " ";
		} else {
			distritoCliente = Funciones.validar_texto_reves(solicitud.getDISTRITO());
		}

		// Formatear Provincia de Cliente
		String provinciaCliente = solicitud.getPROVINCIA();

		if (provinciaCliente.equals("")) {
			provinciaCliente = " ";
		} else {
			provinciaCliente = Funciones.validar_texto_reves(solicitud.getPROVINCIA());
		}

		// Formatear Departamento de Cliente
		String dptoCliente = solicitud.getDPTO();

		if (dptoCliente.equals("")) {
			dptoCliente = " ";
		} else {
			dptoCliente = Funciones.validar_texto_reves(solicitud.getDPTO());
		}

		// Formatear Referencia de Cliente
		String referenciaCliente = solicitud.getREFERENCIA();

		if (referenciaCliente.equals("")) {
			referenciaCliente = " ";
		} else {
			referenciaCliente = Funciones.validar_texto_reves(solicitud.getREFERENCIA());
		}

		// Formatear Correo de Cliente
		String correoCliente = solicitud.getCORREO();

		if (correoCliente.equals("")) {
			correoCliente = "";
		} else {
			correoCliente = Funciones.validar_texto_reves(solicitud.getCORREO());
		}
		// System.out.println("CORREO CLIENTE: "+correoCliente);

		// Formatear Correspondencia de Cliente
		String correspondenciaCliente = solicitud.getCORRESPONDENCIA();

		if (correspondenciaCliente.equals("")) {
			correspondenciaCliente = " ";
		} else {
			correspondenciaCliente = solicitud.getCORRESPONDENCIA();
		}

		// Formatear Condición Laboral de Cliente
		String cLaboralCliente = solicitud.getCLABORAL();

		if (cLaboralCliente.equals("")) {
			cLaboralCliente = " ";
		} else {
			cLaboralCliente = Funciones.validar_texto_reves(solicitud.getCLABORAL());
		}

		// Formatear Entidad de Cliente
		String entidadCliente = solicitud.getENTIDAD();

		if (entidadCliente.equals("")) {
			entidadCliente = " ";
		} else {
			entidadCliente = Funciones.validar_texto_reves(solicitud.getENTIDAD());
		}

		// Formatear Teléfono Laboral de Cliente
		String telefonoLaboralCliente = solicitud.getTLABORAL();

		if (telefonoLaboralCliente.equals("")) {
			telefonoLaboralCliente = " ";
		} else {
			telefonoLaboralCliente = solicitud.getTLABORAL();
		}

		// Formatear Fecha de Ingreso de Cliente
		String fechaIngresoCliente = solicitud.getFINGRESO();

		if ((fechaIngresoCliente.equals("")) || (fechaIngresoCliente.equals("/ /"))) {
			fechaIngresoCliente = " ";
		} else {
			fechaIngresoCliente = solicitud.getFINGRESO();
		}

		// Formatear Monto de Ingresos de Cliente
		String montoIngresosCliente = solicitud.getSINGRESOS();

		if (montoIngresosCliente.equals("")) {
			montoIngresosCliente = " ";
		} else {
			montoIngresosCliente = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSINGRESOS(), 2));

		}

		// Formatear Nombre del Garante
		String aGarante1 = solicitud.getACLIENTEG().trim();

		if (aGarante1.equals("")) {
			aGarante1 = "";
		} else {
			aGarante1 = Funciones.validar_texto_reves(solicitud.getACLIENTEG());
		}
		// System.out.println("NOMBRE GARANTE: "+aGarante);
		// Formatear DNI de Garante
		String dniGarante1 = solicitud.getDOCUMENTOG();

		if (dniGarante1.equals("")) {
			dniGarante1 = " ";
		} else {
			dniGarante1 = (solicitud.getDOCUMENTOG()).replace("-", " ");
		}

		// Formatear Fecha de Nacimiento de Garante
		String fechNacGarante = solicitud.getFNACG();

		if (fechNacGarante.equals("")) {
			fechNacGarante = " ";
		} else {
			fechNacGarante = solicitud.getFNACG();
		}

		// Formatear Estado Civil de Garante
		String eCivilGarante = solicitud.getECIVILG();
		int longitudECivilGarante = (solicitud.getECIVILG()).length();

		if (eCivilGarante.equals("")) {
			eCivilGarante = " ";
		} else {
			eCivilGarante = (solicitud.getECIVILG()).substring(2, longitudECivilGarante);
		}

		// Formatear Sexo de Garante
		String sexoGarante = solicitud.getSEXOG();

		if (sexoGarante.equals("")) {
			sexoGarante = " ";
		} else {
			sexoGarante = solicitud.getSEXOG();
		}

		// Formatear Teléfono de Garante
		String telefonoGarante = solicitud.getTELEFONOG();

		if (telefonoGarante.equals("")) {
			telefonoGarante = " ";
		} else {
			telefonoGarante = solicitud.getTELEFONOG();
		}

		// Formatear Celular de Garante
		String celularGarante = solicitud.getCELULARG();

		if (celularGarante.equals("")) {
			celularGarante = " ";
		} else {
			celularGarante = solicitud.getCELULARG();
		}

		// Formatear Dirección de Garante
		String direccGarante = solicitud.getDCLIENTEG();

		if (direccGarante.equals("")) {
			direccGarante = " ";
		} else {
			direccGarante = Funciones.validar_texto_reves(solicitud.getDCLIENTEG());
		}

		// Formatear Distrito de Garante
		String distritoGarante = solicitud.getDISTRITOG();

		if (distritoGarante.equals("")) {
			distritoGarante = " ";
		} else {
			distritoGarante = Funciones.validar_texto_reves(solicitud.getDISTRITOG());
		}

		// Formatear Provincia de Garante
		String provinciaGarante = solicitud.getPROVINCIAG();

		if (provinciaGarante.equals("")) {
			provinciaGarante = " ";
		} else {
			provinciaGarante = Funciones.validar_texto_reves(solicitud.getPROVINCIAG());
		}

		// Formatear Departamento de Garante
		String dptoGarante = solicitud.getDPTOG();

		if (dptoGarante.equals("")) {
			dptoGarante = " ";
		} else {
			dptoGarante = Funciones.validar_texto_reves(solicitud.getDPTOG());
		}

		// Formatear Referencia de Garante
		String referenciaGarante = solicitud.getREFERENCIAG();

		if (referenciaGarante.equals("")) {
			referenciaGarante = " ";
		} else {
			referenciaGarante = Funciones.validar_texto_reves(solicitud.getREFERENCIAG());
		}

		// Formatear Correo de Garante
		String correoGarante = solicitud.getCORREOG();

		if (correoGarante.equals("")) {
			correoGarante = "";
		} else {
			correoGarante = Funciones.validar_texto_reves(solicitud.getCORREOG());
		}

		// Formatear Correspondencia de Garante
		String correspondenciaGarante = solicitud.getCORRESPONDENCIAG();

		if (correspondenciaGarante.equals("")) {
			correspondenciaGarante = " ";
		} else {
			correspondenciaGarante = solicitud.getCORRESPONDENCIAG();
		}

		// Formatear Condición Laboral de Garante
		String cLaboralGarante = solicitud.getCLABORALG();

		if (cLaboralGarante.equals("")) {
			cLaboralGarante = " ";
		} else {
			cLaboralGarante = Funciones.validar_texto_reves(solicitud.getCLABORALG());
		}

		// Formatear Entidad de Garante
		String entidadGarante = solicitud.getENTIDADG();

		if (entidadGarante.equals("")) {
			entidadGarante = " ";
		} else {
			entidadGarante = Funciones.validar_texto_reves(solicitud.getENTIDADG());
		}

		// Formatear Teléfono Laboral de Garante
		String telefonoLaboralGarante = solicitud.getTLABORALG();

		if (telefonoLaboralGarante.equals("")) {
			telefonoLaboralGarante = " ";
		} else {
			telefonoLaboralGarante = solicitud.getTLABORALG();
		}

		// Formatear Fecha de Ingreso de Garante
		String fechaIngresoGarante = solicitud.getFINGRESOG();

		if (fechaIngresoGarante.equals("")) {
			fechaIngresoGarante = " ";
		} else {
			fechaIngresoGarante = solicitud.getFINGRESOG();
		}

		// Formatear Monto de Ingresos de Garante
		String montoIngresosGarante = solicitud.getSINGRESOSG();

		if ((montoIngresosGarante.equals("")) || (aGarante.equals(""))) {
			montoIngresosGarante = " ";
		} else {
			montoIngresosGarante = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSINGRESOSG(), 2));

		}

		// Formatear Monto Solicitado de Préstamo
		String montoSolicitadoPrestamo = solicitud.getSSOLICITADO();

		if (montoSolicitadoPrestamo.equals("")) {
			montoSolicitadoPrestamo = " ";
		} else {
			montoSolicitadoPrestamo = Funciones
					.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSSOLICITADO(), 2));
		}

		// Formatear Monto Abonado de Préstamo
		String montoAbonadoPrestamo = solicitud.getSABONADO();

		if (montoAbonadoPrestamo.equals("")) {
			montoAbonadoPrestamo = " ";
		} else {

			montoAbonadoPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSABONADO(), 2));

		}

		// Formatear Monto Solicitado de Préstamo
		String iCuotaProtegida = solicitud.getICUOTAP();

		if (iCuotaProtegida.equals("")) {
			iCuotaProtegida = " ";
		} else {
			if (iCuotaProtegida.equals("S")) {
				iCuotaProtegida = "Sí";
			}
			if (iCuotaProtegida.equals("N")) {
				iCuotaProtegida = "No";
			}
		}

		// Formatear I Cuota Protegida de Préstamo
		String iCuotaProtegidaPrestamo = solicitud.getICUOTAP();

		if (iCuotaProtegidaPrestamo.equals("")) {
			iCuotaProtegidaPrestamo = " ";
		} else {
			if (iCuotaProtegidaPrestamo.equals("S")) {
				iCuotaProtegidaPrestamo = "Sí";
			}
			if (iCuotaProtegidaPrestamo.equals("N")) {
				iCuotaProtegidaPrestamo = "No";
			}
		}

		// Formatear I Endoso de Préstamo
		String iEndosoPrestamo = solicitud.getIENDOSO();

		if (iEndosoPrestamo.equals("")) {
			iEndosoPrestamo = " ";
		} else {
			if (iEndosoPrestamo.equals("S")) {
				iEndosoPrestamo = "Sí";
			}
			if (iEndosoPrestamo.equals("N")) {
				iEndosoPrestamo = "No";
			}
		}

		// Formatear I Periodo de Gracia de Préstamo
		String iPeriodoGraciaPrestamo = solicitud.getIPGRACIA();

		if (iPeriodoGraciaPrestamo.equals("")) {
			iPeriodoGraciaPrestamo = " ";
		} else {
			if (iPeriodoGraciaPrestamo.equals("S")) {
				iPeriodoGraciaPrestamo = "Sí";
			}
			if (iPeriodoGraciaPrestamo.equals("N")) {
				iPeriodoGraciaPrestamo = "No";
			}
		}

		// Formatear Día de Vencimiento de Pago de Préstamo
		String diaVencimientoPagoPrestamo = solicitud.getDPAGO();

		if (diaVencimientoPagoPrestamo.equals("")) {
			diaVencimientoPagoPrestamo = " ";
		} else {
			diaVencimientoPagoPrestamo = solicitud.getDPAGO();
		}

		// Formatear Tasa de Préstamo
		String tasaPrestamo = solicitud.getTASA();

		if (tasaPrestamo.equals("")) {
			tasaPrestamo = " ";
		} else {
			tasaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getTASA(), 9));
		}

		// Formatear TCEA de Préstamo
		String tceaPrestamo = solicitud.getTCEA();

		if (tceaPrestamo.equals("")) {
			tceaPrestamo = " ";
		} else {
			tceaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getTCEA(), 2));
		}

		// Formatear Cuenta de Cliente
		String cuentaCliente = solicitud.getCCUENTA();

		if (cuentaCliente.equals("")) {
			cuentaCliente = " ";
		} else {
			cuentaCliente = solicitud.getCCUENTA();
		}

		// Formatear Cuenta de Garante
		String cuentaGarante = solicitud.getCCUENTAG();

		if (cuentaGarante.equals("")) {
			cuentaGarante = " ";
		} else {
			cuentaGarante = solicitud.getCCUENTAG();
		}

		// Formatear Seguro de Desgravamen de Préstamo
		String seguroDesgravamenPrestamo = solicitud.getSDESGRAVAMEN();

		if (seguroDesgravamenPrestamo.equals("")) {
			seguroDesgravamenPrestamo = " ";
		} else {

			// 000000000826000

			// seguroDesgravamenPrestamo =
			// ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(solicitud.getSDESGRAVAMEN(),6));
			int longDes = seguroDesgravamenPrestamo.length();

			// 000000013300000
			String decimal = seguroDesgravamenPrestamo.substring(longDes - 7);
			String deci = decimal.substring(0, 5);

			String entero = seguroDesgravamenPrestamo.substring(0, 8);

			// System.out.println("primer entero "+entero);

			if (entero.equalsIgnoreCase("0000000")) {
				entero = "0";
			} else {
				entero = Funciones.eliminarCerosAlaIzquierda(entero);
			}

			if (entero.equalsIgnoreCase("")) {
				entero = "0";
			}

			// System.out.println("decimal "+decimal);
			// System.out.println("entero "+entero);

			// System.out.println("TOTAL "+entero+"."+deci);
			String segDes = entero + "." + deci;

			seguroDesgravamenPrestamo = segDes;
		}

		// Formatear seguro de Cuota Protegida de Préstamo
		String seguroCuotaProtegidaPrestamo = solicitud.getSCUOTAP();

		if (seguroCuotaProtegidaPrestamo.equals("")) {
			seguroCuotaProtegidaPrestamo = " ";
		} else {
			seguroCuotaProtegidaPrestamo = Funciones
					.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSCUOTAP(), 2));
		}

		// Formatear Número de Cuotas de Préstamo
		String numeroCuotasPrestamo = solicitud.getNCUOTAS();

		if (numeroCuotasPrestamo.equals("")) {
			numeroCuotasPrestamo = " ";
		} else {
			numeroCuotasPrestamo = solicitud.getNCUOTAS();
		}

		// Formatear Tipo de Moneda de Préstamo
		String tipoMonedaPrestamo = solicitud.getCMONEDA();

		if (tipoMonedaPrestamo.equals("")) {
			tipoMonedaPrestamo = " ";
		} else {
			if (tipoMonedaPrestamo.equals("SOL")) {
				tipoMonedaPrestamo = "Soles";
			}
			;
		}

		// Formatear Monto de Cuotas de Préstamo
		String montoCuotasPrestamo = solicitud.getSCUOTA();

		if (montoCuotasPrestamo.equals("")) {
			montoCuotasPrestamo = " ";
		} else {
			montoCuotasPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSCUOTA(), 2));
		}

		// Formatear Número de Préstamo de Renovación
		String numeroPrestamoRenovacion = solicitud.getNPRESTAMO();

		if (numeroPrestamoRenovacion.equals("")) {
			numeroPrestamoRenovacion = " ";
		} else {
			numeroPrestamoRenovacion = solicitud.getNPRESTAMO();
		}

		// Formatear Saldo de Deuda de Préstamo
		String saldoDeudaPrestamo = solicitud.getSDEUDA();

		if (saldoDeudaPrestamo.equals("")) {
			saldoDeudaPrestamo = " ";
		} else {
			saldoDeudaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSDEUDA(), 2));
		}

		// Formatear Monto Neto de Deuda de Préstamo
		String montoDeudaPrestamo = solicitud.getSNETO();

		if (montoDeudaPrestamo.equals("")) {
			montoDeudaPrestamo = " ";
		} else {
			montoDeudaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSNETO(), 2));
		}

		// Formatear Gestor de Agencia
		String gestorAgencia = solicitud.getGESTOR();

		if (gestorAgencia.equals("")) {
			gestorAgencia = " ";
		} else {
			gestorAgencia = solicitud.getGESTOR();
		}

		// Formatear Supervisor de Agencia
		String supervisorPrestamo = solicitud.getSUPER();

		if (supervisorPrestamo.equals("")) {
			supervisorPrestamo = " ";
		} else {
			supervisorPrestamo = solicitud.getSUPER();
		}

		// Formatear Agencia
		String agencia = solicitud.getAGENCIA();

		if (agencia.equals("")) {
			agencia = " ";
		} else {
			agencia = solicitud.getAGENCIA();
		}

		String certificado = Funciones.eliminarCerosAlaIzquierda((hojaResumen.getPREFIJO_CP())) + "-"
				+ hojaResumen.getNPRESTAMO();
		// ****************************************************SOLICITUD***************************************************

		String secpoliza = poliza.getSec_poliza();

		String acliente = poliza.getAcliente();
		String finivigencia = poliza.getFini_vigencia();
		String ftervigencia = poliza.getFter_vigencia();
		String tipodoc = poliza.getTdoc() + "    " + poliza.getNdoc();
		String sexo = poliza.getSexo();
		String fenac = poliza.getFecha_nac();
		String nacionalidad = poliza.getNacionalidad();
		String estcivil = poliza.getEcivil();
		String telfijo = poliza.getTelefono();
		String operacion = poliza.getCelular();
		String ctrabajo = poliza.getClaboral();
		String direccion = poliza.getDireccion();
		String dis = "";
		String correo = "";
		String nprestamo = poliza.getCcuenta() + poliza.getCdsbolso();
		String oficina = poliza.getCagencia() + "   " + poliza.getClaboral();
		String codvendedor = poliza.getCusuario();
		String cuota = poliza.getNcuotas() + " Meses";

		// GENERACION DE PDF

		// response.setContentType("application/pdf");
		// response.addHeader("Content-Disposition", "attachment; filename=" +
		// "Prestamo Multired - "+nro_prestamo + ".pdf");
		// exporter = new JRPdfExporter();

		// -->> itext docexprestamo
		Document document = new Document();
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		PdfWriter copy = null;
		try {
			// pdfprestamo
			copy = PdfWriter.getInstance(document, baos);
			copy.setInitialLeading(5);
		} catch (DocumentException e) {

		}

		document.open();

		try {

			Calendar fecha = new GregorianCalendar();

			int ano111 = fecha.get(Calendar.YEAR);
			int mes111 = (fecha.get(Calendar.MONTH)) + 1;
			int dia111 = fecha.get(Calendar.DAY_OF_MONTH);

			String anoo22 = String.valueOf(ano111);
			String mess22 = String.valueOf(mes111);
			String diaa22 = String.valueOf(dia111);

			if (mess22.length() == 1) {
				mess22 = "0" + mess22;
			}
			if (diaa22.length() == 1) {
				diaa22 = "0" + diaa22;
			}
			String fechaEnv = diaa22 + "/" + mess22 + "/" + anoo22;

			int hora = fecha.get(Calendar.HOUR_OF_DAY);
			int min = fecha.get(Calendar.MINUTE);
			int seg = fecha.get(Calendar.SECOND);

			String horaEnv = hora + ":" + min + ":" + seg;

			Principal codUsu = request.getUserPrincipal();

			// usuario de seguridad
			String usuario = codUsu.getName();

			document.add(creaPDFGenera(nprestamo, usuario, fechaEnv, horaEnv));

			// 1 Solicitud de crédito

			String tipo = solicitud.getIENDOSO();

			document.add(creaPDFSolicitudPrestamo(numeroPrestamoRenov, nro_prestamo, tipoPrestamo,
					fechaSolicitudPrestamo, modalidadPrestamo, aCliente1, dniCliente1, fechNacCliente, eCivilCliente,
					sexoCliente, telefonoCliente1, celularCliente1, direccCliente, distritoCliente, provinciaCliente,
					dptoCliente, referenciaCliente, correoCliente, correspondenciaCliente, cLaboralCliente,
					entidadCliente, telefonoLaboralCliente, fechaIngresoCliente, montoIngresosCliente, aGarante1,
					dniGarante1, fechNacGarante, eCivilGarante, sexoGarante, telefonoGarante, celularGarante,
					direccGarante, distritoGarante, provinciaGarante, dptoGarante, referenciaGarante, correoGarante,
					correspondenciaGarante, cLaboralGarante, entidadGarante, telefonoLaboralGarante,
					fechaIngresoGarante, montoIngresosGarante, montoSolicitadoPrestamo, montoAbonadoPrestamo,
					iCuotaProtegidaPrestamo, iEndosoPrestamo, iPeriodoGraciaPrestamo, diaVencimientoPagoPrestamo,
					tasaPrestamo, tceaPrestamo, cuentaCliente, cuentaGarante, seguroDesgravamenPrestamo,
					seguroCuotaProtegidaPrestamo, numeroCuotasPrestamo, tipoMonedaPrestamo, montoCuotasPrestamo,
					numeroPrestamoRenovacion, saldoDeudaPrestamo, montoDeudaPrestamo, gestorAgencia, supervisorPrestamo,
					agencia, oficina, tipo));

			// 3 Hoja de Resumen

			ConsultaImagen dao = null;
			BufferedImage image = null;
			byte[] imageByte = null;

			dao = new ConsultaImagen();
			String codFirma1 = Constante.FIRMA1;
			imageByte = dao.consultarFirma1(codFirma1);
			Image firm1 = Image.getInstance(imageByte);
			firm1 = Image.getInstance(firm1);
			firm1.scalePercent(50);

			dao = new ConsultaImagen();
			String codFirma2 = Constante.FIRMA2;
			imageByte = dao.consultarFirma2(codFirma2);
			Image firm2 = Image.getInstance(imageByte);
			firm2 = Image.getInstance(firm2);
			firm2.scalePercent(50);

			// ejemplo imagen logobnexample
			Image logoBN = Image
					.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
			logoBN = Image.getInstance(logoBN);
			logoBN.setAlignment(Image.NO_BORDER);
			logoBN.setAlignment(Image.RIGHT);
			logoBN.scalePercent(60f);
			document.add(logoBN);

			String tasaPoliza = solicitud.getSDESGRAVAMEN();

			document.add(creaPDFHojaResumen(hojaResumen, tasaPoliza, montoAbonadoPrestamo, saldoPrestamo, saldoInteres,
					saldoTasaIC, saldoTasaIM, sSeguroDesgravamen, nPolizaDesgravamen, sPrimaCP, sEmisionCP, nPolizaCP,
					sSeguroCP, sEndosoCP, sEnvioCP, siPagint, finivigencia, prefijoCP, noamortcap,
					cronograma.getSDESGRAVAMEN(), cronograma.getNCUOTAS(), seguroDesgravamenPrestamo,
					hojaResumen.getCIA_SEG_DESGV(), (solicitud.getCORRESPONDENCIA()).substring(2)));

			PdfPTable table = new PdfPTable(2);
			table.setWidthPercentage(100);
			table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

			String agen = (solicitud.getAGENCIA()).substring(0, 4);

			ConsultaImagen daoAgencia = null;

			daoAgencia = new ConsultaImagen();

			String agenDB = daoAgencia.consultarAgencia(agen);

			if (agen.equals(agenDB)) {

				table.addCell(firm1);
				table.addCell(firm2);
				document.add(table);

			} else

			{

				PdfPTable lineaEs1 = new PdfPTable(2);
				lineaEs1.setWidthPercentage(100);
				lineaEs1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				lineaEs1.addCell("        ");
				lineaEs1.addCell("        ");
				document.add(lineaEs1);

				PdfPTable lineaEs = new PdfPTable(2);
				lineaEs.setWidthPercentage(100);
				lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				lineaEs.addCell("        ");
				lineaEs.addCell("        ");
				document.add(lineaEs);

			}

			PdfPTable linea = new PdfPTable(2);
			linea.setWidthPercentage(100);
			linea.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			linea.addCell("      _______________________________");
			linea.addCell("      _______________________________");
			document.add(linea);

			Paragraph firma = new Paragraph("FIRMA DEL BANCO");
			firma.getFont().setSize(10);

			PdfPTable banco = new PdfPTable(2);
			banco.setWidthPercentage(100);
			banco.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			banco.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			banco.addCell(firma);
			banco.addCell(firma);
			document.add(banco);

			dao = new ConsultaImagen();
			String codNombre1 = Constante.NOMBRE1;
			String nombre1 = dao.consultarNombre1(codNombre1);

			String codNombre2 = Constante.NOMBRE2;
			String nombre2 = dao.consultarNombre2(codNombre2);

			Paragraph nom1 = new Paragraph(nombre1);
			nom1.getFont().setSize(10);
			Paragraph nom2 = new Paragraph(nombre2);
			nom2.getFont().setSize(10);

			PdfPTable nombre = new PdfPTable(2);
			nombre.setWidthPercentage(100);
			nombre.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			nombre.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			nombre.addCell(nom1);
			nombre.addCell(nom2);
			document.add(nombre);

			PdfPTable espacio1 = new PdfPTable(1);
			espacio1.setWidthPercentage(100);
			espacio1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			espacio1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			espacio1.addCell("");
			document.add(espacio1);

			document.add(codigo());

			String correPolizas = correspondenciaCliente.substring(0, 1);

			if ((correPolizas.equalsIgnoreCase("N")) || (correPolizas.equalsIgnoreCase("V"))) {

			}

			if (seguroDesgravamenPrestamo.equalsIgnoreCase("0.08260")) {

				// 4 Solicitud seg desgravamen

				document.add(creaPDFPolizaUno(agencia, telefonoCliente1, secpoliza, acliente, finivigencia, tipodoc,
						sexo, fenac, nacionalidad, correoCliente, estcivil, telfijo, celularCliente1, ctrabajo,
						direccion, distritoCliente, provinciaCliente, dptoCliente, nprestamo, oficina, codvendedor));

				// 5 Poliza seguro de desgravamen

				document.add(creaPDFPolizaDos(secpoliza, cuota, finivigencia, ftervigencia, nprestamo, acliente,
						tipodoc, correoCliente, direccion));

				Image logoPositivaSeguro = Image
						.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/FirmaP.jpg"));
				logoPositivaSeguro = Image.getInstance(logoPositivaSeguro);
				logoPositivaSeguro.setAlignment(Image.NO_BORDER);
				logoPositivaSeguro.setAlignment(Image.LEFT);
				logoPositivaSeguro.scalePercent(60f);
				document.add(logoPositivaSeguro);

				document.add(creaPDFPolizaFirma1());

				document.add(creaPDFPolizaTres());
				document.add(creaPDFPolizaCuatro());

			} else {

				// primero

				ConsultaImagen daoPoliza = null;
				BufferedImage imagePoliza = null;
				byte[] imageBytePoliza = null;

				daoPoliza = new ConsultaImagen();
				String solicituParte1 = "0022";
				imageBytePoliza = daoPoliza.consultarPolizaParte1(solicituParte1);
				Image polizaParte1 = Image.getInstance(Util.reducirCalidadImagen(imageByte));
				polizaParte1 = Image.getInstance(polizaParte1);
				polizaParte1.scalePercent(50);

				PdfPTable table1 = new PdfPTable(2);
				table1.setWidthPercentage(100);
				table1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

				table1.addCell(polizaParte1);

				document.add(table1);

				document.add(creaPDFPolizaUnoAdulto(telefonoCliente1, secpoliza, acliente, finivigencia, tipodoc, sexo,
						fenac, nacionalidad, correoCliente, estcivil, telfijo, celularCliente1, ctrabajo, direccion,
						distritoCliente, provinciaCliente, dptoCliente, nprestamo, agencia, codvendedor));

				document.add(creaPDFPolizaDosAdulto(secpoliza, cuota, finivigencia, ftervigencia, nprestamo, acliente,
						tipodoc, correoCliente, direccion));

				// document.add(creaPDFPolizaFirma());

				document.add(creaPDFPolizaTres());
				document.add(creaPDFPolizaCuatro());

			}

			// 6 cuota protegida

			// prestamo poliza..

			Image logoPositiva = Image
					.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/positiva.jpg"));
			logoPositiva = Image.getInstance(logoPositiva);
			logoPositiva.scalePercent(50);

			if (prima.equalsIgnoreCase("0.00")) {

				document.add(creaPDFCartaInstruccion(fechaSolicitudPrestamo, cLaboralCliente, entidadCliente, aCliente1,
						dniCliente1, aGarante1, dniGarante1));

				// CLÁUSULAS GENERALES APLICABLES A LOS PRÉSTAMOS
				// doc1 prestamo
				System.out.println("PRIMA CERO DOC1 CLAUSULA-PRESTAMOACT");
				Image logoBN2 = Image
						.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
				logoBN2 = Image.getInstance(logoBN2);
				logoBN2.setAlignment(Image.NO_BORDER);
				logoBN2.setAlignment(Image.LEFT);
				logoBN2.scalePercent(60f);
				Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(0);
				for (Entry<String, InputStream> g : resultado2.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
					}
					document.newPage();

				}

				String parametro = "1";

				document.add(Testeopdf.clausulasGPageFinal2(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						parametro, aGarante1, dniGarante1));

				/*
				 * 
				 * 
				 * 
				 * 
				 * ConsultaImagen daoClausulasEsp1 = null; byte[] imageByteClausulasEsp1= null;
				 * daoClausulasEsp1 = new ConsultaImagen(); String clausulasEsp1 = "0060";
				 * imageByteClausulasEsp1
				 * =daoClausulasEsp1.consultarPolizaParte2(clausulasEsp1); Image condEsp1=
				 * Image.getInstance(Util.reducirCalidadImagen( imageByteClausulasEsp1));
				 * condEsp1.setBorder(Image.BOX); condEsp1.setBorderWidth(5);
				 * condEsp1.setBorderColor(BaseColor.WHITE); condEsp1 .scaleToFit(550, 800);
				 * document.add(condEsp1);
				 * 
				 * 
				 * ConsultaImagen daoClausulasEsp2 = null; byte[] imageByteClausulasEsp2= null;
				 * daoClausulasEsp2 = new ConsultaImagen(); String clausulasEsp2 = "0061";
				 * imageByteClausulasEsp2
				 * =daoClausulasEsp2.consultarPolizaParte2(clausulasEsp2); Image condEsp2=
				 * Image.getInstance(Util.reducirCalidadImagen( imageByteClausulasEsp2));
				 * condEsp2.setBorder(Image.BOX); condEsp2.setBorderWidth(5);
				 * condEsp2.setBorderColor(BaseColor.WHITE); condEsp2 .scaleToFit(550, 800);
				 * document.add(condEsp2);
				 */

				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(1);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
					}
					document.newPage();

				}
				document.add(Testeopdf.clausulasGPageFinal3(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						aGarante1, dniGarante1, parametro));
				document.newPage();

				PdfPTable fechadoc = new PdfPTable(2);
				fechadoc.setWidthPercentage(100);
				fechadoc.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				fechadoc.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				fechadoc.addCell("  FECHA   ");

				document.add(fechadoc);

				document.add(creaPDFCronograma(aGarante1, direccGarante, tceaPrestamo, telefonoCliente1,
						fechaDesembolso, aCliente, dniClienteCronograma, tlfCliente, dCliente, aGarante, dniGarante,
						deudaTotal, cronograma.getSPRESTAMO(), nPrestamoCronograma, tasa, tcea, seguroCP,
						cronograma.getNCUOTAS(), cronograma.getFVCTO(), cronograma.getSAMORTIZACION(),
						cronograma.getSINTERES(), cronograma.getSDESGRAVAMEN(), cronograma.getSDCUOTA(),
						cronograma.getACUOTA()));

				dao = new ConsultaImagen();
				String codFirma12 = Constante.FIRMA1;
				imageByte = dao.consultarFirma1(codFirma12);
				Image firm12 = Image.getInstance(imageByte);
				firm12 = Image.getInstance(firm12);
				firm12.scalePercent(50);

				dao = new ConsultaImagen();
				String codFirma22 = Constante.FIRMA2;
				imageByte = dao.consultarFirma2(codFirma22);
				Image firm22 = Image.getInstance(imageByte);
				firm22 = Image.getInstance(firm22);
				firm22.scalePercent(50);

				PdfPTable table2 = new PdfPTable(2);
				table2.setWidthPercentage(100);
				table2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

				String agenCrono = (solicitud.getAGENCIA()).substring(0, 4);

				String agenDBCrono = dao.consultarAgencia(agenCrono);

				if (agenCrono.equals(agenDBCrono)) {

					table2.addCell(firm1);
					table2.addCell(firm2);
					document.add(table2);

					PdfPTable linea2 = new PdfPTable(2);
					linea2.setWidthPercentage(100);
					linea2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					linea2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea2.addCell("      _______________________________");
					linea2.addCell("      _______________________________");
					document.add(linea);

					Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
					firma2.getFont().setSize(10);

					PdfPTable banco2 = new PdfPTable(2);
					banco2.setWidthPercentage(100);
					banco2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					banco2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					banco2.addCell(firma2);
					banco2.addCell(firma2);
					document.add(banco2);

					dao = new ConsultaImagen();
					String codNombre12 = Constante.NOMBRE1;
					String nombre12 = dao.consultarNombre1(codNombre1);

					String codNombre22 = Constante.NOMBRE2;
					String nombre22 = dao.consultarNombre2(codNombre2);

					Paragraph nom12 = new Paragraph(nombre1);
					nom12.getFont().setSize(10);
					Paragraph nom22 = new Paragraph(nombre2);
					nom22.getFont().setSize(10);

					PdfPTable nombre222 = new PdfPTable(2);
					nombre222.setWidthPercentage(100);
					nombre222.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					nombre222.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					nombre222.addCell(nom12);
					nombre222.addCell(nom22);
					document.add(nombre222);

					PdfPTable espacio12 = new PdfPTable(1);
					espacio12.setWidthPercentage(100);
					espacio12.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					espacio12.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
					espacio12.addCell("");
					document.add(espacio12);

				} else {

					PdfPTable lineaEs1 = new PdfPTable(2);
					lineaEs1.setWidthPercentage(100);
					lineaEs1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs1.addCell("        ");
					lineaEs1.addCell("        ");
					document.add(lineaEs1);

					PdfPTable lineaEs = new PdfPTable(2);
					lineaEs.setWidthPercentage(100);
					lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs.addCell("        ");
					lineaEs.addCell("        ");
					document.add(lineaEs);

					PdfPTable linea2 = new PdfPTable(2);
					linea2.setWidthPercentage(100);
					linea2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					linea2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea2.addCell("      _______________________________");
					linea2.addCell("      _______________________________");
					document.add(linea);

					Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
					firma2.getFont().setSize(10);

				}

			} else {

				// ------------------------------SEGURO CUOTA
				// PROTEGIDA-----------------------------------------------------------

				/*
				 * document.add(creaPDFPolizaCertificadoSeguroCuotaP(certificado, logoPositiva,
				 * secpoliza, acliente, finivigencia, ftervigencia, tipodoc, sexo, fenac,
				 * nacionalidad, estcivil, telefonoCliente1, celularCliente1, ctrabajo,
				 * direccion , dis , correoCliente, nprestamo, oficina,codvendedor,
				 * montoSolicitadoPrestamo, numeroCuotasPrestamo, tasaPrestamo, tceaPrestamo ,
				 * prima));
				 * 
				 * 
				 * Image firmaSolicitud = Image.getInstance(this.getClass().getClassLoader
				 * ().getResource("/assets/img/header/FirmaP2.jpg")); firmaSolicitud =
				 * Image.getInstance(firmaSolicitud);
				 * firmaSolicitud.setAlignment(Image.NO_BORDER);
				 * firmaSolicitud.setAlignment(Image.LEFT); firmaSolicitud.scalePercent(60f);
				 * document.add(firmaSolicitud);
				 * 
				 * document.add(creaPDFPolizaFirma22(certificado,logoPositiva, secpoliza,
				 * acliente, finivigencia, ftervigencia, tipodoc, sexo, fenac, nacionalidad,
				 * estcivil, telefonoCliente1, celularCliente1, ctrabajo, direccion , dis ,
				 * correoCliente, nprestamo, oficina,codvendedor, montoSolicitadoPrestamo,
				 * numeroCuotasPrestamo, tasaPrestamo, tceaPrestamo , prima));
				 * 
				 * 
				 * document.add(creaPDFPolizaCondicionesGenerales())
				 */;

				Map<String, InputStream> resultado3 = new ConsultaDocumentoImpl().buscarPdf(8);
				for (Entry<String, InputStream> g : resultado3.entrySet()) {
					InputStream pdf = g.getValue();
					// String key = g.getKey();
					PdfReader reader2 = new PdfReader(pdf);
					int numeroPagina = reader2.getNumberOfPages();
					for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
						if (pageNum == 1) {

							document.add(espacios(3));
							document.add(creaPDFPolizaCertificadoSeguroCuotaPPre(certificado, logoPositiva, secpoliza,
									acliente, finivigencia, ftervigencia, tipodoc, sexo, fenac, nacionalidad, estcivil,
									telefonoCliente1, celularCliente1, ctrabajo, direccion, dis, correoCliente,
									nprestamo, oficina, codvendedor, montoSolicitadoPrestamo, numeroCuotasPrestamo,
									tasaPrestamo, tceaPrestamo, prima, 9));
						}
					}
					document.newPage();

				}

				// ------------------------------FIN SEGURO CUOTA
				// PROTEGIDA-----------------------------------------------------------

				document.add(creaPDFCartaInstruccion(fechaSolicitudPrestamo, cLaboralCliente, entidadCliente, aCliente1,
						dniCliente1, aGarante1, dniGarante1));

				// doc2 prestamo
				System.out.println("PRIMA DIFERENTE DOC2 CLAUSULA-PRESTAMOACT");
				Image logoBN2 = Image
						.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
				logoBN2 = Image.getInstance(logoBN2);
				logoBN2.setAlignment(Image.NO_BORDER);
				logoBN2.setAlignment(Image.LEFT);
				logoBN2.scalePercent(60f);

				// -----------------------------clausula
				// general------------------------

				Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(0);
				for (Entry<String, InputStream> g : resultado2.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
					}
					document.newPage();

				}

				String parametro = "1";
				document.add(Testeopdf.clausulasGPageFinal2(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						parametro, aGarante1, dniGarante1));
				// document.newPage();

				// -----------------------------clausula
				// especifica------------------------
				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(1);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
					}
					document.newPage();

				}
				document.add(Testeopdf.clausulasGPageFinal3(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						aGarante1, dniGarante1, parametro));
				document.newPage();

				PdfPTable fechadoc = new PdfPTable(2);
				fechadoc.setWidthPercentage(100);
				fechadoc.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				fechadoc.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				fechadoc.addCell("  FECHA   ");

				document.add(fechadoc);

				// document.add(prueba());

				document.add(creaPDFCronograma(aGarante1, direccGarante, tceaPrestamo, telefonoCliente1,
						fechaDesembolso, aCliente, dniClienteCronograma, tlfCliente, dCliente, aGarante, dniGarante,
						deudaTotal, cronograma.getSPRESTAMO(), nPrestamoCronograma, tasa, tcea, seguroCP,
						cronograma.getNCUOTAS(), cronograma.getFVCTO(), cronograma.getSAMORTIZACION(),
						cronograma.getSINTERES(), cronograma.getSDESGRAVAMEN(), cronograma.getSDCUOTA(),
						cronograma.getACUOTA()));

				dao = new ConsultaImagen();
				String codFirma12 = Constante.FIRMA1;
				imageByte = dao.consultarFirma1(codFirma12);
				Image firm12 = Image.getInstance(imageByte);
				firm12 = Image.getInstance(firm12);
				firm12.scalePercent(50);

				dao = new ConsultaImagen();
				String codFirma22 = Constante.FIRMA2;
				imageByte = dao.consultarFirma2(codFirma22);
				Image firm22 = Image.getInstance(imageByte);
				firm22 = Image.getInstance(firm22);
				firm22.scalePercent(50);

				PdfPTable table2 = new PdfPTable(2);
				table2.setWidthPercentage(100);
				table2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

				String agen2 = (solicitud.getAGENCIA()).substring(0, 4);

				String agenDB2 = dao.consultarAgencia(agen2);

				if (agen2.equals(agenDB2)) {

					table2.addCell(firm1);
					table2.addCell(firm2);
					document.add(table2);

				} else

				{

					PdfPTable lineaEs1 = new PdfPTable(2);
					lineaEs1.setWidthPercentage(100);
					lineaEs1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs1.addCell("        ");
					lineaEs1.addCell("        ");
					document.add(lineaEs1);

					PdfPTable lineaEs = new PdfPTable(2);
					lineaEs.setWidthPercentage(100);
					lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs.addCell("        ");
					lineaEs.addCell("        ");
					document.add(lineaEs);

				}

				PdfPTable linea2 = new PdfPTable(2);
				linea2.setWidthPercentage(100);
				linea2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea2.addCell("      _______________________________");
				linea2.addCell("      _______________________________");
				document.add(linea);

				Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
				firma2.getFont().setSize(10);

				PdfPTable banco2 = new PdfPTable(2);
				banco2.setWidthPercentage(100);
				banco2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				banco2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				banco2.addCell(firma2);
				banco2.addCell(firma2);
				document.add(banco2);

				dao = new ConsultaImagen();
				String codNombre12 = Constante.NOMBRE1;
				String nombre12 = dao.consultarNombre1(codNombre1);

				String codNombre22 = Constante.NOMBRE2;
				String nombre22 = dao.consultarNombre2(codNombre2);

				Paragraph nom12 = new Paragraph(nombre1);
				nom12.getFont().setSize(10);
				Paragraph nom22 = new Paragraph(nombre2);
				nom22.getFont().setSize(10);

				PdfPTable nombre222 = new PdfPTable(2);
				nombre222.setWidthPercentage(100);
				nombre222.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				nombre222.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				nombre222.addCell(nom12);
				nombre222.addCell(nom22);
				document.add(nombre222);

				PdfPTable espacio12 = new PdfPTable(1);
				espacio12.setWidthPercentage(100);
				espacio12.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				espacio12.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
				espacio12.addCell("");

			}

		} catch (DocumentException e) {

		}
		document.close();

		byte[] ba = baos.toByteArray();

		// envio a base de datos

		String path = "";

		Calendar fecha = new GregorianCalendar();

		int ano = fecha.get(Calendar.YEAR);
		int mes = (fecha.get(Calendar.MONTH)) + 1;
		int dia = fecha.get(Calendar.DAY_OF_MONTH);

		String anoo = String.valueOf(ano);
		String mess = String.valueOf(mes);
		String diaa = String.valueOf(dia);

		if (mess.length() == 1) {
			mess = "0" + mess;
		}
		if (diaa.length() == 1) {
			diaa = "0" + diaa;
		}
		String fechaEnv = diaa + "/" + mess + "/" + anoo;

		int hora = fecha.get(Calendar.HOUR_OF_DAY);
		int min = fecha.get(Calendar.MINUTE);
		int seg = fecha.get(Calendar.SECOND);

		String horaEnv = hora + ":" + min + ":" + seg;
		String horaLec = "";
		String fechaLec = "";
		String ipLec = "";
		String estado = "";
		String campo1 = "2"; // Se extorno
		String campo2 = correoGarante.trim();

		CargarDocumento cargarPrestamo = new CargarDocumento();

		String PrestamoConsult = cargarPrestamo.prestamoConsultaGuardo((nro_prestamo).trim());
		if (PrestamoConsult.length() == 0) {

			request.setAttribute("msje", "Error 20");
			// request.setAttribute("prestamo",prestamo);

		}
		if ((PrestamoConsult.equalsIgnoreCase("1")) || (PrestamoConsult.equalsIgnoreCase("2"))) {

			// String prestamoInsert = cargarPrestamo.prestamo(nro_prestamo,
			// "PRESTAMO", ba,
			// poliza.getEmail(), fechaEnv, horaEnv, fechaLec, horaLec, ipLec,
			// estado, campo1, campo2);

			// String prestamoActualizaDoc =
			// cargarPrestamo.prestamoActualizaDoc(nro_prestamo, ba,
			// (poliza.getEmail()).trim(), campo1, campo2);

			// if(prestamoActualizaDoc.equalsIgnoreCase("ACTUALIZADO")){

			// request.setAttribute("msje","Error 21");

			// }

		}
		path = View.returnJsp(model, "prestamo/prestamo");
		return path;

	}

	// -----------------------------------------DOCUMENTO PRE
	// IMPRESO-----------------------------------------------

	@RequestMapping(value = "exPagare", method = RequestMethod.POST)
	public void exPagare(HttpServletRequest request, HttpServletResponse response) throws Exception {

		System.out.println("eors_individual");
		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String valor1 = request.getParameter("numero");
		String cta = request.getParameter("cta");
		String nro_prestamo = cta + valor1;
		String es_platinum = " ";

		CicsSoapConnection cics = new CicsSoapConnection();
		RequestMensajeHost host = new RequestMensajeHost();

		// Indicador

		BodyIndicador indicadorInput = new BodyIndicador();
		BodyIndicador indicadorOutPut = new BodyIndicador();

		indicadorInput.cargarData(nro_prestamo);
		indicadorInput.toShowData();

		String inputIndicador = indicadorInput.toString();

		BodyIndicador bodyIn11 = new BodyIndicador();
		BodyIndicador bodyOut11 = null;

		bodyOut11 = cics.enviarTramaIndicador(indicadorInput, bodyIn11);

		System.out.println(bodyOut11.toShowData());

		BnIndicador indicador = null;

		if (bodyOut11 != null) {
			indicador = new BnIndicador();

			indicador.setTOPERACION(bodyOut11.getByTag("DFH-TOPERACION"));
			indicador.setNPRESTAMO(bodyOut11.getByTag("DFH-NPRESTAMO"));

			indicador.setCERROR(bodyOut11.getByTag("DFH-CERROR"));
			indicador.setMSJ(bodyOut11.getByTag("DFH-MSJ"));

		}

		String operacion = indicador.getTOPERACION();
		String prestamo = indicador.getNPRESTAMO();
		String cerro = indicador.getCERROR();

		String mes = indicador.getMSJ();

		System.out.println("Se envio el indicador 10 " + mes);

		BnPolizaPrestamo poliza = null;

		poliza = host.getEmisionDocumentosPrestamo(nro_prestamo);

		String prima = Funciones.formatearMonto(Funciones.tramaToBigDecimal(poliza.getSprima_des(), 2));

		// HOJA DE RESUMEN

		BodyHojaResumen hojaInput = new BodyHojaResumen();
		BodyHojaResumen hojaOutPut = new BodyHojaResumen();

		hojaInput.cargarData(nro_prestamo);
		hojaInput.toShowData();

		String inputHoja = hojaInput.toString();

		BodyHojaResumen bodyIn1 = new BodyHojaResumen();
		BodyHojaResumen bodyOut1 = null;

		bodyOut1 = cics.enviarTramaHojaResumen(hojaInput, bodyIn1);

		// System.out.println(bodyOut1.toShowData());

		BnHojaResumen hojaResumen = null;

		if (bodyOut1 != null) {
			hojaResumen = new BnHojaResumen();

			hojaResumen.setTOPERACION(bodyOut1.getByTag("DFH-TOPERACION"));
			hojaResumen.setNPRESTAMO(bodyOut1.getByTag("DFH-NPRESTAMO"));
			hojaResumen.setSPRESTAMO(bodyOut1.getByTag("DFH-SPRESTAMO"));
			hojaResumen.setSINTERES(bodyOut1.getByTag("DFH-SINTERES"));
			hojaResumen.setSTASA_IC(bodyOut1.getByTag("DFH-STAS-IC"));
			hojaResumen.setSTASA_IM(bodyOut1.getByTag("DFH-STASA-IM"));
			hojaResumen.setCIA_SEG_DESGV(bodyOut1.getByTag("DFH-CIA-SEG-DESGV"));
			hojaResumen.setPSEGURO_DESGV(bodyOut1.getByTag("DFH-PSEGURO-DESGV"));
			hojaResumen.setPEMISION_DESGV(bodyOut1.getByTag("DFH-PEMISION-DESGV"));
			hojaResumen.setSSEGURO_DESGV(bodyOut1.getByTag("DFH-SSEGURO-DESGV"));
			hojaResumen.setNPOLIZA_DESGV(bodyOut1.getByTag("DFH-NPOLIZA-DESGV"));
			hojaResumen.setCIA_ASEG_CP(bodyOut1.getByTag("DFH-CIA-ASEG-CP"));
			hojaResumen.setSPRIMA_CP(bodyOut1.getByTag("DFH-SPRIMA-CP"));
			hojaResumen.setSEMISION_CP(bodyOut1.getByTag("DFH-SEMISION-CP"));
			hojaResumen.setPREFIJO_CP(bodyOut1.getByTag("DFH-PREFIJO-CP"));
			hojaResumen.setFILLER_CP(bodyOut1.getByTag("DFH-FILLER-CP"));
			hojaResumen.setNPOLIZA_CP(bodyOut1.getByTag("DFH-NPOLIZA-CP"));
			hojaResumen.setSSEGURO_CP(bodyOut1.getByTag("DFH-SSEGURO-CP"));
			hojaResumen.setSENDOSO(bodyOut1.getByTag("DFH-SENDOSO"));
			hojaResumen.setSENVIO(bodyOut1.getByTag("DFH-SENVIO"));
			hojaResumen.setNO_AMORTCAP(bodyOut1.getByTag("DFH-NO-AMORTCAP"));
			hojaResumen.setSI_PAGINT(bodyOut1.getByTag("DFH-SI-PAGINT"));
			hojaResumen.setCERROR(bodyOut1.getByTag("DFH-CERROR"));
			hojaResumen.setMSJ(bodyOut1.getByTag("DFH-MSJ"));

		}

		String saldoPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSPRESTAMO(), 2));
		String saldoInteres = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSINTERES(), 2));
		String saldoTasaIC = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSTASA_IC(), 7));
		String saldoTasaIM = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSTASA_IM(), 7));

		String sSeguroDesgravamen = Funciones
				.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSSEGURO_DESGV(), 2));
		String nPolizaDesgravamen = Funciones.validar_texto_reves(hojaResumen.getNPOLIZA_DESGV());
		String sPrimaCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSPRIMA_CP(), 2));
		String sEmisionCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal11(hojaResumen.getSEMISION_CP()));
		String sSeguroCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSSEGURO_CP(), 2));
		String sEndosoCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSENDOSO(), 2));

		String nPolizaCP = hojaResumen.getNPOLIZA_CP();
		String sEnvioCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSENVIO(), 2));
		String prefijoCP = hojaResumen.getPREFIJO_CP();

		String siPagint = hojaResumen.getSI_PAGINT();
		String noamortcap = hojaResumen.getNO_AMORTCAP();

		GeneracionCronograma cronograma = null;

		try {

			BodyGeneracionCronograma cronogramaInput = new BodyGeneracionCronograma();

			String tipo_prestamo = "05";

			cronogramaInput.cargarData(tipo_prestamo, nro_prestamo);

			System.out.println("Cronograma input :" + cronogramaInput.toShowData());

			String inputCronograma = cronogramaInput.toString();

			BodyGeneracionCronograma bodyIn2 = new BodyGeneracionCronograma();
			BodyGeneracionCronograma cronogramaOutPut = null;

			cronogramaOutPut = cics.enviarTrama(cronogramaInput, bodyIn2);

			System.out.println(cronogramaOutPut.toShowData());

			if (cronogramaOutPut != null) {
				cronograma = new GeneracionCronograma();

				cronograma.setTOPERACION(cronogramaOutPut.getByTag("DFH-TOPERACION-76"));
				cronograma.setNPRESTAMO(cronogramaOutPut.getByTag("DFH-NPRESTAMO-76"));
				cronograma.setFDSBOLSO(cronogramaOutPut.getByTag("DFH-FDSBOLSO-76"));
				cronograma.setSPRESTAMO(cronogramaOutPut.getByTag("DFH-SPRESTAMO-76"));

				// cronograma.setSPRESTAMO(Funciones.getSimMonedaxCuenta(cronogramaOutPut.getByTag("DFH-SPRESTAMO-76"))+ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-SDEUDA-DIA-76"),2)));

				cronograma.setSAMORTIZADO(cronogramaOutPut.getByTag("DFH-SAMORTIZADO-76"));
				cronograma.setSACTUAL(cronogramaOutPut.getByTag("DFH-SACTUAL-76"));
				cronograma.setSDEUDA_D(cronogramaOutPut.getByTag("DFH-SDEUDA-DIA-76"));
				cronograma.setNCUOTAS(cronogramaOutPut.getByTag("DFH-NCUOTAS-76"));
				// cronograma.setMAIL(cronogramaOutPut.getByTag("DFH-CRONOGRAMA"));

				ArrayList<String> bcuota = new ArrayList<String>();
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-1").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-2").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-3").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-4").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-5").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-6").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-7").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-8").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-9").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-10").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-11").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-12").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-13").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-14").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-15").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-16").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-17").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-18").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-19").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-20").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-21").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-22").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-23").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-24").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-25").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-26").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-27").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-28").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-29").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-30").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-31").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-32").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-33").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-34").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-35").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-36").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-37").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-38").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-39").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-40").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-41").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-42").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-43").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-44").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-45").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-46").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-47").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-48").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-49").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-50").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-51").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-52").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-53").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-54").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-55").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-56").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-57").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-58").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-59").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-60").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-61").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-62").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-63").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-64").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-65").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-66").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-67").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-68").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-69").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-70").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-71").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-72").trim());
				cronograma.setBCUOTA(bcuota);

				ArrayList<String> acuota = new ArrayList<String>();
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-1").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-2").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-3").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-4").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-5").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-6").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-7").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-8").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-9").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-10").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-11").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-12").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-13").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-14").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-15").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-16").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-17").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-18").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-19").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-20").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-21").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-22").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-23").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-24").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-25").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-26").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-27").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-28").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-29").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-30").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-31").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-32").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-33").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-34").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-35").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-36").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-37").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-38").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-39").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-40").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-41").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-42").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-43").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-44").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-45").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-46").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-47").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-48").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-49").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-50").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-51").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-52").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-53").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-54").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-55").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-56").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-57").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-58").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-59").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-60").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-61").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-62").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-63").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-64").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-65").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-66").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-67").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-68").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-69").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-70").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-71").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-72").trim());
				cronograma.setACUOTA(acuota);

				ArrayList<String> fvcto = new ArrayList<String>();
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-1").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-2").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-3").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-4").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-5").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-6").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-7").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-8").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-9").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-10").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-11").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-12").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-13").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-14").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-15").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-16").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-17").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-18").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-19").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-20").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-21").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-22").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-23").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-24").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-25").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-26").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-27").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-28").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-29").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-30").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-31").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-32").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-33").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-34").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-35").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-36").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-37").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-38").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-39").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-40").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-41").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-42").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-43").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-44").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-45").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-46").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-47").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-48").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-49").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-50").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-51").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-52").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-53").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-54").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-55").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-56").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-57").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-58").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-59").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-60").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-61").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-62").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-63").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-64").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-65").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-66").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-67").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-68").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-69").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-70").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-71").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-72").trim());
				cronograma.setFVCTO(fvcto);

				ArrayList<String> fcancel = new ArrayList<String>();
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-1").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-2").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-3").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-4").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-5").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-6").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-7").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-8").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-9").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-10").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-11").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-12").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-13").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-14").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-15").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-16").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-17").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-18").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-19").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-20").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-21").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-22").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-23").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-24").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-25").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-26").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-27").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-28").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-29").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-30").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-31").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-32").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-33").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-34").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-35").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-36").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-37").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-38").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-39").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-40").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-41").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-42").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-43").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-44").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-45").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-46").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-47").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-48").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-49").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-50").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-51").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-52").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-53").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-54").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-55").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-56").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-57").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-58").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-59").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-60").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-61").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-62").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-63").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-64").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-65").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-66").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-67").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-68").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-69").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-70").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-71").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-72").trim());
				cronograma.setFCANCEL(fcancel);

				ArrayList<String> gcuota = new ArrayList<String>();
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-1").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-2").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-3").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-4").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-5").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-6").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-7").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-8").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-9").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-10").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-11").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-12").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-13").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-14").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-15").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-16").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-17").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-18").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-19").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-20").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-21").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-22").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-23").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-24").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-25").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-26").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-27").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-28").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-29").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-30").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-31").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-32").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-33").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-34").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-35").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-36").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-37").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-38").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-39").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-40").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-41").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-42").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-43").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-44").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-45").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-46").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-47").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-48").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-49").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-50").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-51").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-52").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-53").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-54").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-55").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-56").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-57").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-58").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-59").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-60").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-61").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-62").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-63").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-64").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-65").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-66").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-67").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-68").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-69").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-70").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-71").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-72").trim());
				cronograma.setGCUOTA(gcuota);

				ArrayList<String> samortizacion = new ArrayList<String>();
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-1").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-2").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-3").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-4").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-5").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-6").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-7").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-8").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-9").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-10").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-11").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-12").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-13").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-14").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-15").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-16").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-17").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-18").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-19").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-20").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-21").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-22").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-23").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-24").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-25").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-26").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-27").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-28").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-29").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-30").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-31").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-32").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-33").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-34").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-35").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-36").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-37").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-38").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-39").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-40").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-41").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-42").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-43").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-44").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-45").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-46").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-47").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-48").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-49").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-50").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-51").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-52").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-53").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-54").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-55").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-56").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-57").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-58").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-59").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-60").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-61").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-62").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-63").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-64").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-65").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-66").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-67").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-68").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-69").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-70").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-71").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-72").trim());
				cronograma.setSAMORTIZACION(samortizacion);

				ArrayList<String> sinteres = new ArrayList<String>();
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-1").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-2").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-3").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-4").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-5").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-6").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-7").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-8").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-9").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-10").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-11").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-12").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-13").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-14").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-15").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-16").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-17").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-18").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-19").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-20").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-21").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-22").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-23").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-24").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-25").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-26").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-27").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-28").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-29").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-30").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-31").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-32").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-33").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-34").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-35").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-36").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-37").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-38").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-39").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-40").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-41").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-42").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-43").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-44").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-45").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-46").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-47").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-48").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-49").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-50").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-51").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-52").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-53").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-54").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-55").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-56").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-57").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-58").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-59").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-60").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-61").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-62").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-63").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-64").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-65").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-66").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-67").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-68").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-69").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-70").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-71").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-72").trim());
				cronograma.setSINTERES(sinteres);

				ArrayList<String> sdesgravamen = new ArrayList<String>();
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-1").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-2").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-3").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-4").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-5").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-6").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-7").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-8").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-9").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-10").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-11").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-12").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-13").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-14").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-15").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-16").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-17").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-18").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-19").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-20").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-21").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-22").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-23").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-24").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-25").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-26").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-27").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-28").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-29").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-30").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-31").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-32").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-33").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-34").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-35").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-36").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-37").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-38").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-39").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-40").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-41").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-42").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-43").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-44").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-45").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-46").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-47").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-48").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-49").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-50").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-51").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-52").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-53").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-54").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-55").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-56").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-57").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-58").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-59").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-60").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-61").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-62").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-63").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-64").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-65").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-66").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-67").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-68").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-69").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-70").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-71").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-72").trim());
				cronograma.setSDESGRAVAMEN(sdesgravamen);

				ArrayList<String> sdcuota = new ArrayList<String>();
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-1").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-2").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-3").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-4").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-5").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-6").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-7").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-8").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-9").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-10").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-11").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-12").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-13").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-14").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-15").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-16").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-17").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-18").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-19").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-20").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-21").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-22").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-23").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-24").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-25").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-26").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-27").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-28").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-29").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-30").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-31").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-32").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-33").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-34").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-35").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-36").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-37").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-38").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-39").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-40").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-41").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-42").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-43").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-44").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-45").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-46").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-47").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-48").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-49").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-50").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-51").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-52").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-53").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-54").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-55").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-56").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-57").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-58").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-59").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-60").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-61").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-62").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-63").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-64").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-65").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-66").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-67").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-68").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-69").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-70").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-71").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-72").trim());
				cronograma.setSDCUOTA(sdcuota);

				cronograma.setACLIENTE(cronogramaOutPut.getByTag("DFH-ACLIENTE-76").trim());
				cronograma.setDOCUMENTO(cronogramaOutPut.getByTag("DFH-DOCUMENTO-76").trim());
				cronograma.setTELEFONO(cronogramaOutPut.getByTag("DFH-TELEFONO-76").trim());
				cronograma.setDCLIENTE(cronogramaOutPut.getByTag("DFH-DCLIENTE-76").trim());
				cronograma.setDOCUMGAR(cronogramaOutPut.getByTag("DFH-DOCUMGAR-76").trim());
				cronograma.setAGARANTE(cronogramaOutPut.getByTag("DFH-AGARANTE-76").trim());
				cronograma.setDGARANTE(cronogramaOutPut.getByTag("DFH-DGARANTE-76").trim());

				cronograma.setTASA(cronogramaOutPut.getByTag("DFH-TASA-76").trim());

				// cronograma.setTASA(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-TASA-76"),7))+
				// " %");

				// System.out.println("TASA: "+cronograma.getTASA());

				cronograma.setTCEA(cronogramaOutPut.getByTag("DFH-TCEA-76").trim());

				// cronograma.setTCEA(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-TCEA-76"),7))+
				// " %");

				cronograma.setSGCPRO(cronogramaOutPut.getByTag("DFH-SGCPRO-76").trim());

				// cronograma.setSGCPRO(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-SGCPRO-76"),2))+
				// " %");

				cronograma.setCERROR(cronogramaOutPut.getByTag("DFH-CERROR-76").trim());
				cronograma.setMSJ(cronogramaOutPut.getByTag("DFH-MSJ-76").trim());

				cronograma.setMSGNO_HOST(cronogramaOutPut.getByTag("msgnoHost").trim());
				cronograma.setMSJE_HOST(cronogramaOutPut.getByTag("msjeHost").trim());
			}

		} catch (Exception e) {
			// log.error(e,"","");
		}

		String fechaDesembolso = cronograma.getFDSBOLSO();
		String diaDesembolso = "";
		String mesDesembolso = "";
		String annioDesembolso = "";

		if (fechaDesembolso.equals("")) {
			fechaDesembolso = "";
		} else {
			annioDesembolso = (cronograma.getFDSBOLSO()).substring(0, 4);
			mesDesembolso = (cronograma.getFDSBOLSO()).substring(4, 6);
			diaDesembolso = (cronograma.getFDSBOLSO()).substring(6, 8);

			fechaDesembolso = diaDesembolso + "/" + mesDesembolso + "/" + annioDesembolso;
		}

		// Formatear Apellidos y Nombres de Cliente
		String aCliente = cronograma.getACLIENTE();

		if (aCliente.equals("")) {
			aCliente = "";
		} else {
			aCliente = Funciones.validar_texto_reves(cronograma.getACLIENTE());
		}

		// Formatear Apellidos y Nombres de Garante
		String aGarante = cronograma.getAGARANTE();

		if (aGarante.equals("")) {
			aGarante = "";
		} else {
			aGarante = Funciones.validar_texto_reves(cronograma.getAGARANTE());
		}

		// Formatear DNI de Cliente para pagaré
		String dniCliente = cronograma.getDOCUMENTO();

		if (dniCliente.equals("")) {
			dniCliente = "";
		} else {

			String dni123 = (cronograma.getDOCUMENTO()).trim();

			if (dni123.length() == 10) {

				dniCliente = dni123;
			} else {
				dniCliente = (cronograma.getDOCUMENTO()).substring(4, 14);
			}

			// dniCliente = (cronograma.getDOCUMENTO()).substring(4, 14);

		}

		// Formatear DNI de Cliente para Cronograma
		String dniClienteCronograma = cronograma.getDOCUMENTO();

		if (dniClienteCronograma.equals("")) {
			dniClienteCronograma = "";
		} else {

			// dniClienteCronograma = (cronograma.getDOCUMENTO()).substring(0,
			// 3)+" "+(cronograma.getDOCUMENTO()).substring(4, 14);

			String dni123 = (cronograma.getDOCUMENTO()).trim();

			if (dni123.length() == 10) {

				dniClienteCronograma = dni123;
			} else {
				dniClienteCronograma = (cronograma.getDOCUMENTO()).substring(4, 14);
			}
		}

		// Formatear Número de Teléfono de Cliente
		String tlfCliente = cronograma.getTELEFONO();

		if (tlfCliente.equals("")) {
			tlfCliente = "";
		} else {
			tlfCliente = cronograma.getTELEFONO();
		}

		// Formatear DNI de Garante
		String dniGarante = cronograma.getDOCUMGAR();

		if (dniGarante.equals("")) {
			dniGarante = "";
		} else {
			dniGarante = (cronograma.getDOCUMGAR()).trim();
		}

		// Formatear Monto de Préstamo
		String deudaTotal = cronograma.getSPRESTAMO();

		if (deudaTotal.equals("")) {
			deudaTotal = "";
		} else {
			deudaTotal = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getSPRESTAMO(), 2));
		}

		// Formatear Tasa Int.
		String tasa = cronograma.getTASA();

		if (tasa.equals("")) {
			tasa = "";
		} else {
			tasa = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getTASA(), 7));
		}

		// Formatear TCEA
		String tcea = cronograma.getTCEA();

		if (tcea.equals("")) {
			tcea = "";
		} else {
			tcea = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getTCEA(), 7));
		}

		// Formatear Seguro de Cuota Protegida
		String seguroCP = cronograma.getSGCPRO();

		if (seguroCP.equals("")) {
			seguroCP = "";
		} else {
			seguroCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getSGCPRO(), 2));
		}

		// Formatear Número de Préstamo para Cronograma

		String nPrestamoCronograma = cronograma.getNPRESTAMO();
		String valor11 = "";
		String valor2 = "";

		if (nPrestamoCronograma.equals("")) {
			nPrestamoCronograma = "";
		} else {
			valor11 = (cronograma.getNPRESTAMO()).substring(0, 11);
			valor2 = (cronograma.getNPRESTAMO()).substring(11, 13);

			nPrestamoCronograma = valor11 + "-" + valor2;
		}

		// Formatear Número de Préstamo para Pagaré

		String nPrestamoPP = cronograma.getNPRESTAMO();

		if (nPrestamoPP.equals("")) {
			nPrestamoPP = "";
		} else {
			nPrestamoPP = cronograma.getNPRESTAMO();
		}

		// Formatear Dirección de Cliente
		String dCliente = cronograma.getDCLIENTE();

		if (dCliente.equals("")) {
			dCliente = "";
		} else {
			dCliente = Funciones.validar_texto_reves(cronograma.getDCLIENTE());
		}

		// Formatear Dirección de Garante
		String dGarante = cronograma.getDGARANTE();

		if (dGarante.equals("")) {
			dGarante = "";
		} else {
			dGarante = Funciones.validar_texto_reves(cronograma.getDGARANTE());
		}

		// Solicitud de prestamo

		BnSolicitudPrestamo solicitud = null;

		BodySolicitudPrestamo solicitudInput = new BodySolicitudPrestamo();

		String tipo_prestamo = "07";

		solicitudInput.cargarData(tipo_prestamo, nro_prestamo);

		System.out.println("Solicitud input :" + solicitudInput.toShowData());

		String inputSolicitud = solicitudInput.toString();

		BodySolicitudPrestamo bodyIn3 = new BodySolicitudPrestamo();
		BodySolicitudPrestamo solicitudOutPut = null;

		solicitudOutPut = cics.enviarTrama(solicitudInput, bodyIn3);

		System.out.println("solicitud:" + solicitudInput.toShowData());

		System.out.println(solicitudOutPut.toShowData());

		if (solicitudOutPut != null) {
			solicitud = new BnSolicitudPrestamo();

			solicitud.setTOPERACION(solicitudOutPut.getByTag("DFH-TOPERACION").trim());
			solicitud.setNPRESTAMO(solicitudOutPut.getByTag("DFH-NPRESTAMO").trim());
			solicitud.setTPRESTAMO(solicitudOutPut.getByTag("DFH-TPRESTAMO").trim());
			solicitud.setFSOLICITUD(solicitudOutPut.getByTag("DFH-FSOLICITUD").trim());
			solicitud.setMODALIDAD(solicitudOutPut.getByTag("DFH-MODALIDAD").trim());
			solicitud.setACLIENTE(solicitudOutPut.getByTag("DFH-ACLIENTE").trim());
			solicitud.setDOCUMENTO(solicitudOutPut.getByTag("DFH-DOCUMENTO").trim());
			solicitud.setFNAC(solicitudOutPut.getByTag("DFH-FNAC").trim());
			solicitud.setECIVIL(solicitudOutPut.getByTag("DFH-ECIVIL").trim());
			solicitud.setSEXO(solicitudOutPut.getByTag("DFH-SEXO"));
			solicitud.setTELEFONO(solicitudOutPut.getByTag("DFH-TELEFONO").trim());
			solicitud.setCELULAR(solicitudOutPut.getByTag("DFH-CELULAR").trim());
			solicitud.setDCLIENTE(solicitudOutPut.getByTag("DFH-DCLIENTE").trim());
			solicitud.setDISTRITO(solicitudOutPut.getByTag("DFH-DISTRITO").trim());
			solicitud.setPROVINCIA(solicitudOutPut.getByTag("DFH-PROVINCIA").trim());
			solicitud.setDPTO(solicitudOutPut.getByTag("DFH-DPTO").trim());
			solicitud.setREFERENCIA(solicitudOutPut.getByTag("DFH-REFERENCIA").trim());
			solicitud.setCORREO(solicitudOutPut.getByTag("DFH-CORREO").trim());
			solicitud.setCORRESPONDENCIA(solicitudOutPut.getByTag("DFH-CORRESPONDENCIA").trim());
			solicitud.setCLABORAL(solicitudOutPut.getByTag("DFH-CLABORAL").trim());
			solicitud.setENTIDAD(solicitudOutPut.getByTag("DFH-ENTIDAD").trim());
			solicitud.setTLABORAL(solicitudOutPut.getByTag("DFH-TLABORAL").trim());
			solicitud.setFINGRESO(solicitudOutPut.getByTag("DFH-FINGRESO").trim());
			solicitud.setSINGRESOS(solicitudOutPut.getByTag("DFH-SINGRESOS").trim());
			solicitud.setACLIENTEG(solicitudOutPut.getByTag("DFH-ACLIENTE-G").trim());
			solicitud.setDOCUMENTOG(solicitudOutPut.getByTag("DFH-DOCUMENTO-G").trim());
			solicitud.setFNACG(solicitudOutPut.getByTag("DFH-FNAC-G").trim());
			solicitud.setECIVILG(solicitudOutPut.getByTag("DFH-ECIVIL-G").trim());
			solicitud.setSEXOG(solicitudOutPut.getByTag("DFH-SEXO-G").trim());
			solicitud.setTELEFONOG(solicitudOutPut.getByTag("DFH-TELEFONO-G").trim());
			solicitud.setCELULARG(solicitudOutPut.getByTag("DFH-CELULAR-G").trim());
			solicitud.setDCLIENTEG(solicitudOutPut.getByTag("DFH-DCLIENTE-G").trim());
			solicitud.setDISTRITOG(solicitudOutPut.getByTag("DFH-DISTRITO-G").trim());
			solicitud.setPROVINCIAG(solicitudOutPut.getByTag("DFH-PROVINCIA-G").trim());
			solicitud.setDPTOG(solicitudOutPut.getByTag("DFH-DPTO-G").trim());
			solicitud.setREFERENCIAG(solicitudOutPut.getByTag("DFH-REFERENCIA-G").trim());
			solicitud.setCORREOG(solicitudOutPut.getByTag("DFH-CORREO-G").trim());
			solicitud.setCORRESPONDENCIAG(solicitudOutPut.getByTag("DFH-CORRESPONDENCIA-G").trim());
			solicitud.setCLABORALG(solicitudOutPut.getByTag("DFH-CLABORAL-G").trim());
			solicitud.setENTIDADG(solicitudOutPut.getByTag("DFH-ENTIDAD-G").trim());
			solicitud.setTLABORALG(solicitudOutPut.getByTag("DFH-TLABORAL-G").trim());
			solicitud.setFINGRESOG(solicitudOutPut.getByTag("DFH-FINGRESO-G").trim());
			solicitud.setSINGRESOSG(solicitudOutPut.getByTag("DFH-SINGRESOS-G").trim());
			solicitud.setSSOLICITADO(solicitudOutPut.getByTag("DFH-SSOLICITADO").trim());
			solicitud.setSABONADO(solicitudOutPut.getByTag("DFH-SABONADO").trim());
			solicitud.setICUOTAP(solicitudOutPut.getByTag("DFH-ICUOTAP").trim());
			solicitud.setIENDOSO(solicitudOutPut.getByTag("DFH-IENDOSO").trim());
			solicitud.setIPGRACIA(solicitudOutPut.getByTag("DFH-IPGRACIA").trim());
			solicitud.setDPAGO(solicitudOutPut.getByTag("DFH-DPAGO").trim());
			solicitud.setTASA(solicitudOutPut.getByTag("DFH-TASA").trim());
			solicitud.setTCEA(solicitudOutPut.getByTag("DFH-TCEA").trim());
			solicitud.setCCUENTA(solicitudOutPut.getByTag("DFH-CCUENTA").trim());
			solicitud.setCCUENTAG(solicitudOutPut.getByTag("DFH-CCUENTA-G").trim());
			solicitud.setSDESGRAVAMEN(solicitudOutPut.getByTag("DFH-SDESGRAVAMEN").trim());
			solicitud.setSCUOTAP(solicitudOutPut.getByTag("DFH-SCUOTAP").trim());
			solicitud.setNCUOTAS(solicitudOutPut.getByTag("DFH-NCUOTAS").trim());

			// solicitud.setCMONEDA(solicitudOutPut.getByTag("DFH-CMONEDA").trim());
			String ind = solicitudOutPut.getByTag("DFH-CMONEDA");
			int ind1 = ind.length();

			if (ind1 < 4) {
				solicitud.setCMONEDA(ind);
			} else {

				solicitud.setCMONEDA(ind.substring(0, 4));

				solicitud.setINDICADOR(ind.substring(ind1 - 1, ind1));

			}

			solicitud.setSCUOTA(solicitudOutPut.getByTag("DFH-SCUOTA").trim());
			solicitud.setNPRESTRENOV(solicitudOutPut.getByTag("DFH-NPREST-RENOV").trim());
			solicitud.setSDEUDA(solicitudOutPut.getByTag("DFH-SDEUDA").trim());
			solicitud.setSNETO(solicitudOutPut.getByTag("DFH-SNETO").trim());
			solicitud.setGESTOR(solicitudOutPut.getByTag("DFH-GESTOR").trim());
			solicitud.setSUPER(solicitudOutPut.getByTag("DFH-SUPER").trim());
			solicitud.setAGENCIA(solicitudOutPut.getByTag("DFH-AGENCIA").trim());
			solicitud.setCERROR(solicitudOutPut.getByTag("DFH-CERROR").trim());
			solicitud.setMSJ(solicitudOutPut.getByTag("DFH-MSJ").trim());
			solicitud.setMSGNO_HOST(solicitudOutPut.getByTag("msgnoHost").trim());
			solicitud.setMSJE_HOST(solicitudOutPut.getByTag("msjeHost").trim());
		}

		// ***************************************************SOLICITUD***************************************************
		// Formatear Número de Préstamo
		String numeroPrestamo = solicitud.getNPRESTAMO();

		if (numeroPrestamo.equals("")) {
			numeroPrestamo = " ";
		} else {
			numeroPrestamo = solicitud.getNPRESTAMO();
		}

		String numeroPrestamoRenov = solicitud.getNPRESTRENOV();

		if (numeroPrestamoRenov.equals("")) {
			numeroPrestamoRenov = " ";
		} else {
			numeroPrestamoRenov = solicitud.getNPRESTRENOV();
		}

		// Formatear Tipo de Préstamo
		String tipoPrestamo = solicitud.getTPRESTAMO();

		if (tipoPrestamo.equals("")) {
			tipoPrestamo = " ";
		} else {
			tipoPrestamo = solicitud.getTPRESTAMO();
		}

		// Formatear Fecha de Solicitud
		String fechaSolicitudPrestamo = solicitud.getFSOLICITUD();

		if (fechaSolicitudPrestamo.equals("")) {
			fechaSolicitudPrestamo = " ";
		} else {

			fechaSolicitudPrestamo = solicitud.getFSOLICITUD();
		}
		// System.out.println("FECHA SOLICITUD DE PRÉSTAMO: "+fechaSolicitudPrestamo);

		// Formatear Modalidad de Préstamo
		String modalidadPrestamo = solicitud.getMODALIDAD();

		if (modalidadPrestamo.equals("")) {
			modalidadPrestamo = " ";
		} else {
			modalidadPrestamo = solicitud.getMODALIDAD();
		}

		// Formatear Nombre del Cliente
		String aCliente1 = solicitud.getACLIENTE();

		if (aCliente1.equals("")) {
			aCliente1 = " ";
		} else {
			aCliente1 = Funciones.validar_texto_reves(solicitud.getACLIENTE());
		}

		// Formatear DNI de Cliente
		String dniCliente1 = solicitud.getDOCUMENTO();

		if (dniCliente1.equals("")) {
			dniCliente1 = " ";
		} else {
			dniCliente1 = solicitud.getDOCUMENTO();
		}

		// Formatear Fecha de Nacimiento de Cliente
		String fechNacCliente = solicitud.getFNAC();

		if (fechNacCliente.equals("")) {
			fechNacCliente = " ";
		} else {
			fechNacCliente = (solicitud.getFNAC()).replace("/", "-");
		}

		// Formatear Estado Civil de Cliente
		String eCivilCliente = solicitud.getECIVIL();
		int longitudECivilCliente = (solicitud.getECIVIL()).length();

		if (eCivilCliente.equals("")) {
			eCivilCliente = " ";
		} else {
			eCivilCliente = (solicitud.getECIVIL()).substring(2, longitudECivilCliente);
		}

		// Formatear Sexo de Cliente
		String sexoCliente = solicitud.getSEXO();

		if (sexoCliente.equals("")) {
			sexoCliente = " ";
		} else {
			sexoCliente = solicitud.getSEXO();
		}

		// Formatear Teléfono de Cliente
		String telefonoCliente1 = solicitud.getTELEFONO();

		if (telefonoCliente1.equals("") || telefonoCliente1.equals("0000000000")
				|| telefonoCliente1.equals("0000000")) {

			telefonoCliente1 = " ";
		} else {
			telefonoCliente1 = solicitud.getTELEFONO();
		}

		// Formatear Celular de Cliente
		String celularCliente1 = solicitud.getCELULAR();

		if (celularCliente1.equals("") || celularCliente1.equalsIgnoreCase("0000000000")) {
			celularCliente1 = " ";
		} else {
			celularCliente1 = solicitud.getCELULAR();
		}

		// Formatear Dirección de Cliente
		String direccCliente = solicitud.getDCLIENTE();

		if (direccCliente.equals("")) {
			direccCliente = " ";
		} else {
			direccCliente = Funciones.validar_texto_reves(solicitud.getDCLIENTE());
		}

		// Formatear Distrito de Cliente
		String distritoCliente = solicitud.getDISTRITO();

		if (distritoCliente.equals("")) {
			distritoCliente = " ";
		} else {
			distritoCliente = Funciones.validar_texto_reves(solicitud.getDISTRITO());
		}

		// Formatear Provincia de Cliente
		String provinciaCliente = solicitud.getPROVINCIA();

		if (provinciaCliente.equals("")) {
			provinciaCliente = " ";
		} else {
			provinciaCliente = Funciones.validar_texto_reves(solicitud.getPROVINCIA());
		}

		// Formatear Departamento de Cliente
		String dptoCliente = solicitud.getDPTO();

		if (dptoCliente.equals("")) {
			dptoCliente = " ";
		} else {
			dptoCliente = Funciones.validar_texto_reves(solicitud.getDPTO());
		}

		// Formatear Referencia de Cliente
		String referenciaCliente = solicitud.getREFERENCIA();

		if (referenciaCliente.equals("")) {
			referenciaCliente = " ";
		} else {
			referenciaCliente = Funciones.validar_texto_reves(solicitud.getREFERENCIA());
		}

		// Formatear Correo de Cliente
		String correoCliente = solicitud.getCORREO();

		if (correoCliente.equals("")) {
			correoCliente = "";
		} else {
			correoCliente = Funciones.validar_texto_reves(solicitud.getCORREO());
		}
		// System.out.println("CORREO CLIENTE: "+correoCliente);

		// Formatear Correspondencia de Cliente
		String correspondenciaCliente = solicitud.getCORRESPONDENCIA();

		if (correspondenciaCliente.equals("")) {
			correspondenciaCliente = " ";
		} else {
			correspondenciaCliente = solicitud.getCORRESPONDENCIA();
		}

		// Formatear Condición Laboral de Cliente
		String cLaboralCliente = solicitud.getCLABORAL();

		if (cLaboralCliente.equals("")) {
			cLaboralCliente = " ";
		} else {
			cLaboralCliente = Funciones.validar_texto_reves(solicitud.getCLABORAL());
		}

		// Formatear Entidad de Cliente
		String entidadCliente = solicitud.getENTIDAD();

		if (entidadCliente.equals("")) {
			entidadCliente = " ";
		} else {
			entidadCliente = Funciones.validar_texto_reves(solicitud.getENTIDAD());
		}

		// Formatear Teléfono Laboral de Cliente
		String telefonoLaboralCliente = solicitud.getTLABORAL();

		if (telefonoLaboralCliente.equals("")) {
			telefonoLaboralCliente = " ";
		} else {
			telefonoLaboralCliente = solicitud.getTLABORAL();
		}

		// Formatear Fecha de Ingreso de Cliente
		String fechaIngresoCliente = solicitud.getFINGRESO();

		if ((fechaIngresoCliente.equals("")) || (fechaIngresoCliente.equals("/ /"))) {
			fechaIngresoCliente = " ";
		} else {
			fechaIngresoCliente = solicitud.getFINGRESO();
		}

		// Formatear Monto de Ingresos de Cliente
		String montoIngresosCliente = solicitud.getSINGRESOS();

		if (montoIngresosCliente.equals("")) {
			montoIngresosCliente = " ";
		} else {
			montoIngresosCliente = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSINGRESOS(), 2));

		}

		// Formatear Nombre del Garante
		String aGarante1 = solicitud.getACLIENTEG().trim();

		if (aGarante1.equals("")) {
			aGarante1 = "";
		} else {
			aGarante1 = Funciones.validar_texto_reves(solicitud.getACLIENTEG());
		}
		// System.out.println("NOMBRE GARANTE: "+aGarante);
		// Formatear DNI de Garante
		String dniGarante1 = solicitud.getDOCUMENTOG();

		if (dniGarante1.equals("")) {
			dniGarante1 = " ";
		} else {
			dniGarante1 = (solicitud.getDOCUMENTOG()).replace("-", " ");
		}

		// Formatear Fecha de Nacimiento de Garante
		String fechNacGarante = solicitud.getFNACG();

		if (fechNacGarante.equals("")) {
			fechNacGarante = " ";
		} else {
			fechNacGarante = solicitud.getFNACG();
		}

		// Formatear Estado Civil de Garante
		String eCivilGarante = solicitud.getECIVILG();
		int longitudECivilGarante = (solicitud.getECIVILG()).length();

		if (eCivilGarante.equals("")) {
			eCivilGarante = " ";
		} else {
			eCivilGarante = (solicitud.getECIVILG()).substring(2, longitudECivilGarante);
		}

		// Formatear Sexo de Garante
		String sexoGarante = solicitud.getSEXOG();

		if (sexoGarante.equals("")) {
			sexoGarante = " ";
		} else {
			sexoGarante = solicitud.getSEXOG();
		}

		// Formatear Teléfono de Garante
		String telefonoGarante = solicitud.getTELEFONOG();

		if (telefonoGarante.equals("")) {
			telefonoGarante = " ";
		} else {
			telefonoGarante = solicitud.getTELEFONOG();
		}

		// Formatear Celular de Garante
		String celularGarante = solicitud.getCELULARG();

		if (celularGarante.equals("")) {
			celularGarante = " ";
		} else {
			celularGarante = solicitud.getCELULARG();
		}

		// Formatear Dirección de Garante
		String direccGarante = solicitud.getDCLIENTEG();

		if (direccGarante.equals("")) {
			direccGarante = " ";
		} else {
			direccGarante = Funciones.validar_texto_reves(solicitud.getDCLIENTEG());
		}

		// Formatear Distrito de Garante
		String distritoGarante = solicitud.getDISTRITOG();

		if (distritoGarante.equals("")) {
			distritoGarante = " ";
		} else {
			distritoGarante = Funciones.validar_texto_reves(solicitud.getDISTRITOG());
		}

		// Formatear Provincia de Garante
		String provinciaGarante = solicitud.getPROVINCIAG();

		if (provinciaGarante.equals("")) {
			provinciaGarante = " ";
		} else {
			provinciaGarante = Funciones.validar_texto_reves(solicitud.getPROVINCIAG());
		}

		// Formatear Departamento de Garante
		String dptoGarante = solicitud.getDPTOG();

		if (dptoGarante.equals("")) {
			dptoGarante = " ";
		} else {
			dptoGarante = Funciones.validar_texto_reves(solicitud.getDPTOG());
		}

		// Formatear Referencia de Garante
		String referenciaGarante = solicitud.getREFERENCIAG();

		if (referenciaGarante.equals("")) {
			referenciaGarante = " ";
		} else {
			referenciaGarante = Funciones.validar_texto_reves(solicitud.getREFERENCIAG());
		}

		// Formatear Correo de Garante
		String correoGarante = solicitud.getCORREOG();

		if (correoGarante.equals("")) {
			correoGarante = "";
		} else {
			correoGarante = Funciones.validar_texto_reves(solicitud.getCORREOG());
		}

		// Formatear Correspondencia de Garante
		String correspondenciaGarante = solicitud.getCORRESPONDENCIAG();

		if (correspondenciaGarante.equals("")) {
			correspondenciaGarante = " ";
		} else {
			correspondenciaGarante = solicitud.getCORRESPONDENCIAG();
		}

		// Formatear Condición Laboral de Garante
		String cLaboralGarante = solicitud.getCLABORALG();

		if (cLaboralGarante.equals("")) {
			cLaboralGarante = " ";
		} else {
			cLaboralGarante = Funciones.validar_texto_reves(solicitud.getCLABORALG());
		}

		// Formatear Entidad de Garante
		String entidadGarante = solicitud.getENTIDADG();

		if (entidadGarante.equals("")) {
			entidadGarante = " ";
		} else {
			entidadGarante = Funciones.validar_texto_reves(solicitud.getENTIDADG());
		}

		// Formatear Teléfono Laboral de Garante
		String telefonoLaboralGarante = solicitud.getTLABORALG();

		if (telefonoLaboralGarante.equals("")) {
			telefonoLaboralGarante = " ";
		} else {
			telefonoLaboralGarante = solicitud.getTLABORALG();
		}

		// Formatear Fecha de Ingreso de Garante
		String fechaIngresoGarante = solicitud.getFINGRESOG();

		if (fechaIngresoGarante.equals("")) {
			fechaIngresoGarante = " ";
		} else {
			fechaIngresoGarante = solicitud.getFINGRESOG();
		}

		// Formatear Monto de Ingresos de Garante
		String montoIngresosGarante = solicitud.getSINGRESOSG();

		if ((montoIngresosGarante.equals("")) || (aGarante.equals(""))) {
			montoIngresosGarante = " ";
		} else {
			montoIngresosGarante = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSINGRESOSG(), 2));

		}

		// Formatear Monto Solicitado de Préstamo
		String montoSolicitadoPrestamo = solicitud.getSSOLICITADO();

		if (montoSolicitadoPrestamo.equals("")) {
			montoSolicitadoPrestamo = " ";
		} else {
			montoSolicitadoPrestamo = Funciones
					.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSSOLICITADO(), 2));
		}

		// Formatear Monto Abonado de Préstamo
		String montoAbonadoPrestamo = solicitud.getSABONADO();

		if (montoAbonadoPrestamo.equals("")) {
			montoAbonadoPrestamo = " ";
		} else {

			montoAbonadoPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSABONADO(), 2));

		}

		// Formatear Monto Solicitado de Préstamo
		String iCuotaProtegida = solicitud.getICUOTAP();

		if (iCuotaProtegida.equals("")) {
			iCuotaProtegida = " ";
		} else {
			if (iCuotaProtegida.equals("S")) {
				iCuotaProtegida = "Sí";
			}
			if (iCuotaProtegida.equals("N")) {
				iCuotaProtegida = "No";
			}
		}

		// Formatear I Cuota Protegida de Préstamo
		String iCuotaProtegidaPrestamo = solicitud.getICUOTAP();

		if (iCuotaProtegidaPrestamo.equals("")) {
			iCuotaProtegidaPrestamo = " ";
		} else {
			if (iCuotaProtegidaPrestamo.equals("S")) {
				iCuotaProtegidaPrestamo = "Sí";
			}
			if (iCuotaProtegidaPrestamo.equals("N")) {
				iCuotaProtegidaPrestamo = "No";
			}
		}

		// Formatear I Endoso de Préstamo
		String iEndosoPrestamo = solicitud.getIENDOSO();

		if (iEndosoPrestamo.equals("")) {
			iEndosoPrestamo = " ";
		} else {
			if (iEndosoPrestamo.equals("S")) {
				iEndosoPrestamo = "Sí";
			}
			if (iEndosoPrestamo.equals("N")) {
				iEndosoPrestamo = "No";
			}
		}

		// Formatear I Periodo de Gracia de Préstamo
		String iPeriodoGraciaPrestamo = solicitud.getIPGRACIA();

		if (iPeriodoGraciaPrestamo.equals("")) {
			iPeriodoGraciaPrestamo = " ";
		} else {
			if (iPeriodoGraciaPrestamo.equals("S")) {
				iPeriodoGraciaPrestamo = "Sí";
			}
			if (iPeriodoGraciaPrestamo.equals("N")) {
				iPeriodoGraciaPrestamo = "No";
			}
		}

		// Formatear Día de Vencimiento de Pago de Préstamo
		String diaVencimientoPagoPrestamo = solicitud.getDPAGO();

		if (diaVencimientoPagoPrestamo.equals("")) {
			diaVencimientoPagoPrestamo = " ";
		} else {
			diaVencimientoPagoPrestamo = solicitud.getDPAGO();
		}

		// Formatear Tasa de Préstamo
		String tasaPrestamo = solicitud.getTASA();

		if (tasaPrestamo.equals("")) {
			tasaPrestamo = " ";
		} else {
			tasaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getTASA(), 9));
		}

		// Formatear TCEA de Préstamo
		String tceaPrestamo = solicitud.getTCEA();

		if (tceaPrestamo.equals("")) {
			tceaPrestamo = " ";
		} else {
			tceaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getTCEA(), 2));
		}

		// Formatear Cuenta de Cliente
		String cuentaCliente = solicitud.getCCUENTA();

		if (cuentaCliente.equals("")) {
			cuentaCliente = " ";
		} else {
			cuentaCliente = solicitud.getCCUENTA();
		}

		// Formatear Cuenta de Garante
		String cuentaGarante = solicitud.getCCUENTAG();

		if (cuentaGarante.equals("")) {
			cuentaGarante = " ";
		} else {
			cuentaGarante = solicitud.getCCUENTAG();
		}

		// Formatear Seguro de Desgravamen de Préstamo
		String seguroDesgravamenPrestamo = solicitud.getSDESGRAVAMEN();

		if (seguroDesgravamenPrestamo.equals("")) {
			seguroDesgravamenPrestamo = " ";
		} else {

			// 000000000826000

			// seguroDesgravamenPrestamo =
			// ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(solicitud.getSDESGRAVAMEN(),6));
			int longDes = seguroDesgravamenPrestamo.length();

			// 000000013300000
			String decimal = seguroDesgravamenPrestamo.substring(longDes - 7);
			String deci = decimal.substring(0, 5);

			String entero = seguroDesgravamenPrestamo.substring(0, 8);

			// System.out.println("primer entero "+entero);

			if (entero.equalsIgnoreCase("0000000")) {
				entero = "0";
			} else {
				entero = Funciones.eliminarCerosAlaIzquierda(entero);
			}

			if (entero.equalsIgnoreCase("")) {
				entero = "0";
			}

			// System.out.println("decimal "+decimal);
			// System.out.println("entero "+entero);

			// System.out.println("TOTAL "+entero+"."+deci);
			String segDes = entero + "." + deci;

			seguroDesgravamenPrestamo = segDes;
		}

		// Formatear seguro de Cuota Protegida de Préstamo
		String seguroCuotaProtegidaPrestamo = solicitud.getSCUOTAP();

		if (seguroCuotaProtegidaPrestamo.equals("")) {
			seguroCuotaProtegidaPrestamo = " ";
		} else {
			seguroCuotaProtegidaPrestamo = Funciones
					.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSCUOTAP(), 2));
		}

		// Formatear Número de Cuotas de Préstamo
		String numeroCuotasPrestamo = solicitud.getNCUOTAS();

		if (numeroCuotasPrestamo.equals("")) {
			numeroCuotasPrestamo = " ";
		} else {
			numeroCuotasPrestamo = solicitud.getNCUOTAS();
		}

		// Formatear Tipo de Moneda de Préstamo
		String tipoMonedaPrestamo = solicitud.getCMONEDA();

		if (tipoMonedaPrestamo.equals("")) {
			tipoMonedaPrestamo = " ";
		} else {
			if (tipoMonedaPrestamo.equals("SOL")) {
				tipoMonedaPrestamo = "Soles";
			}
			;
		}

		// Formatear Monto de Cuotas de Préstamo
		String montoCuotasPrestamo = solicitud.getSCUOTA();

		if (montoCuotasPrestamo.equals("")) {
			montoCuotasPrestamo = " ";
		} else {
			montoCuotasPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSCUOTA(), 2));
		}

		// Formatear Número de Préstamo de Renovación
		String numeroPrestamoRenovacion = solicitud.getNPRESTAMO();

		if (numeroPrestamoRenovacion.equals("")) {
			numeroPrestamoRenovacion = " ";
		} else {
			numeroPrestamoRenovacion = solicitud.getNPRESTAMO();
		}

		// Formatear Saldo de Deuda de Préstamo
		String saldoDeudaPrestamo = solicitud.getSDEUDA();

		if (saldoDeudaPrestamo.equals("")) {
			saldoDeudaPrestamo = " ";
		} else {
			saldoDeudaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSDEUDA(), 2));
		}

		// Formatear Monto Neto de Deuda de Préstamo
		String montoDeudaPrestamo = solicitud.getSNETO();

		if (montoDeudaPrestamo.equals("")) {
			montoDeudaPrestamo = " ";
		} else {
			montoDeudaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSNETO(), 2));
		}

		// Formatear Gestor de Agencia
		String gestorAgencia = solicitud.getGESTOR();

		if (gestorAgencia.equals("")) {
			gestorAgencia = " ";
		} else {
			gestorAgencia = solicitud.getGESTOR();
		}

		// Formatear Supervisor de Agencia
		String supervisorPrestamo = solicitud.getSUPER();

		if (supervisorPrestamo.equals("")) {
			supervisorPrestamo = " ";
		} else {
			supervisorPrestamo = solicitud.getSUPER();
		}

		// Formatear Agencia
		String agencia = solicitud.getAGENCIA();

		if (agencia.equals("")) {
			agencia = " ";
		} else {
			agencia = solicitud.getAGENCIA();
		}
		// ****************************************************SOLICITUD***************************************************

		String secpoliza = poliza.getSec_poliza();
		String acliente = poliza.getAcliente();
		String finivigencia = poliza.getFini_vigencia();
		String ftervigencia = poliza.getFter_vigencia();
		String tipodoc = poliza.getTdoc() + "    " + poliza.getNdoc();
		String sexo = poliza.getSexo();
		String fenac = poliza.getFecha_nac();
		String nacionalidad = poliza.getNacionalidad();
		String estcivil = poliza.getEcivil();
		String telfijo = poliza.getTelefono();
		String telmovil = "";
		String ctrabajo = poliza.getClaboral();
		String direccion = poliza.getDireccion();
		String dis = "";
		String correo = "";
		String nprestamo = poliza.getCcuenta() + poliza.getCdsbolso();
		String oficina = poliza.getCagencia() + "   " + poliza.getClaboral();
		String codvendedor = poliza.getCusuario();
		String cuota = poliza.getNcuotas() + " Meses";

		String certificado = Funciones.eliminarCerosAlaIzquierda((hojaResumen.getPREFIJO_CP())) + "-"
				+ hojaResumen.getNPRESTAMO();

		// GENERACION DE PDF

		response.setContentType("application/pdf");
		response.addHeader("Content-Disposition",
				"attachment; filename=" + "Prestamo_Multired_" + nro_prestamo + ".pdf");
		// exporter = new JRPdfExporter();

		// -->> itext docpagare
		Document document = new Document();
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		PdfWriter copy = null;
		try {
			// pdfprestamo
			copy = PdfWriter.getInstance(document, baos);
			copy.setInitialLeading(5);
		} catch (DocumentException e) {

		}

		document.open();

		try {

			Calendar fecha = new GregorianCalendar();

			int ano111 = fecha.get(Calendar.YEAR);
			int mes111 = (fecha.get(Calendar.MONTH)) + 1;
			int dia111 = fecha.get(Calendar.DAY_OF_MONTH);

			String anoo22 = String.valueOf(ano111);
			String mess22 = String.valueOf(mes111);
			String diaa22 = String.valueOf(dia111);

			if (mess22.length() == 1) {
				mess22 = "0" + mess22;
			}
			if (diaa22.length() == 1) {
				diaa22 = "0" + diaa22;
			}
			String fechaEnv = diaa22 + "/" + mess22 + "/" + anoo22;

			int hora = fecha.get(Calendar.HOUR_OF_DAY);
			int min = fecha.get(Calendar.MINUTE);
			int seg = fecha.get(Calendar.SECOND);

			String horaEnv = hora + ":" + min + ":" + seg;

			Principal codUsu = request.getUserPrincipal();

			// usuario de seguridad
			String usuario = codUsu.getName();

			document.add(creaPDFGenera(nprestamo, usuario, fechaEnv, horaEnv));

			// PagareFIO
			System.out.println("PAGAREEE " + solicitud.getINDICADOR());
			if ((solicitud.getINDICADOR()).equalsIgnoreCase("0")) {
				System.out.println("PAGARE " + solicitud.getINDICADOR());
			} else {
				document.add(creaPDFPagare(aCliente1, dniCliente1, direccCliente, distritoCliente, provinciaCliente,
						dptoCliente, aGarante1, dniGarante1, direccGarante, distritoGarante, provinciaGarante,
						dptoGarante));

			}

			String tipo = solicitud.getIENDOSO();
			// 1 Solicitud de crédito

			document.add(creaPDFSolicitudPrestamo(numeroPrestamoRenov, nro_prestamo, tipoPrestamo,
					fechaSolicitudPrestamo, modalidadPrestamo, aCliente1, dniCliente1, fechNacCliente, eCivilCliente,
					sexoCliente, telefonoCliente1, celularCliente1, direccCliente, distritoCliente, provinciaCliente,
					dptoCliente, referenciaCliente, correoCliente, correspondenciaCliente, cLaboralCliente,
					entidadCliente, telefonoLaboralCliente, fechaIngresoCliente, montoIngresosCliente, aGarante1,
					dniGarante1, fechNacGarante, eCivilGarante, sexoGarante, telefonoGarante, celularGarante,
					direccGarante, distritoGarante, provinciaGarante, dptoGarante, referenciaGarante, correoGarante,
					correspondenciaGarante, cLaboralGarante, entidadGarante, telefonoLaboralGarante,
					fechaIngresoGarante, montoIngresosGarante, montoSolicitadoPrestamo, montoAbonadoPrestamo,
					iCuotaProtegidaPrestamo, iEndosoPrestamo, iPeriodoGraciaPrestamo, diaVencimientoPagoPrestamo,
					tasaPrestamo, tceaPrestamo, cuentaCliente, cuentaGarante, seguroDesgravamenPrestamo,
					seguroCuotaProtegidaPrestamo, numeroCuotasPrestamo, tipoMonedaPrestamo, montoCuotasPrestamo,
					numeroPrestamoRenovacion, saldoDeudaPrestamo, montoDeudaPrestamo, gestorAgencia, supervisorPrestamo,
					agencia, oficina, tipo));

			// 2 Cronograma

			// si queda comentado
			// document.add(creaPDFCronograma(telefonoCliente1,fechaDesembolso,aCliente,dniClienteCronograma,tlfCliente,dCliente,aGarante,dniGarante,deudaTotal,cronograma.getSPRESTAMO(),nPrestamoCronograma,tasa,tcea,seguroCP,dGarante,cronograma.getNCUOTAS(),cronograma.getFVCTO(),cronograma.getSAMORTIZACION(),cronograma.getSINTERES(),cronograma.getSDESGRAVAMEN(),cronograma.getSDCUOTA(),cronograma.getACUOTA()));

			// 3 Hoja de Resumen

			ConsultaImagen dao = null;
			BufferedImage image = null;
			byte[] imageByte = null;

			dao = new ConsultaImagen();
			String codFirma1 = Constante.FIRMA1;
			imageByte = dao.consultarFirma1(codFirma1);
			Image firm1 = Image.getInstance(imageByte);
			firm1 = Image.getInstance(firm1);
			firm1.scalePercent(50);

			dao = new ConsultaImagen();
			String codFirma2 = Constante.FIRMA2;
			imageByte = dao.consultarFirma2(codFirma2);
			Image firm2 = Image.getInstance(imageByte);
			firm2 = Image.getInstance(firm2);
			firm2.scalePercent(50);

			Image logoBN = Image
					.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
			logoBN = Image.getInstance(logoBN);
			logoBN.setAlignment(Image.NO_BORDER);
			logoBN.setAlignment(Image.RIGHT);
			logoBN.scalePercent(60f);
			document.add(logoBN);

			String tasaPoliza = solicitud.getSDESGRAVAMEN();

			document.add(creaPDFHojaResumen(hojaResumen, tasaPoliza, montoAbonadoPrestamo, saldoPrestamo, saldoInteres,
					saldoTasaIC, saldoTasaIM, sSeguroDesgravamen, nPolizaDesgravamen, sPrimaCP, sEmisionCP, nPolizaCP,
					sSeguroCP, sEndosoCP, sEnvioCP, siPagint, finivigencia, prefijoCP, noamortcap,
					cronograma.getSDESGRAVAMEN(), cronograma.getNCUOTAS(), seguroDesgravamenPrestamo,
					hojaResumen.getCIA_SEG_DESGV(), (solicitud.getCORRESPONDENCIA()).substring(2)));

			PdfPTable table = new PdfPTable(2);
			table.setWidthPercentage(100);
			table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

			table.addCell(firm1);
			table.addCell(firm2);
			document.add(table);

			/*
			 * PdfPTable lineaEs1 = new PdfPTable(2); lineaEs1.setWidthPercentage(100);
			 * lineaEs1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			 * table.getDefaultCell ().setHorizontalAlignment(Element.ALIGN_CENTER);
			 * lineaEs1.addCell("        "); lineaEs1.addCell("        ");
			 * document.add(lineaEs1);
			 * 
			 * PdfPTable lineaEs = new PdfPTable(2); lineaEs.setWidthPercentage(100);
			 * lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER); table.getDefaultCell
			 * ().setHorizontalAlignment(Element.ALIGN_CENTER); lineaEs.addCell("        ");
			 * lineaEs.addCell("        "); document.add(lineaEs);
			 * 
			 * // PdfPTable lineaEs1a = new PdfPTable(2); lineaEs1a.setWidthPercentage(100);
			 * lineaEs1a.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			 * table.getDefaultCell ().setHorizontalAlignment(Element.ALIGN_CENTER);
			 * lineaEs1a.addCell("        "); lineaEs1a.addCell("        ");
			 * document.add(lineaEs1a);
			 * 
			 * PdfPTable lineaEsb = new PdfPTable(2); lineaEsb.setWidthPercentage(100);
			 * lineaEsb.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			 * table.getDefaultCell ().setHorizontalAlignment(Element.ALIGN_CENTER);
			 * lineaEsb.addCell("        "); lineaEsb.addCell("        ");
			 * document.add(lineaEsb);
			 * 
			 * PdfPTable lineaEsc = new PdfPTable(2); lineaEsc.setWidthPercentage(100);
			 * lineaEsc.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			 * table.getDefaultCell ().setHorizontalAlignment(Element.ALIGN_CENTER);
			 * lineaEsc.addCell("        "); lineaEsc.addCell("        ");
			 * document.add(lineaEsc);
			 * 
			 * PdfPTable lineaEscd = new PdfPTable(2); lineaEscd.setWidthPercentage(100);
			 * lineaEscd.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			 * table.getDefaultCell ().setHorizontalAlignment(Element.ALIGN_CENTER);
			 * lineaEscd.addCell("        "); lineaEscd.addCell("        ");
			 * document.add(lineaEscd);
			 */
			PdfPTable linea = new PdfPTable(2);
			linea.setWidthPercentage(100);
			linea.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			linea.addCell("        _____________________________");
			linea.addCell("        _____________________________");
			document.add(linea);

			Paragraph firma = new Paragraph("FIRMA DEL BANCO");
			firma.getFont().setSize(10);

			PdfPTable banco = new PdfPTable(2);
			banco.setWidthPercentage(100);
			banco.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			banco.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			banco.addCell(firma);
			banco.addCell(firma);
			document.add(banco);

			dao = new ConsultaImagen();
			String codNombre1 = Constante.NOMBRE1;
			String nombre1 = dao.consultarNombre1(codNombre1);

			String codNombre2 = Constante.NOMBRE2;
			String nombre2 = dao.consultarNombre2(codNombre2);

			Paragraph nom1 = new Paragraph(nombre1);
			nom1.getFont().setSize(10);
			Paragraph nom2 = new Paragraph(nombre2);
			nom2.getFont().setSize(10);

			PdfPTable nombre = new PdfPTable(2);
			nombre.setWidthPercentage(100);
			nombre.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			nombre.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			nombre.addCell(nom1);
			nombre.addCell(nom2);
			document.add(nombre);

			PdfPTable espacio1 = new PdfPTable(1);
			espacio1.setWidthPercentage(100);
			espacio1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			espacio1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			PdfPCell cell3 = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
			cell3.setBorder(Rectangle.NO_BORDER);
			cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell3.setColspan(1);
			cell3.setPadding(0);
			espacio1.addCell(cell3);
			espacio1.addCell(cell3);
			document.add(espacio1);

			PdfPTable linea3 = new PdfPTable(1);
			linea3.setWidthPercentage(100);
			linea3.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			linea3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

			PdfPCell cell2 = new PdfPCell(
					new Phrase("F.OP-433-E-V05-GPIF", FontFactory.getFont(FontFactory.HELVETICA, 7)));
			cell2.setBorder(Rectangle.NO_BORDER);
			cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell2.setColspan(1);
			cell2.setPadding(0);

			linea3.addCell(cell2);
			document.add(linea3);

			PdfPTable piePagina = new PdfPTable(1);
			piePagina.setWidthPercentage(100);
			piePagina.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			piePagina.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			PdfPCell cell = new PdfPCell(new Phrase("Pág. 02 de 02", FontFactory.getFont(FontFactory.HELVETICA, 7)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell.setColspan(1);
			cell.setPadding(0);
			piePagina.addCell(cell);

			document.add(piePagina);
			document.add(codigo());

			// --------------------------------------------------PRE IMPRESO
			// INICIO RETORNO Y TRADICIONAL------------------------------
			String correspPoliza = correspondenciaCliente.substring(0, 1);

			if (correspPoliza.equalsIgnoreCase("N") || correspPoliza.equalsIgnoreCase("V")) {

				PdfPTable espacio = new PdfPTable(5);
				espacio.setTotalWidth(PageSize.A4.getWidth() - 70);

				espacio.setLockedWidth(true);

				// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f,
				// 0.20f};
				// table.setWidths(medidaCeldas);

				PdfPCell celdaepsacio;

				celdaepsacio = new PdfPCell(new Phrase(" "));
				celdaepsacio.setBorder(Rectangle.NO_BORDER);
				celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
				celdaepsacio.setColspan(5);
				espacio.addCell(celdaepsacio);

				celdaepsacio = new PdfPCell(new Phrase(" "));
				celdaepsacio.setBorder(Rectangle.NO_BORDER);
				celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
				celdaepsacio.setColspan(5);
				espacio.addCell(celdaepsacio);

				celdaepsacio = new PdfPCell(new Phrase(" "));
				celdaepsacio.setBorder(Rectangle.NO_BORDER);
				celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
				celdaepsacio.setColspan(5);
				espacio.addCell(celdaepsacio);

				celdaepsacio = new PdfPCell(new Phrase(" "));
				celdaepsacio.setBorder(Rectangle.NO_BORDER);
				celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
				celdaepsacio.setColspan(5);
				espacio.addCell(celdaepsacio);

				celdaepsacio = new PdfPCell(new Phrase(" "));
				celdaepsacio.setBorder(Rectangle.NO_BORDER);
				celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
				celdaepsacio.setColspan(5);
				espacio.addCell(celdaepsacio);

				celdaepsacio = new PdfPCell(new Phrase(" "));
				celdaepsacio.setBorder(Rectangle.NO_BORDER);
				celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
				celdaepsacio.setColspan(5);
				espacio.addCell(celdaepsacio);

				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(6);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					// String key = g.getKey();
					PdfReader reader2 = new PdfReader(pdf);
					// int numeroPagina = reader2.getNumberOfPages();

					for (int pageNum = 1; pageNum <= 2; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
						if (pageNum == 1) {

							document.add(espacio);
							document.add(creaPDFPolizaUnoPre(agencia, telefonoCliente1, secpoliza, acliente,
									finivigencia, tipodoc, sexo, fenac, nacionalidad, correoCliente, estcivil, telfijo,
									celularCliente1, ctrabajo, direccion, distritoCliente, provinciaCliente,
									dptoCliente, nprestamo, oficina, codvendedor));

						}
					}
					document.newPage();

				}

				/*
				 * ConsultaImagen daoSolicitud1_1 = null; byte[] imageByteSolicitud1_1 = null;
				 * 
				 * daoSolicitud1_1 = new ConsultaImagen(); String polizaParte1_1 = "0006";
				 * imageByteSolicitud1_1 =daoSolicitud1_1.consultarPolizaParte2(polizaParte1_1);
				 * Image solicitud1_1 =
				 * Image.getInstance(Util.reducirCalidadImagen(imageByteSolicitud1_1 ));
				 * 
				 * 
				 * 
				 * solicitud1_1.setBorder(Image.BOX); solicitud1_1.setBorderWidth(5);
				 * solicitud1_1.setBorderColor(BaseColor.WHITE); solicitud1_1.scaleToFit(550,
				 * 200);
				 * 
				 * document.add(solicitud1_1);
				 * 
				 * //poliza
				 * 
				 * document.add(creaPDFPolizaUnoPre(agencia,telefonoCliente1,
				 * secpoliza,acliente, finivigencia, tipodoc, sexo, fenac, nacionalidad,
				 * correoCliente, estcivil, telfijo, celularCliente1, ctrabajo, direccion,
				 * distritoCliente, provinciaCliente, dptoCliente, nprestamo, oficina,
				 * codvendedor));
				 * 
				 * 
				 * 
				 * ConsultaImagen daoSolicitud1_2 = null; byte[] imageByteSolicitud1_2 = null;
				 * 
				 * daoSolicitud1_2 = new ConsultaImagen(); String solicituParte1_1 = "0007";
				 * imageByteSolicitud1_2
				 * =daoSolicitud1_2.consultarPolizaParte1(solicituParte1_1); Image solicitud1_2
				 * = Image.getInstance(Util.reducirCalidadImagen (imageByteSolicitud1_2));
				 * 
				 * solicitud1_2.setBorder(Image.BOX); solicitud1_2.setBorderWidth(5);
				 * solicitud1_2.setBorderColor(BaseColor.WHITE); solicitud1_2.scaleToFit(550,
				 * 300);
				 * 
				 * document.add(solicitud1_2);
				 * 
				 * 
				 * ConsultaImagen daoSolicitud8 = null; byte[] imageByteSolicitud8 = null;
				 * 
				 * daoSolicitud8 = new ConsultaImagen(); String solicituParte3 = "0008";
				 * imageByteSolicitud8 =daoSolicitud8.consultarPolizaParte2(solicituParte3);
				 * 
				 * Image Solicitud8 = Image.getInstance(Util.reducirCalidadImagen
				 * (imageByteSolicitud8));
				 * 
				 * 
				 * Solicitud8.setBorder(Image.BOX); Solicitud8.setBorderWidth(5);
				 * Solicitud8.setBorderColor(BaseColor.WHITE); Solicitud8.scaleToFit(550, 880);
				 * 
				 * document.add(Solicitud8);
				 */
				celdaepsacio = new PdfPCell(new Phrase(" "));
				celdaepsacio.setBorder(Rectangle.NO_BORDER);
				celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
				celdaepsacio.setColspan(5);
				espacio.addCell(celdaepsacio);
				celdaepsacio = new PdfPCell(new Phrase(" "));
				celdaepsacio.setBorder(Rectangle.NO_BORDER);
				celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
				celdaepsacio.setColspan(5);
				espacio.addCell(celdaepsacio);
				celdaepsacio = new PdfPCell(new Phrase(" "));
				celdaepsacio.setBorder(Rectangle.NO_BORDER);
				celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
				celdaepsacio.setColspan(5);
				espacio.addCell(celdaepsacio);
				Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(7);
				for (Entry<String, InputStream> g : resultado2.entrySet()) {
					InputStream pdf = g.getValue();
					// String key = g.getKey();
					PdfReader reader2 = new PdfReader(pdf);
					// int numeroPagina = reader2.getNumberOfPages();

					for (int pageNum = 1; pageNum <= 2; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
						if (pageNum == 1) {
							document.add(espacio);
							document.add(creaPDFPolizaDosPre(secpoliza, cuota, finivigencia, ftervigencia, nprestamo,
									acliente, tipodoc, correoCliente, direccion));

						}
					}
					document.newPage();

				}

				/*
				 * ConsultaImagen daoPoliza001_1 = null; byte[] imageBytePoliza001_1 = null;
				 * 
				 * daoPoliza001_1 = new ConsultaImagen(); String poliza001_1 = "0011";
				 * imageBytePoliza001_1 =daoPoliza001_1.consultarPolizaParte2(poliza001_1);
				 * Image poli001_1 =
				 * Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza001_1 ));
				 * 
				 * poli001_1.setBorder(Image.BOX); poli001_1.setBorderWidth(5);
				 * poli001_1.setBorderColor(BaseColor.WHITE); poli001_1.scaleToFit(550, 200);
				 * 
				 * document.add(poli001_1);
				 * 
				 * document.add(creaPDFPolizaDosPre(secpoliza,cuota,finivigencia,
				 * ftervigencia,nprestamo, acliente, tipodoc,correoCliente,direccion));
				 * 
				 * ConsultaImagen daoPoliza001_2 = null; byte[] imageBytePoliza001_2 = null;
				 * 
				 * daoPoliza001_2 = new ConsultaImagen(); String poliza001_2 = "0012";
				 * imageBytePoliza001_2 =daoPoliza001_2.consultarPolizaParte2(poliza001_2);
				 * Image poliza01_2 =
				 * Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza001_2 ));
				 * 
				 * poliza01_2.setBorder(Image.BOX); poliza01_2.setBorderWidth(5);
				 * poliza01_2.setBorderColor(BaseColor.WHITE); poliza01_2.scaleToFit(550, 500);
				 * 
				 * document.add(poliza01_2);
				 * 
				 * ConsultaImagen daoPoliza002 = null; byte[] imageBytePoliza002= null;
				 * 
				 * daoPoliza002 = new ConsultaImagen(); String poliza002 = "0013";
				 * imageBytePoliza002 =daoPoliza002.consultarPolizaParte2(poliza002); Image
				 * poliza02= Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza002 ));
				 * 
				 * poliza02.setBorder(Image.BOX); poliza02.setBorderWidth(5);
				 * poliza02.setBorderColor(BaseColor.WHITE); poliza02.scaleToFit(550, 800);
				 * 
				 * document.add(poliza02);
				 */

			} else {

				if (correspPoliza.equalsIgnoreCase("S") || correspPoliza.equalsIgnoreCase("T")) {

					PdfPTable espacio = new PdfPTable(5);
					espacio.setTotalWidth(PageSize.A4.getWidth() - 70);

					espacio.setLockedWidth(true);

					// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f,
					// 0.15f, 0.20f};
					// table.setWidths(medidaCeldas);

					PdfPCell celdaepsacio;

					celdaepsacio = new PdfPCell(new Phrase(" "));
					celdaepsacio.setBorder(Rectangle.NO_BORDER);
					celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
					celdaepsacio.setColspan(5);
					espacio.addCell(celdaepsacio);

					celdaepsacio = new PdfPCell(new Phrase(" "));
					celdaepsacio.setBorder(Rectangle.NO_BORDER);
					celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
					celdaepsacio.setColspan(5);
					espacio.addCell(celdaepsacio);

					celdaepsacio = new PdfPCell(new Phrase(" "));
					celdaepsacio.setBorder(Rectangle.NO_BORDER);
					celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
					celdaepsacio.setColspan(5);
					espacio.addCell(celdaepsacio);

					celdaepsacio = new PdfPCell(new Phrase(" "));
					celdaepsacio.setBorder(Rectangle.NO_BORDER);
					celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
					celdaepsacio.setColspan(5);
					espacio.addCell(celdaepsacio);

					celdaepsacio = new PdfPCell(new Phrase(" "));
					celdaepsacio.setBorder(Rectangle.NO_BORDER);
					celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
					celdaepsacio.setColspan(5);
					espacio.addCell(celdaepsacio);

					celdaepsacio = new PdfPCell(new Phrase(" "));
					celdaepsacio.setBorder(Rectangle.NO_BORDER);
					celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
					celdaepsacio.setColspan(5);
					espacio.addCell(celdaepsacio);

					Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(5);
					for (Entry<String, InputStream> g : resultado.entrySet()) {
						InputStream pdf = g.getValue();
						// String key = g.getKey();
						PdfReader reader2 = new PdfReader(pdf);
						// int numeroPagina = reader2.getNumberOfPages();

						for (int pageNum = 1; pageNum <= 2; pageNum++) {
							document.newPage();
							PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
							copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																				// la
																				// página
																				// importada
							if (pageNum == 1) {

								document.add(espacio);
								document.add(creaPDFPolizaUnoAdulto(telefonoCliente1, secpoliza, acliente, finivigencia,
										tipodoc, sexo, fenac, nacionalidad, correoCliente, estcivil, telfijo,
										celularCliente1, ctrabajo, direccion, distritoCliente, provinciaCliente,
										dptoCliente, nprestamo, agencia, codvendedor));

							}
						}
						document.newPage();

					}

					Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(4);
					for (Entry<String, InputStream> g : resultado2.entrySet()) {
						InputStream pdf = g.getValue();
						// String key = g.getKey();
						PdfReader reader2 = new PdfReader(pdf);
						// int numeroPagina = reader2.getNumberOfPages();

						for (int pageNum = 1; pageNum <= 2; pageNum++) {
							document.newPage();
							PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
							copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																				// la
																				// página
																				// importada
							if (pageNum == 1) {
								document.add(espacio);
								document.add(creaPDFPolizaDosAdultoOtro(secpoliza, cuota, finivigencia, ftervigencia,
										nprestamo, acliente, tipodoc, correoCliente, direccion));

							}
						}
						document.newPage();

					}

					/*
					 * ConsultaImagen daoPoliza1_1 = null; byte[] imageBytePoliza1_1 = null;
					 * 
					 * daoPoliza1_1 = new ConsultaImagen(); String solicituParte1_1 = "0022";
					 * imageBytePoliza1_1 =daoPoliza1_1.consultarPolizaParte1(solicituParte1_1);
					 * Image polizaParte1 = Image.getInstance(Util.reducirCalidadImagen
					 * (imageBytePoliza1_1));
					 * 
					 * polizaParte1.setBorder(Image.BOX); polizaParte1.setBorderWidth(5);
					 * polizaParte1.setBorderColor(BaseColor.WHITE); polizaParte1.scaleToFit(550,
					 * 300);
					 * 
					 * 
					 * 
					 * document.add(imagePoliza1(polizaParte1));
					 * 
					 * 
					 * 
					 * 
					 * document.add(creaPDFPolizaUnoAdulto(telefonoCliente1, secpoliza,acliente,
					 * finivigencia, tipodoc, sexo, fenac, nacionalidad, correoCliente, estcivil,
					 * telfijo, celularCliente1, ctrabajo, direccion, distritoCliente,
					 * provinciaCliente, dptoCliente, nprestamo, agencia, codvendedor));
					 * 
					 * 
					 * 
					 * 
					 * ConsultaImagen daoPoliza1_2 = null; byte[] imageBytePoliza1_2 = null;
					 * 
					 * daoPoliza1_2 = new ConsultaImagen(); String solicituParte1_2 = "0023";
					 * imageBytePoliza1_2 =daoPoliza1_2.consultarPolizaParte2(solicituParte1_2);
					 * Image polizaParte1_2 = Image.getInstance(Util.reducirCalidadImagen
					 * (imageBytePoliza1_2));
					 * 
					 * polizaParte1_2.setBorder(Image.BOX); polizaParte1_2.setBorderWidth(5);
					 * polizaParte1_2.setBorderColor(BaseColor.WHITE);
					 * polizaParte1_2.scaleToFit(550, 300);
					 * 
					 * document.add(imagePoliza1_2(polizaParte1_2));
					 * 
					 * ConsultaImagen daoPoliza2 = null; byte[] imageBytePoliza2 = null;
					 * 
					 * daoPoliza2 = new ConsultaImagen(); String solicituParte2 = "0024";
					 * imageBytePoliza2 =daoPoliza2.consultarPolizaParte2(solicituParte2); Image
					 * polizaParte2 = Image.getInstance(Util.reducirCalidadImagen
					 * (imageBytePoliza2));
					 * 
					 * polizaParte2.setBorder(Image.BOX); polizaParte2.setBorderWidth(5);
					 * polizaParte2.setBorderColor(BaseColor.WHITE); polizaParte2.scaleToFit(550,
					 * 880);
					 * 
					 * document.add(polizaParte2);
					 */

					/*
					 * ConsultaImagen daoPolizaInd1_1 = null; byte[] imageBytePolizaInd1_1 = null;
					 * 
					 * daoPolizaInd1_1 = new ConsultaImagen(); String polizaParte1_1 = "0027";
					 * imageBytePolizaInd1_1 =daoPolizaInd1_1.consultarPolizaParte2(polizaParte1_1);
					 * Image polizaInd1_1 = Image.getInstance(Util.reducirCalidadImagen
					 * (imageBytePolizaInd1_1));
					 * 
					 * polizaInd1_1.setBorder(Image.BOX); polizaInd1_1.setBorderWidth(5);
					 * polizaInd1_1.setBorderColor(BaseColor.WHITE); polizaInd1_1.scaleToFit(550,
					 * 200);
					 * 
					 * document.add(polizaInd1_1);
					 * 
					 * 
					 * 
					 * document.add(creaPDFPolizaDosAdultoOtro(secpoliza,cuota,
					 * finivigencia,ftervigencia,nprestamo, acliente,
					 * tipodoc,correoCliente,direccion));
					 * 
					 * 
					 * ConsultaImagen daoPolizaInd1_2 = null; byte[] imageBytePolizaInd1_2 = null;
					 * 
					 * daoPolizaInd1_2 = new ConsultaImagen(); String polizaInd1_2 = "0028";
					 * imageBytePolizaInd1_2 =daoPolizaInd1_2.consultarPolizaParte2(polizaInd1_2);
					 * Image polizaIndi1_2 = Image.getInstance(Util.reducirCalidadImagen
					 * (imageBytePolizaInd1_2));
					 * 
					 * polizaIndi1_2.setBorder(Image.BOX); polizaIndi1_2.setBorderWidth(5);
					 * polizaIndi1_2.setBorderColor(BaseColor.WHITE); polizaIndi1_2.scaleToFit(550,
					 * 500);
					 * 
					 * document.add(polizaIndi1_2);
					 * 
					 * ConsultaImagen daoPolizaInd2 = null; byte[] imageBytePolizaInd2= null;
					 * 
					 * daoPolizaInd2 = new ConsultaImagen(); String polizaInd2 = "0029";
					 * imageBytePolizaInd2 =daoPolizaInd2.consultarPolizaParte2(polizaInd2); Image
					 * polizaIndi2= Image.getInstance(Util.reducirCalidadImagen(
					 * imageBytePolizaInd2));
					 * 
					 * polizaIndi2.setBorder(Image.BOX); polizaIndi2.setBorderWidth(5);
					 * polizaIndi2.setBorderColor(BaseColor.WHITE); polizaIndi2.scaleToFit(550,
					 * 800);
					 * 
					 * document.add(polizaIndi2);
					 */

				}

			}

			// -------------------------------------------POSITIVO SEGURO
			// CERTIFICADO----------------------------------------------------------------------------------------------------------------

			Image logoPositiva = Image
					.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/positiva.jpg"));
			logoPositiva = Image.getInstance(logoPositiva);
			logoPositiva.scalePercent(50);

			if (prima.equalsIgnoreCase("0.00")) {

				// pre impreso
				document.add(creaPDFCartaInstruccion(fechaSolicitudPrestamo, cLaboralCliente, entidadCliente, aCliente1,
						dniCliente1, aGarante1, dniGarante1));

				System.out.println("PRIMA CERO DOC3 CLAUSULA-EXPORTPREST");
				Image logoBN2 = Image
						.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
				logoBN2 = Image.getInstance(logoBN2);
				logoBN2.setAlignment(Image.NO_BORDER);
				logoBN2.setAlignment(Image.LEFT);
				logoBN2.scalePercent(60f);
				Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(0);
				for (Entry<String, InputStream> g : resultado2.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
					}
					document.newPage();

				}
				String agen = (solicitud.getAGENCIA()).substring(0, 4);
				// pre impreso
				String parametro = "1";
				document.add(Testeopdf.clausulasGPageFinal2(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						parametro, aGarante1, dniGarante1));

				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(1);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
					}
					document.newPage();

				}
				document.add(Testeopdf.clausulasGPageFinal3(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						aGarante1, dniGarante1, parametro));
				document.newPage();

				PdfPTable fechadoc = new PdfPTable(2);
				fechadoc.setWidthPercentage(100);
				fechadoc.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				fechadoc.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				fechadoc.addCell("  FECHA   ");

				document.add(fechadoc);

				document.add(creaPDFCronograma(aGarante1, direccGarante, tceaPrestamo, telefonoCliente1,
						fechaDesembolso, aCliente, dniClienteCronograma, tlfCliente, dCliente, aGarante, dniGarante,
						deudaTotal, cronograma.getSPRESTAMO(), nPrestamoCronograma, tasa, tcea, seguroCP,
						cronograma.getNCUOTAS(), cronograma.getFVCTO(), cronograma.getSAMORTIZACION(),
						cronograma.getSINTERES(), cronograma.getSDESGRAVAMEN(), cronograma.getSDCUOTA(),
						cronograma.getACUOTA()));

				dao = new ConsultaImagen();
				String codFirma12 = Constante.FIRMA1;
				imageByte = dao.consultarFirma1(codFirma12);
				Image firm12 = Image.getInstance(imageByte);
				firm12 = Image.getInstance(firm12);
				firm12.scalePercent(50);

				dao = new ConsultaImagen();
				String codFirma22 = Constante.FIRMA2;
				imageByte = dao.consultarFirma2(codFirma22);
				Image firm22 = Image.getInstance(imageByte);
				firm22 = Image.getInstance(firm22);
				firm22.scalePercent(50);

				PdfPTable table2 = new PdfPTable(2);
				table2.setWidthPercentage(100);
				table2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

				// table2.addCell(firm1);
				// table2.addCell(firm2);
				// document.add(table2);

				PdfPTable linea2Espa1 = new PdfPTable(2);
				linea2Espa1.setWidthPercentage(100);
				linea2Espa1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea2Espa1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea2Espa1.addCell("       ");
				linea2Espa1.addCell("        ");
				document.add(linea2Espa1);

				PdfPTable linea2Espa = new PdfPTable(2);
				linea2Espa.setWidthPercentage(100);
				linea2Espa.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea2Espa.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea2Espa.addCell("       ");
				linea2Espa.addCell("        ");
				document.add(linea2Espa);

				//

				PdfPTable linea2Espacd = new PdfPTable(2);
				linea2Espacd.setWidthPercentage(100);
				linea2Espacd.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea2Espacd.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea2Espacd.addCell("       ");
				linea2Espacd.addCell("        ");
				document.add(linea2Espacd);
				//

				PdfPTable linea2 = new PdfPTable(2);
				linea2.setWidthPercentage(100);
				linea2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea2.addCell("     __________________________");
				linea2.addCell("     __________________________");
				document.add(linea);

				Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
				firma2.getFont().setSize(10);

				PdfPTable banco2 = new PdfPTable(2);
				banco2.setWidthPercentage(100);
				banco2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				banco2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				banco2.addCell(firma2);
				banco2.addCell(firma2);
				document.add(banco2);

				dao = new ConsultaImagen();
				String codNombre12 = Constante.NOMBRE1;
				String nombre12 = dao.consultarNombre1(codNombre1);

				String codNombre22 = Constante.NOMBRE2;
				String nombre22 = dao.consultarNombre2(codNombre2);

				Paragraph nom12 = new Paragraph(nombre1);
				nom12.getFont().setSize(10);
				Paragraph nom22 = new Paragraph(nombre2);
				nom22.getFont().setSize(10);

				PdfPTable nombre222 = new PdfPTable(2);
				nombre222.setWidthPercentage(100);
				nombre222.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				nombre222.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				// nombre222.addCell(nom12);
				// nombre222.addCell(nom22);
				// document.add(nombre222);

				PdfPTable espacio12 = new PdfPTable(1);
				espacio12.setWidthPercentage(100);
				espacio12.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				espacio12.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
				espacio12.addCell("");
				document.add(espacio12);

			} else {
				// ---------------------------PRE IMPRESO --PRESTAMO CON SEGURO
				// DE CUOTA--------------

				document.add(creaPDFPolizaCertificadoSeguroCuotaPPre(certificado, logoPositiva, secpoliza, acliente,
						finivigencia, ftervigencia, tipodoc, sexo, fenac, nacionalidad, estcivil, telefonoCliente1,
						celularCliente1, ctrabajo, direccion, dis, correoCliente, nprestamo, oficina, codvendedor,
						montoSolicitadoPrestamo, numeroCuotasPrestamo, tasaPrestamo, tceaPrestamo, prima));
				/*
				 * 
				 * PdfPTable espacio12 = new PdfPTable(1); espacio12.setWidthPercentage(100);
				 * espacio12.getDefaultCell().setBorder(Rectangle.NO_BORDER); espacio12
				 * .getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT );
				 * espacio12.addCell(""); document.add(espacio12);
				 * 
				 * PdfPTable espacio13 = new PdfPTable(1); espacio13.setWidthPercentage(100);
				 * espacio13.getDefaultCell().setBorder(Rectangle.NO_BORDER); espacio13
				 * .getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT );
				 * espacio13.addCell(""); document.add(espacio13);
				 * 
				 * 
				 * PdfPTable linea33 = new PdfPTable(2); linea33.setWidthPercentage(100);
				 * linea33.getDefaultCell().setBorder(Rectangle.NO_BORDER); table
				 * .getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER );
				 * linea33.addCell("                                              " );
				 * linea33.addCell("                                              " );
				 * document.add(linea33);
				 * 
				 * 
				 * PdfPTable linea44 = new PdfPTable(2); linea44.setWidthPercentage(100);
				 * linea44.getDefaultCell().setBorder(Rectangle.NO_BORDER); table
				 * .getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER );
				 * linea44.addCell("                                              " );
				 * linea44.addCell("                                              " );
				 * document.add(linea44);
				 * 
				 * 
				 * 
				 * 
				 * document.add(creaPDFPolizaCertificadoSeguroCuotaP(certificado, logoPositiva,
				 * secpoliza, acliente, finivigencia, ftervigencia, tipodoc, sexo, fenac,
				 * nacionalidad, estcivil, telefonoCliente1, celularCliente1, ctrabajo,
				 * direccion , dis , correoCliente, nprestamo, oficina,codvendedor,
				 * montoSolicitadoPrestamo, numeroCuotasPrestamo, tasaPrestamo, tceaPrestamo ,
				 * prima));
				 * 
				 * Image firmaSolicitud = Image.getInstance(this.getClass().getClassLoader
				 * ().getResource("/assets/img/header/FirmaP2.jpg")); firmaSolicitud =
				 * Image.getInstance(firmaSolicitud);
				 * firmaSolicitud.setAlignment(Image.NO_BORDER);
				 * firmaSolicitud.setAlignment(Image.LEFT); firmaSolicitud.scalePercent(60f);
				 * document.add(firmaSolicitud);
				 * 
				 * document.add(creaPDFPolizaFirma22(certificado,logoPositiva, secpoliza,
				 * acliente, finivigencia, ftervigencia, tipodoc, sexo, fenac, nacionalidad,
				 * estcivil, telefonoCliente1, celularCliente1, ctrabajo, direccion , dis ,
				 * correoCliente, nprestamo, oficina,codvendedor, montoSolicitadoPrestamo,
				 * numeroCuotasPrestamo, tasaPrestamo, tceaPrestamo , prima));
				 */
				// document.add(creaPDFPolizaCondicionesGenerales());
				// pre impreso
				document.add(creaPDFCartaInstruccion(fechaSolicitudPrestamo, cLaboralCliente, entidadCliente, aCliente1,
						dniCliente1, aGarante1, dniGarante1));

				System.out.println("PRIMA CERO DOC3 CLAUSULA-EXPORTPREST");
				Image logoBN2 = Image
						.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
				logoBN2 = Image.getInstance(logoBN2);
				logoBN2.setAlignment(Image.NO_BORDER);
				logoBN2.setAlignment(Image.LEFT);
				logoBN2.scalePercent(60f);
				Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(0);
				for (Entry<String, InputStream> g : resultado2.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
					}
					document.newPage();

				}
				String agen = (solicitud.getAGENCIA()).substring(0, 4);
				String parametro = "1";
				document.add(Testeopdf.clausulasGPageFinal2(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						parametro, aGarante1, dniGarante1));

				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(1);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
					}
					document.newPage();

				}
				document.add(Testeopdf.clausulasGPageFinal3(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						aGarante1, dniGarante1, parametro));
				document.newPage();

				PdfPTable fechadoc = new PdfPTable(2);
				fechadoc.setWidthPercentage(100);
				fechadoc.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				fechadoc.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				fechadoc.addCell("  FECHA   ");

				document.add(fechadoc);

				document.add(creaPDFCronograma(aGarante1, direccGarante, tceaPrestamo, telefonoCliente1,
						fechaDesembolso, aCliente, dniClienteCronograma, tlfCliente, dCliente, aGarante, dniGarante,
						deudaTotal, cronograma.getSPRESTAMO(), nPrestamoCronograma, tasa, tcea, seguroCP,
						cronograma.getNCUOTAS(), cronograma.getFVCTO(), cronograma.getSAMORTIZACION(),
						cronograma.getSINTERES(), cronograma.getSDESGRAVAMEN(), cronograma.getSDCUOTA(),
						cronograma.getACUOTA()));

				PdfPTable table2 = new PdfPTable(2);
				table2.setWidthPercentage(100);
				table2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

				// table2.addCell(firm1);
				// table2.addCell(firm2);
				// document.add(table2);

				PdfPTable linea2Espacio1 = new PdfPTable(2);
				linea2Espacio1.setWidthPercentage(100);
				linea2Espacio1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea2Espacio1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea2Espacio1.addCell("       ");
				linea2Espacio1.addCell("       ");
				document.add(linea2Espacio1);

				PdfPTable linea2Espacio = new PdfPTable(2);
				linea2Espacio.setWidthPercentage(100);
				linea2Espacio.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea2Espacio.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea2Espacio.addCell("       ");
				linea2Espacio.addCell("       ");
				document.add(linea2Espacio);

				//
				PdfPTable linea2Espacio1a = new PdfPTable(2);
				linea2Espacio1a.setWidthPercentage(100);
				linea2Espacio1a.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea2Espacio1a.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea2Espacio1a.addCell("       ");
				linea2Espacio1a.addCell("       ");
				document.add(linea2Espacio1a);

				//

				PdfPTable linea2 = new PdfPTable(2);
				linea2.setWidthPercentage(100);
				linea2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea2.addCell("    _______________________");
				linea2.addCell("    _______________________");
				document.add(linea);

				Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
				firma2.getFont().setSize(10);

				PdfPTable banco2 = new PdfPTable(2);
				banco2.setWidthPercentage(100);
				banco2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				banco2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				banco2.addCell(firma2);
				banco2.addCell(firma2);
				document.add(banco2);

			}

		} catch (DocumentException e) {
			System.out.println("Erro doc " + e.getMessage());
		}
		document.close();
		response.setHeader("Expires", "0");
		response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
		response.setHeader("Pragma", "public");
		// setting the content type
		response.setContentType("application/pdf");
		// the contentlength
		response.setContentLength(baos.size());
		// write ByteArrayOutputStream to the ServletOutputStream
		ServletOutputStream outputStream = response.getOutputStream();
		baos.writeTo(outputStream);
		outputStream.flush();
		outputStream.close();
		System.out.println("Cancelacion");

	}

	// -----------------------------------------FIN DOCUMENTO PRE
	// IMPRESO-----------------------------------------------

	// metodo principal
	@RequestMapping(value = "exPrestamo", method = RequestMethod.POST)
	public void exportarPrest(HttpServletRequest request, HttpServletResponse response) throws Exception {

		System.out.println("eors_individual");
		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String valor1 = request.getParameter("numero");
		String cta = request.getParameter("cta");
		String nro_prestamo = cta + valor1;
		String es_platinum = " ";

		CicsSoapConnection cics = new CicsSoapConnection();
		RequestMensajeHost host = new RequestMensajeHost();

		BnPolizaPrestamo poliza = null;

		poliza = host.getEmisionDocumentosPrestamo(nro_prestamo);

		String prima = Funciones.formatearMonto(Funciones.tramaToBigDecimal(poliza.getSprima_des(), 2));

		// HOJA DE RESUMEN

		BodyHojaResumen hojaInput = new BodyHojaResumen();
		BodyHojaResumen hojaOutPut = new BodyHojaResumen();

		hojaInput.cargarData(nro_prestamo);
		hojaInput.toShowData();

		String inputHoja = hojaInput.toString();

		BodyHojaResumen bodyIn1 = new BodyHojaResumen();
		BodyHojaResumen bodyOut1 = null;

		bodyOut1 = cics.enviarTramaHojaResumen(hojaInput, bodyIn1);

		// System.out.println(bodyOut1.toShowData());

		BnHojaResumen hojaResumen = null;

		if (bodyOut1 != null) {
			hojaResumen = new BnHojaResumen();

			hojaResumen.setTOPERACION(bodyOut1.getByTag("DFH-TOPERACION"));
			hojaResumen.setNPRESTAMO(bodyOut1.getByTag("DFH-NPRESTAMO"));
			hojaResumen.setSPRESTAMO(bodyOut1.getByTag("DFH-SPRESTAMO"));
			hojaResumen.setSINTERES(bodyOut1.getByTag("DFH-SINTERES"));
			hojaResumen.setSTASA_IC(bodyOut1.getByTag("DFH-STAS-IC"));
			hojaResumen.setSTASA_IM(bodyOut1.getByTag("DFH-STASA-IM"));
			hojaResumen.setCIA_SEG_DESGV(bodyOut1.getByTag("DFH-CIA-SEG-DESGV"));
			hojaResumen.setPSEGURO_DESGV(bodyOut1.getByTag("DFH-PSEGURO-DESGV"));
			hojaResumen.setPEMISION_DESGV(bodyOut1.getByTag("DFH-PEMISION-DESGV"));
			hojaResumen.setSSEGURO_DESGV(bodyOut1.getByTag("DFH-SSEGURO-DESGV"));
			hojaResumen.setNPOLIZA_DESGV(bodyOut1.getByTag("DFH-NPOLIZA-DESGV"));
			hojaResumen.setCIA_ASEG_CP(bodyOut1.getByTag("DFH-CIA-ASEG-CP"));
			hojaResumen.setSPRIMA_CP(bodyOut1.getByTag("DFH-SPRIMA-CP"));
			hojaResumen.setSEMISION_CP(bodyOut1.getByTag("DFH-SEMISION-CP"));
			hojaResumen.setPREFIJO_CP(bodyOut1.getByTag("DFH-PREFIJO-CP"));
			hojaResumen.setFILLER_CP(bodyOut1.getByTag("DFH-FILLER-CP"));
			hojaResumen.setNPOLIZA_CP(bodyOut1.getByTag("DFH-NPOLIZA-CP"));
			hojaResumen.setSSEGURO_CP(bodyOut1.getByTag("DFH-SSEGURO-CP"));
			hojaResumen.setSENDOSO(bodyOut1.getByTag("DFH-SENDOSO"));
			hojaResumen.setSENVIO(bodyOut1.getByTag("DFH-SENVIO"));
			hojaResumen.setNO_AMORTCAP(bodyOut1.getByTag("DFH-NO-AMORTCAP"));
			hojaResumen.setSI_PAGINT(bodyOut1.getByTag("DFH-SI-PAGINT"));
			hojaResumen.setCERROR(bodyOut1.getByTag("DFH-CERROR"));
			hojaResumen.setMSJ(bodyOut1.getByTag("DFH-MSJ"));

		}

		String saldoPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSPRESTAMO(), 2));
		String saldoInteres = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSINTERES(), 2));
		String saldoTasaIC = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSTASA_IC(), 7));
		String saldoTasaIM = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSTASA_IM(), 7));

		String sSeguroDesgravamen = Funciones
				.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSSEGURO_DESGV(), 2));
		String nPolizaDesgravamen = Funciones.validar_texto_reves(hojaResumen.getNPOLIZA_DESGV());
		String sPrimaCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSPRIMA_CP(), 2));
		String sEmisionCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal11(hojaResumen.getSEMISION_CP()));
		String sSeguroCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSSEGURO_CP(), 2));
		String sEndosoCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSENDOSO(), 2));

		String nPolizaCP = hojaResumen.getNPOLIZA_CP();
		String sEnvioCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSENVIO(), 2));
		String prefijoCP = hojaResumen.getPREFIJO_CP();

		String siPagint = hojaResumen.getSI_PAGINT();
		String noamortcap = hojaResumen.getNO_AMORTCAP();

		GeneracionCronograma cronograma = null;

		try {

			BodyGeneracionCronograma cronogramaInput = new BodyGeneracionCronograma();

			String tipo_prestamo = "05";

			cronogramaInput.cargarData(tipo_prestamo, nro_prestamo);

			System.out.println("Cronograma input :" + cronogramaInput.toShowData());

			String inputCronograma = cronogramaInput.toString();

			BodyGeneracionCronograma bodyIn2 = new BodyGeneracionCronograma();
			BodyGeneracionCronograma cronogramaOutPut = null;

			cronogramaOutPut = cics.enviarTrama(cronogramaInput, bodyIn2);

			System.out.println(cronogramaOutPut.toShowData());

			if (cronogramaOutPut != null) {
				cronograma = new GeneracionCronograma();

				cronograma.setTOPERACION(cronogramaOutPut.getByTag("DFH-TOPERACION-76"));
				cronograma.setNPRESTAMO(cronogramaOutPut.getByTag("DFH-NPRESTAMO-76"));
				cronograma.setFDSBOLSO(cronogramaOutPut.getByTag("DFH-FDSBOLSO-76"));
				cronograma.setSPRESTAMO(cronogramaOutPut.getByTag("DFH-SPRESTAMO-76"));

				// cronograma.setSPRESTAMO(Funciones.getSimMonedaxCuenta(cronogramaOutPut.getByTag("DFH-SPRESTAMO-76"))+ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-SDEUDA-DIA-76"),2)));

				cronograma.setSAMORTIZADO(cronogramaOutPut.getByTag("DFH-SAMORTIZADO-76"));
				cronograma.setSACTUAL(cronogramaOutPut.getByTag("DFH-SACTUAL-76"));
				cronograma.setSDEUDA_D(cronogramaOutPut.getByTag("DFH-SDEUDA-DIA-76"));
				cronograma.setNCUOTAS(cronogramaOutPut.getByTag("DFH-NCUOTAS-76"));
				// cronograma.setMAIL(cronogramaOutPut.getByTag("DFH-CRONOGRAMA"));

				ArrayList<String> bcuota = new ArrayList<String>();
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-1").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-2").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-3").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-4").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-5").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-6").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-7").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-8").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-9").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-10").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-11").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-12").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-13").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-14").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-15").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-16").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-17").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-18").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-19").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-20").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-21").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-22").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-23").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-24").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-25").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-26").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-27").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-28").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-29").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-30").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-31").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-32").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-33").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-34").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-35").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-36").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-37").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-38").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-39").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-40").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-41").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-42").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-43").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-44").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-45").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-46").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-47").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-48").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-49").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-50").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-51").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-52").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-53").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-54").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-55").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-56").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-57").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-58").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-59").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-60").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-61").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-62").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-63").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-64").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-65").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-66").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-67").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-68").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-69").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-70").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-71").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-72").trim());
				cronograma.setBCUOTA(bcuota);

				ArrayList<String> acuota = new ArrayList<String>();
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-1").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-2").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-3").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-4").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-5").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-6").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-7").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-8").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-9").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-10").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-11").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-12").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-13").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-14").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-15").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-16").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-17").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-18").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-19").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-20").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-21").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-22").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-23").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-24").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-25").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-26").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-27").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-28").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-29").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-30").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-31").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-32").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-33").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-34").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-35").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-36").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-37").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-38").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-39").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-40").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-41").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-42").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-43").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-44").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-45").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-46").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-47").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-48").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-49").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-50").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-51").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-52").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-53").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-54").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-55").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-56").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-57").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-58").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-59").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-60").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-61").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-62").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-63").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-64").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-65").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-66").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-67").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-68").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-69").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-70").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-71").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-72").trim());
				cronograma.setACUOTA(acuota);

				ArrayList<String> fvcto = new ArrayList<String>();
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-1").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-2").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-3").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-4").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-5").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-6").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-7").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-8").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-9").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-10").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-11").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-12").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-13").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-14").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-15").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-16").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-17").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-18").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-19").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-20").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-21").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-22").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-23").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-24").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-25").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-26").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-27").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-28").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-29").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-30").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-31").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-32").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-33").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-34").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-35").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-36").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-37").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-38").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-39").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-40").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-41").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-42").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-43").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-44").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-45").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-46").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-47").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-48").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-49").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-50").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-51").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-52").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-53").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-54").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-55").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-56").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-57").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-58").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-59").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-60").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-61").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-62").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-63").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-64").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-65").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-66").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-67").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-68").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-69").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-70").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-71").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-72").trim());
				cronograma.setFVCTO(fvcto);

				ArrayList<String> fcancel = new ArrayList<String>();
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-1").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-2").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-3").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-4").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-5").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-6").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-7").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-8").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-9").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-10").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-11").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-12").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-13").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-14").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-15").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-16").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-17").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-18").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-19").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-20").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-21").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-22").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-23").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-24").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-25").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-26").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-27").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-28").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-29").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-30").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-31").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-32").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-33").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-34").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-35").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-36").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-37").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-38").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-39").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-40").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-41").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-42").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-43").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-44").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-45").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-46").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-47").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-48").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-49").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-50").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-51").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-52").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-53").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-54").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-55").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-56").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-57").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-58").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-59").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-60").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-61").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-62").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-63").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-64").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-65").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-66").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-67").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-68").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-69").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-70").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-71").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-72").trim());
				cronograma.setFCANCEL(fcancel);

				ArrayList<String> gcuota = new ArrayList<String>();
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-1").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-2").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-3").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-4").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-5").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-6").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-7").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-8").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-9").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-10").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-11").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-12").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-13").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-14").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-15").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-16").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-17").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-18").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-19").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-20").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-21").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-22").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-23").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-24").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-25").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-26").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-27").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-28").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-29").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-30").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-31").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-32").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-33").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-34").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-35").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-36").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-37").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-38").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-39").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-40").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-41").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-42").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-43").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-44").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-45").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-46").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-47").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-48").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-49").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-50").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-51").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-52").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-53").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-54").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-55").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-56").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-57").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-58").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-59").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-60").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-61").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-62").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-63").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-64").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-65").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-66").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-67").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-68").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-69").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-70").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-71").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-72").trim());
				cronograma.setGCUOTA(gcuota);

				ArrayList<String> samortizacion = new ArrayList<String>();
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-1").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-2").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-3").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-4").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-5").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-6").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-7").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-8").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-9").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-10").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-11").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-12").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-13").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-14").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-15").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-16").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-17").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-18").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-19").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-20").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-21").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-22").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-23").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-24").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-25").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-26").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-27").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-28").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-29").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-30").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-31").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-32").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-33").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-34").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-35").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-36").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-37").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-38").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-39").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-40").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-41").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-42").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-43").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-44").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-45").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-46").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-47").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-48").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-49").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-50").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-51").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-52").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-53").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-54").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-55").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-56").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-57").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-58").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-59").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-60").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-61").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-62").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-63").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-64").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-65").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-66").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-67").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-68").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-69").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-70").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-71").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-72").trim());
				cronograma.setSAMORTIZACION(samortizacion);

				ArrayList<String> sinteres = new ArrayList<String>();
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-1").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-2").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-3").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-4").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-5").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-6").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-7").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-8").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-9").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-10").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-11").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-12").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-13").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-14").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-15").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-16").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-17").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-18").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-19").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-20").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-21").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-22").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-23").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-24").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-25").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-26").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-27").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-28").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-29").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-30").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-31").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-32").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-33").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-34").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-35").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-36").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-37").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-38").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-39").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-40").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-41").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-42").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-43").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-44").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-45").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-46").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-47").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-48").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-49").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-50").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-51").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-52").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-53").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-54").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-55").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-56").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-57").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-58").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-59").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-60").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-61").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-62").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-63").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-64").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-65").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-66").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-67").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-68").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-69").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-70").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-71").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-72").trim());
				cronograma.setSINTERES(sinteres);

				ArrayList<String> sdesgravamen = new ArrayList<String>();
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-1").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-2").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-3").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-4").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-5").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-6").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-7").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-8").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-9").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-10").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-11").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-12").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-13").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-14").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-15").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-16").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-17").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-18").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-19").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-20").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-21").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-22").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-23").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-24").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-25").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-26").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-27").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-28").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-29").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-30").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-31").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-32").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-33").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-34").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-35").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-36").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-37").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-38").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-39").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-40").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-41").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-42").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-43").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-44").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-45").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-46").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-47").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-48").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-49").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-50").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-51").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-52").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-53").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-54").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-55").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-56").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-57").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-58").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-59").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-60").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-61").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-62").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-63").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-64").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-65").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-66").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-67").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-68").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-69").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-70").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-71").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-72").trim());
				cronograma.setSDESGRAVAMEN(sdesgravamen);

				ArrayList<String> sdcuota = new ArrayList<String>();
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-1").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-2").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-3").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-4").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-5").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-6").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-7").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-8").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-9").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-10").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-11").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-12").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-13").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-14").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-15").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-16").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-17").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-18").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-19").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-20").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-21").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-22").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-23").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-24").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-25").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-26").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-27").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-28").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-29").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-30").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-31").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-32").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-33").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-34").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-35").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-36").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-37").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-38").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-39").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-40").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-41").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-42").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-43").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-44").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-45").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-46").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-47").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-48").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-49").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-50").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-51").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-52").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-53").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-54").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-55").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-56").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-57").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-58").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-59").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-60").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-61").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-62").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-63").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-64").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-65").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-66").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-67").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-68").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-69").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-70").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-71").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-72").trim());
				cronograma.setSDCUOTA(sdcuota);

				cronograma.setACLIENTE(cronogramaOutPut.getByTag("DFH-ACLIENTE-76").trim());
				cronograma.setDOCUMENTO(cronogramaOutPut.getByTag("DFH-DOCUMENTO-76").trim());
				cronograma.setTELEFONO(cronogramaOutPut.getByTag("DFH-TELEFONO-76").trim());
				cronograma.setDCLIENTE(cronogramaOutPut.getByTag("DFH-DCLIENTE-76").trim());
				cronograma.setDOCUMGAR(cronogramaOutPut.getByTag("DFH-DOCUMGAR-76").trim());
				cronograma.setAGARANTE(cronogramaOutPut.getByTag("DFH-AGARANTE-76").trim());
				cronograma.setDGARANTE(cronogramaOutPut.getByTag("DFH-DGARANTE-76").trim());

				cronograma.setTASA(cronogramaOutPut.getByTag("DFH-TASA-76").trim());

				// cronograma.setTASA(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-TASA-76"),7))+
				// " %");

				// System.out.println("TASA: "+cronograma.getTASA());

				cronograma.setTCEA(cronogramaOutPut.getByTag("DFH-TCEA-76").trim());

				// cronograma.setTCEA(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-TCEA-76"),7))+
				// " %");

				cronograma.setSGCPRO(cronogramaOutPut.getByTag("DFH-SGCPRO-76").trim());

				// cronograma.setSGCPRO(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-SGCPRO-76"),2))+
				// " %");

				cronograma.setCERROR(cronogramaOutPut.getByTag("DFH-CERROR-76").trim());
				cronograma.setMSJ(cronogramaOutPut.getByTag("DFH-MSJ-76").trim());

				cronograma.setMSGNO_HOST(cronogramaOutPut.getByTag("msgnoHost").trim());
				cronograma.setMSJE_HOST(cronogramaOutPut.getByTag("msjeHost").trim());
			}

		} catch (Exception e) {
			// log.error(e,"","");
		}

		String fechaDesembolso = cronograma.getFDSBOLSO();
		String diaDesembolso = "";
		String mesDesembolso = "";
		String annioDesembolso = "";

		if (fechaDesembolso.equals("")) {
			fechaDesembolso = "";
		} else {
			annioDesembolso = (cronograma.getFDSBOLSO()).substring(0, 4);
			mesDesembolso = (cronograma.getFDSBOLSO()).substring(4, 6);
			diaDesembolso = (cronograma.getFDSBOLSO()).substring(6, 8);

			fechaDesembolso = diaDesembolso + "/" + mesDesembolso + "/" + annioDesembolso;
		}

		// Formatear Apellidos y Nombres de Cliente
		String aCliente = cronograma.getACLIENTE();

		if (aCliente.equals("")) {
			aCliente = "";
		} else {
			aCliente = Funciones.validar_texto_reves(cronograma.getACLIENTE());
		}

		// Formatear Apellidos y Nombres de Garante
		String aGarante = cronograma.getAGARANTE();

		if (aGarante.equals("")) {
			aGarante = "";
		} else {
			aGarante = Funciones.validar_texto_reves(cronograma.getAGARANTE());
		}

		// Formatear DNI de Cliente para pagaré
		String dniCliente = cronograma.getDOCUMENTO();

		if (dniCliente.equals("")) {
			dniCliente = "";
		} else {
			// dniCliente = (cronograma.getDOCUMENTO()).substring(4, 14);
			dniCliente = (cronograma.getDOCUMENTO()).trim();
		}

		// Formatear DNI de Cliente para Cronograma
		String dniClienteCronograma = cronograma.getDOCUMENTO();

		if (dniClienteCronograma.equals("")) {
			dniClienteCronograma = "";
		} else {
			// dniClienteCronograma = (cronograma.getDOCUMENTO()).substring(0, 3)+"
			// "+(cronograma.getDOCUMENTO()).substring(4, 14);
			dniClienteCronograma = (cronograma.getDOCUMENTO()).substring(0, 3) + " "
					+ (cronograma.getDOCUMENTO()).substring(4);
		}

		// Formatear Número de Teléfono de Cliente
		String tlfCliente = cronograma.getTELEFONO();

		if (tlfCliente.equals("")) {
			tlfCliente = "";
		} else {
			tlfCliente = cronograma.getTELEFONO();
		}

		// Formatear DNI de Garante
		String dniGarante = cronograma.getDOCUMGAR();

		if (dniGarante.equals("")) {
			dniGarante = "";
		} else {

			dniGarante = (cronograma.getDOCUMGAR()).trim();
		}

		// Formatear Monto de Préstamo
		String deudaTotal = (cronograma.getSPRESTAMO()).trim();

		if (deudaTotal.equals("")) {
			deudaTotal = "";
		} else {
			deudaTotal = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getSPRESTAMO(), 2));
		}

		// Formatear Tasa Int.
		String tasa = cronograma.getTASA();

		if (tasa.equals("")) {
			tasa = "";
		} else {
			tasa = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getTASA(), 7));
		}

		// Formatear TCEA
		String tcea = cronograma.getTCEA();

		if (tcea.equals("")) {
			tcea = "";
		} else {
			tcea = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getTCEA(), 7));
		}

		// Formatear Seguro de Cuota Protegida
		String seguroCP = cronograma.getSGCPRO();

		if (seguroCP.equals("")) {
			seguroCP = "";
		} else {
			seguroCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getSGCPRO(), 2));
		}

		// Formatear Número de Préstamo para Cronograma

		String nPrestamoCronograma = cronograma.getNPRESTAMO();
		String valor11 = "";
		String valor2 = "";

		if (nPrestamoCronograma.equals("")) {
			nPrestamoCronograma = "";
		} else {
			valor11 = (cronograma.getNPRESTAMO()).substring(0, 11);
			valor2 = (cronograma.getNPRESTAMO()).substring(11, 13);

			nPrestamoCronograma = valor11 + "-" + valor2;
		}

		// Formatear Número de Préstamo para Pagaré

		String nPrestamoPP = cronograma.getNPRESTAMO();

		if (nPrestamoPP.equals("")) {
			nPrestamoPP = "";
		} else {
			nPrestamoPP = cronograma.getNPRESTAMO();
		}

		// Formatear Dirección de Cliente
		String dCliente = cronograma.getDCLIENTE();

		if (dCliente.equals("")) {
			dCliente = "";
		} else {
			dCliente = Funciones.validar_texto_reves(cronograma.getDCLIENTE());
		}

		// Formatear Dirección de Garante
		String dGarante = cronograma.getDGARANTE();

		if (dGarante.equals("")) {
			dGarante = "";
		} else {
			dGarante = Funciones.validar_texto_reves(cronograma.getDGARANTE());
		}

		// Solicitud de prestamo

		BnSolicitudPrestamo solicitud = null;

		BodySolicitudPrestamo solicitudInput = new BodySolicitudPrestamo();

		String tipo_prestamo = "07";

		solicitudInput.cargarData(tipo_prestamo, nro_prestamo);

		System.out.println("Solicitud input :" + solicitudInput.toShowData());

		String inputSolicitud = solicitudInput.toString();

		BodySolicitudPrestamo bodyIn3 = new BodySolicitudPrestamo();
		BodySolicitudPrestamo solicitudOutPut = null;

		solicitudOutPut = cics.enviarTrama(solicitudInput, bodyIn3);

		System.out.println("solicitud:" + solicitudInput.toShowData());

		System.out.println(solicitudOutPut.toShowData());

		if (solicitudOutPut != null) {
			solicitud = new BnSolicitudPrestamo();

			solicitud.setTOPERACION(solicitudOutPut.getByTag("DFH-TOPERACION").trim());
			solicitud.setNPRESTAMO(solicitudOutPut.getByTag("DFH-NPRESTAMO").trim());
			solicitud.setTPRESTAMO(solicitudOutPut.getByTag("DFH-TPRESTAMO").trim());
			solicitud.setFSOLICITUD(solicitudOutPut.getByTag("DFH-FSOLICITUD").trim());
			solicitud.setMODALIDAD(solicitudOutPut.getByTag("DFH-MODALIDAD").trim());
			solicitud.setACLIENTE(solicitudOutPut.getByTag("DFH-ACLIENTE").trim());
			solicitud.setDOCUMENTO(solicitudOutPut.getByTag("DFH-DOCUMENTO").trim());
			solicitud.setFNAC(solicitudOutPut.getByTag("DFH-FNAC").trim());
			solicitud.setECIVIL(solicitudOutPut.getByTag("DFH-ECIVIL").trim());
			solicitud.setSEXO(solicitudOutPut.getByTag("DFH-SEXO"));
			solicitud.setTELEFONO(solicitudOutPut.getByTag("DFH-TELEFONO").trim());
			solicitud.setCELULAR(solicitudOutPut.getByTag("DFH-CELULAR").trim());
			solicitud.setDCLIENTE(solicitudOutPut.getByTag("DFH-DCLIENTE").trim());
			solicitud.setDISTRITO(solicitudOutPut.getByTag("DFH-DISTRITO").trim());
			solicitud.setPROVINCIA(solicitudOutPut.getByTag("DFH-PROVINCIA").trim());
			solicitud.setDPTO(solicitudOutPut.getByTag("DFH-DPTO").trim());
			solicitud.setREFERENCIA(solicitudOutPut.getByTag("DFH-REFERENCIA").trim());
			solicitud.setCORREO(solicitudOutPut.getByTag("DFH-CORREO").trim());
			solicitud.setCORRESPONDENCIA(solicitudOutPut.getByTag("DFH-CORRESPONDENCIA").trim());
			solicitud.setCLABORAL(solicitudOutPut.getByTag("DFH-CLABORAL").trim());
			solicitud.setENTIDAD(solicitudOutPut.getByTag("DFH-ENTIDAD").trim());
			solicitud.setTLABORAL(solicitudOutPut.getByTag("DFH-TLABORAL").trim());
			solicitud.setFINGRESO(solicitudOutPut.getByTag("DFH-FINGRESO").trim());
			solicitud.setSINGRESOS(solicitudOutPut.getByTag("DFH-SINGRESOS").trim());
			solicitud.setACLIENTEG(solicitudOutPut.getByTag("DFH-ACLIENTE-G").trim());
			solicitud.setDOCUMENTOG(solicitudOutPut.getByTag("DFH-DOCUMENTO-G").trim());
			solicitud.setFNACG(solicitudOutPut.getByTag("DFH-FNAC-G").trim());
			solicitud.setECIVILG(solicitudOutPut.getByTag("DFH-ECIVIL-G").trim());
			solicitud.setSEXOG(solicitudOutPut.getByTag("DFH-SEXO-G").trim());
			solicitud.setTELEFONOG(solicitudOutPut.getByTag("DFH-TELEFONO-G").trim());
			solicitud.setCELULARG(solicitudOutPut.getByTag("DFH-CELULAR-G").trim());
			solicitud.setDCLIENTEG(solicitudOutPut.getByTag("DFH-DCLIENTE-G").trim());
			solicitud.setDISTRITOG(solicitudOutPut.getByTag("DFH-DISTRITO-G").trim());
			solicitud.setPROVINCIAG(solicitudOutPut.getByTag("DFH-PROVINCIA-G").trim());
			solicitud.setDPTOG(solicitudOutPut.getByTag("DFH-DPTO-G").trim());
			solicitud.setREFERENCIAG(solicitudOutPut.getByTag("DFH-REFERENCIA-G").trim());
			solicitud.setCORREOG(solicitudOutPut.getByTag("DFH-CORREO-G").trim());
			solicitud.setCORRESPONDENCIAG(solicitudOutPut.getByTag("DFH-CORRESPONDENCIA-G").trim());
			solicitud.setCLABORALG(solicitudOutPut.getByTag("DFH-CLABORAL-G").trim());
			solicitud.setENTIDADG(solicitudOutPut.getByTag("DFH-ENTIDAD-G").trim());
			solicitud.setTLABORALG(solicitudOutPut.getByTag("DFH-TLABORAL-G").trim());
			solicitud.setFINGRESOG(solicitudOutPut.getByTag("DFH-FINGRESO-G").trim());
			solicitud.setSINGRESOSG(solicitudOutPut.getByTag("DFH-SINGRESOS-G").trim());
			solicitud.setSSOLICITADO(solicitudOutPut.getByTag("DFH-SSOLICITADO").trim());
			solicitud.setSABONADO(solicitudOutPut.getByTag("DFH-SABONADO").trim());
			solicitud.setICUOTAP(solicitudOutPut.getByTag("DFH-ICUOTAP").trim());
			solicitud.setIENDOSO(solicitudOutPut.getByTag("DFH-IENDOSO").trim());
			solicitud.setIPGRACIA(solicitudOutPut.getByTag("DFH-IPGRACIA").trim());
			solicitud.setDPAGO(solicitudOutPut.getByTag("DFH-DPAGO").trim());
			solicitud.setTASA(solicitudOutPut.getByTag("DFH-TASA").trim());
			solicitud.setTCEA(solicitudOutPut.getByTag("DFH-TCEA").trim());
			solicitud.setCCUENTA(solicitudOutPut.getByTag("DFH-CCUENTA").trim());
			solicitud.setCCUENTAG(solicitudOutPut.getByTag("DFH-CCUENTA-G").trim());
			solicitud.setSDESGRAVAMEN(solicitudOutPut.getByTag("DFH-SDESGRAVAMEN").trim());
			solicitud.setSCUOTAP(solicitudOutPut.getByTag("DFH-SCUOTAP").trim());
			solicitud.setNCUOTAS(solicitudOutPut.getByTag("DFH-NCUOTAS").trim());

			// solicitud.setCMONEDA(solicitudOutPut.getByTag("DFH-CMONEDA").trim());

			String ind = solicitudOutPut.getByTag("DFH-CMONEDA");
			int ind1 = ind.length();

			if (ind1 < 4) {
				solicitud.setCMONEDA(ind);
			} else {

				solicitud.setCMONEDA(ind.substring(0, 4));

				solicitud.setINDICADOR(ind.substring(ind1 - 1, ind1));

			}

			solicitud.setSCUOTA(solicitudOutPut.getByTag("DFH-SCUOTA").trim());
			solicitud.setNPRESTRENOV(solicitudOutPut.getByTag("DFH-NPREST-RENOV").trim());
			solicitud.setSDEUDA(solicitudOutPut.getByTag("DFH-SDEUDA").trim());
			solicitud.setSNETO(solicitudOutPut.getByTag("DFH-SNETO").trim());
			solicitud.setGESTOR(solicitudOutPut.getByTag("DFH-GESTOR").trim());
			solicitud.setSUPER(solicitudOutPut.getByTag("DFH-SUPER").trim());
			solicitud.setAGENCIA(solicitudOutPut.getByTag("DFH-AGENCIA").trim());
			solicitud.setCERROR(solicitudOutPut.getByTag("DFH-CERROR").trim());
			solicitud.setMSJ(solicitudOutPut.getByTag("DFH-MSJ").trim());
			solicitud.setMSGNO_HOST(solicitudOutPut.getByTag("msgnoHost").trim());
			solicitud.setMSJE_HOST(solicitudOutPut.getByTag("msjeHost").trim());
		}

		// ***************************************************SOLICITUD***************************************************
		// Formatear Número de Préstamo
		String numeroPrestamo = solicitud.getNPRESTAMO();

		if (numeroPrestamo.equals("")) {
			numeroPrestamo = " ";
		} else {
			numeroPrestamo = solicitud.getNPRESTAMO();
		}

		String numeroPrestamoRenov = solicitud.getNPRESTRENOV();

		if (numeroPrestamoRenov.equals("")) {
			numeroPrestamoRenov = " ";
		} else {
			numeroPrestamoRenov = solicitud.getNPRESTRENOV();
		}

		// Formatear Tipo de Préstamo
		String tipoPrestamo = solicitud.getTPRESTAMO();

		if (tipoPrestamo.equals("")) {
			tipoPrestamo = " ";
		} else {
			tipoPrestamo = solicitud.getTPRESTAMO();
		}

		// Formatear Fecha de Solicitud
		String fechaSolicitudPrestamo = solicitud.getFSOLICITUD();

		if (fechaSolicitudPrestamo.equals("")) {
			fechaSolicitudPrestamo = " ";
		} else {

			fechaSolicitudPrestamo = solicitud.getFSOLICITUD();
		}
		// System.out.println("FECHA SOLICITUD DE PRÉSTAMO: "+fechaSolicitudPrestamo);

		// Formatear Modalidad de Préstamo
		String modalidadPrestamo = solicitud.getMODALIDAD();

		if (modalidadPrestamo.equals("")) {
			modalidadPrestamo = " ";
		} else {
			modalidadPrestamo = solicitud.getMODALIDAD();
		}

		// Formatear Nombre del Cliente
		String aCliente1 = solicitud.getACLIENTE();

		if (aCliente1.equals("")) {
			aCliente1 = " ";
		} else {
			aCliente1 = Funciones.validar_texto_reves(solicitud.getACLIENTE());
		}

		// Formatear DNI de Cliente
		String dniCliente1 = solicitud.getDOCUMENTO();

		if (dniCliente1.equals("")) {
			dniCliente1 = " ";
		} else {
			dniCliente1 = solicitud.getDOCUMENTO();
		}

		// Formatear Fecha de Nacimiento de Cliente
		String fechNacCliente = solicitud.getFNAC();

		if (fechNacCliente.equals("")) {
			fechNacCliente = " ";
		} else {
			fechNacCliente = (solicitud.getFNAC()).replace("/", "-");
		}

		// Formatear Estado Civil de Cliente
		String eCivilCliente = solicitud.getECIVIL();
		int longitudECivilCliente = (solicitud.getECIVIL()).length();

		if (eCivilCliente.equals("")) {
			eCivilCliente = " ";
		} else {
			eCivilCliente = (solicitud.getECIVIL()).substring(2, longitudECivilCliente);
		}

		// Formatear Sexo de Cliente
		String sexoCliente = solicitud.getSEXO();

		if (sexoCliente.equals("")) {
			sexoCliente = " ";
		} else {
			sexoCliente = solicitud.getSEXO();
		}

		// Formatear Teléfono de Cliente
		String telefonoCliente1 = solicitud.getTELEFONO();

		if (telefonoCliente1.equals("") || telefonoCliente1.equals("0000000000")
				|| telefonoCliente1.equals("0000000")) {

			telefonoCliente1 = " ";
		} else {
			telefonoCliente1 = solicitud.getTELEFONO();
		}

		// Formatear Celular de Cliente
		String celularCliente1 = solicitud.getCELULAR();

		if (celularCliente1.equals("") || celularCliente1.equalsIgnoreCase("0000000000")) {
			celularCliente1 = " ";
		} else {
			celularCliente1 = solicitud.getCELULAR();
		}

		// Formatear Dirección de Cliente
		String direccCliente = solicitud.getDCLIENTE();

		if (direccCliente.equals("")) {
			direccCliente = " ";
		} else {
			direccCliente = Funciones.validar_texto_reves(solicitud.getDCLIENTE());
		}

		// Formatear Distrito de Cliente
		String distritoCliente = solicitud.getDISTRITO();

		if (distritoCliente.equals("")) {
			distritoCliente = " ";
		} else {
			distritoCliente = Funciones.validar_texto_reves(solicitud.getDISTRITO());
		}

		// Formatear Provincia de Cliente
		String provinciaCliente = solicitud.getPROVINCIA();

		if (provinciaCliente.equals("")) {
			provinciaCliente = " ";
		} else {
			provinciaCliente = Funciones.validar_texto_reves(solicitud.getPROVINCIA());
		}

		// Formatear Departamento de Cliente
		String dptoCliente = solicitud.getDPTO();

		if (dptoCliente.equals("")) {
			dptoCliente = " ";
		} else {
			dptoCliente = Funciones.validar_texto_reves(solicitud.getDPTO());
		}

		// Formatear Referencia de Cliente
		String referenciaCliente = solicitud.getREFERENCIA();

		if (referenciaCliente.equals("")) {
			referenciaCliente = " ";
		} else {
			referenciaCliente = Funciones.validar_texto_reves(solicitud.getREFERENCIA());
		}

		// Formatear Correo de Cliente
		String correoCliente = solicitud.getCORREO();

		if (correoCliente.equals("")) {
			correoCliente = "";
		} else {
			correoCliente = Funciones.validar_texto_reves(solicitud.getCORREO());
		}
		// System.out.println("CORREO CLIENTE: "+correoCliente);

		// Formatear Correspondencia de Cliente
		String correspondenciaCliente = solicitud.getCORRESPONDENCIA();

		if (correspondenciaCliente.equals("")) {
			correspondenciaCliente = " ";
		} else {
			correspondenciaCliente = solicitud.getCORRESPONDENCIA();
		}

		// Formatear Condición Laboral de Cliente
		String cLaboralCliente = solicitud.getCLABORAL();

		if (cLaboralCliente.equals("")) {
			cLaboralCliente = " ";
		} else {
			cLaboralCliente = Funciones.validar_texto_reves(solicitud.getCLABORAL());
		}

		// Formatear Entidad de Cliente
		String entidadCliente = solicitud.getENTIDAD();

		if (entidadCliente.equals("")) {
			entidadCliente = " ";
		} else {
			entidadCliente = Funciones.validar_texto_reves(solicitud.getENTIDAD());
		}

		// Formatear Teléfono Laboral de Cliente
		String telefonoLaboralCliente = solicitud.getTLABORAL();

		if (telefonoLaboralCliente.equals("")) {
			telefonoLaboralCliente = " ";
		} else {
			telefonoLaboralCliente = solicitud.getTLABORAL();
		}

		// Formatear Fecha de Ingreso de Cliente
		String fechaIngresoCliente = solicitud.getFINGRESO();

		if ((fechaIngresoCliente.equals("")) || (fechaIngresoCliente.equals("/ /"))) {
			fechaIngresoCliente = " ";
		} else {
			fechaIngresoCliente = solicitud.getFINGRESO();
		}

		// Formatear Monto de Ingresos de Cliente
		String montoIngresosCliente = solicitud.getSINGRESOS();

		if (montoIngresosCliente.equals("")) {
			montoIngresosCliente = " ";
		} else {
			montoIngresosCliente = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSINGRESOS(), 2));

		}

		// Formatear Nombre del Garante
		String aGarante1 = solicitud.getACLIENTEG().trim();

		if (aGarante1.equals("")) {
			aGarante1 = "";
		} else {
			aGarante1 = Funciones.validar_texto_reves(solicitud.getACLIENTEG());
		}
		// System.out.println("NOMBRE GARANTE: "+aGarante);
		// Formatear DNI de Garante
		String dniGarante1 = solicitud.getDOCUMENTOG();

		if (dniGarante1.equals("")) {
			dniGarante1 = " ";
		} else {
			dniGarante1 = (solicitud.getDOCUMENTOG()).replace("-", " ");
		}

		// Formatear Fecha de Nacimiento de Garante
		String fechNacGarante = solicitud.getFNACG();

		if (fechNacGarante.equals("")) {
			fechNacGarante = " ";
		} else {
			fechNacGarante = solicitud.getFNACG();
		}

		// Formatear Estado Civil de Garante
		String eCivilGarante = solicitud.getECIVILG();
		int longitudECivilGarante = (solicitud.getECIVILG()).length();

		if (eCivilGarante.equals("")) {
			eCivilGarante = " ";
		} else {
			eCivilGarante = (solicitud.getECIVILG()).substring(2, longitudECivilGarante);
		}

		// Formatear Sexo de Garante
		String sexoGarante = solicitud.getSEXOG();

		if (sexoGarante.equals("")) {
			sexoGarante = " ";
		} else {
			sexoGarante = solicitud.getSEXOG();
		}

		// Formatear Teléfono de Garante
		String telefonoGarante = solicitud.getTELEFONOG();

		if (telefonoGarante.equals("")) {
			telefonoGarante = " ";
		} else {
			telefonoGarante = solicitud.getTELEFONOG();
		}

		// Formatear Celular de Garante
		String celularGarante = solicitud.getCELULARG();

		if (celularGarante.equals("")) {
			celularGarante = " ";
		} else {
			celularGarante = solicitud.getCELULARG();
		}

		// Formatear Dirección de Garante
		String direccGarante = solicitud.getDCLIENTEG();

		if (direccGarante.equals("")) {
			direccGarante = " ";
		} else {
			direccGarante = Funciones.validar_texto_reves(solicitud.getDCLIENTEG());
		}

		// Formatear Distrito de Garante
		String distritoGarante = solicitud.getDISTRITOG();

		if (distritoGarante.equals("")) {
			distritoGarante = " ";
		} else {
			distritoGarante = Funciones.validar_texto_reves(solicitud.getDISTRITOG());
		}

		// Formatear Provincia de Garante
		String provinciaGarante = solicitud.getPROVINCIAG();

		if (provinciaGarante.equals("")) {
			provinciaGarante = " ";
		} else {
			provinciaGarante = Funciones.validar_texto_reves(solicitud.getPROVINCIAG());
		}

		// Formatear Departamento de Garante
		String dptoGarante = solicitud.getDPTOG();

		if (dptoGarante.equals("")) {
			dptoGarante = " ";
		} else {
			dptoGarante = Funciones.validar_texto_reves(solicitud.getDPTOG());
		}

		// Formatear Referencia de Garante
		String referenciaGarante = solicitud.getREFERENCIAG();

		if (referenciaGarante.equals("")) {
			referenciaGarante = " ";
		} else {
			referenciaGarante = Funciones.validar_texto_reves(solicitud.getREFERENCIAG());
		}

		// Formatear Correo de Garante
		String correoGarante = solicitud.getCORREOG();

		if (correoGarante.equals("")) {
			correoGarante = "";
		} else {
			correoGarante = Funciones.validar_texto_reves(solicitud.getCORREOG());
		}

		// Formatear Correspondencia de Garante
		String correspondenciaGarante = solicitud.getCORRESPONDENCIAG();

		if (correspondenciaGarante.equals("")) {
			correspondenciaGarante = " ";
		} else {
			correspondenciaGarante = solicitud.getCORRESPONDENCIAG();
		}

		// Formatear Condición Laboral de Garante
		String cLaboralGarante = solicitud.getCLABORALG();

		if (cLaboralGarante.equals("")) {
			cLaboralGarante = " ";
		} else {
			cLaboralGarante = Funciones.validar_texto_reves(solicitud.getCLABORALG());
		}

		// Formatear Entidad de Garante
		String entidadGarante = solicitud.getENTIDADG();

		if (entidadGarante.equals("")) {
			entidadGarante = " ";
		} else {
			entidadGarante = Funciones.validar_texto_reves(solicitud.getENTIDADG());
		}

		// Formatear Teléfono Laboral de Garante
		String telefonoLaboralGarante = solicitud.getTLABORALG();

		if (telefonoLaboralGarante.equals("")) {
			telefonoLaboralGarante = " ";
		} else {
			telefonoLaboralGarante = solicitud.getTLABORALG();
		}

		// Formatear Fecha de Ingreso de Garante
		String fechaIngresoGarante = solicitud.getFINGRESOG();

		if (fechaIngresoGarante.equals("")) {
			fechaIngresoGarante = " ";
		} else {
			fechaIngresoGarante = solicitud.getFINGRESOG();
		}

		// Formatear Monto de Ingresos de Garante
		String montoIngresosGarante = solicitud.getSINGRESOSG();

		if ((montoIngresosGarante.equals("")) || (aGarante.equals(""))) {
			montoIngresosGarante = " ";
		} else {
			montoIngresosGarante = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSINGRESOSG(), 2));

		}

		// Formatear Monto Solicitado de Préstamo
		String montoSolicitadoPrestamo = solicitud.getSSOLICITADO();

		if (montoSolicitadoPrestamo.equals("")) {
			montoSolicitadoPrestamo = " ";
		} else {
			montoSolicitadoPrestamo = Funciones
					.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSSOLICITADO(), 2));
		}

		// Formatear Monto Abonado de Préstamo
		String montoAbonadoPrestamo = solicitud.getSABONADO();

		if (montoAbonadoPrestamo.equals("")) {
			montoAbonadoPrestamo = " ";
		} else {

			montoAbonadoPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSABONADO(), 2));

		}

		// Formatear Monto Solicitado de Préstamo
		String iCuotaProtegida = solicitud.getICUOTAP();

		if (iCuotaProtegida.equals("")) {
			iCuotaProtegida = " ";
		} else {
			if (iCuotaProtegida.equals("S")) {
				iCuotaProtegida = "Sí";
			}
			if (iCuotaProtegida.equals("N")) {
				iCuotaProtegida = "No";
			}
		}

		// Formatear I Cuota Protegida de Préstamo
		String iCuotaProtegidaPrestamo = solicitud.getICUOTAP();

		if (iCuotaProtegidaPrestamo.equals("")) {
			iCuotaProtegidaPrestamo = " ";
		} else {
			if (iCuotaProtegidaPrestamo.equals("S")) {
				iCuotaProtegidaPrestamo = "Sí";
			}
			if (iCuotaProtegidaPrestamo.equals("N")) {
				iCuotaProtegidaPrestamo = "No";
			}
		}

		// Formatear I Endoso de Préstamo
		String iEndosoPrestamo = solicitud.getIENDOSO();

		if (iEndosoPrestamo.equals("")) {
			iEndosoPrestamo = " ";
		} else {
			if (iEndosoPrestamo.equals("S")) {
				iEndosoPrestamo = "Sí";
			}
			if (iEndosoPrestamo.equals("N")) {
				iEndosoPrestamo = "No";
			}
		}

		// Formatear I Periodo de Gracia de Préstamo
		String iPeriodoGraciaPrestamo = solicitud.getIPGRACIA();

		if (iPeriodoGraciaPrestamo.equals("")) {
			iPeriodoGraciaPrestamo = " ";
		} else {
			if (iPeriodoGraciaPrestamo.equals("S")) {
				iPeriodoGraciaPrestamo = "Sí";
			}
			if (iPeriodoGraciaPrestamo.equals("N")) {
				iPeriodoGraciaPrestamo = "No";
			}
		}

		// Formatear Día de Vencimiento de Pago de Préstamo
		String diaVencimientoPagoPrestamo = solicitud.getDPAGO();

		if (diaVencimientoPagoPrestamo.equals("")) {
			diaVencimientoPagoPrestamo = " ";
		} else {
			diaVencimientoPagoPrestamo = solicitud.getDPAGO();
		}

		// Formatear Tasa de Préstamo
		String tasaPrestamo = solicitud.getTASA();

		if (tasaPrestamo.equals("")) {
			tasaPrestamo = " ";
		} else {
			tasaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getTASA(), 9));
		}

		// Formatear TCEA de Préstamo
		String tceaPrestamo = solicitud.getTCEA();

		if (tceaPrestamo.equals("")) {
			tceaPrestamo = " ";
		} else {
			tceaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getTCEA(), 2));
		}

		// Formatear Cuenta de Cliente
		String cuentaCliente = solicitud.getCCUENTA();

		if (cuentaCliente.equals("")) {
			cuentaCliente = " ";
		} else {
			cuentaCliente = solicitud.getCCUENTA();
		}

		// Formatear Cuenta de Garante
		String cuentaGarante = solicitud.getCCUENTAG();

		if (cuentaGarante.equals("")) {
			cuentaGarante = " ";
		} else {
			cuentaGarante = solicitud.getCCUENTAG();
		}

		// Formatear Seguro de Desgravamen de Préstamo
		String seguroDesgravamenPrestamo = solicitud.getSDESGRAVAMEN();

		if (seguroDesgravamenPrestamo.equals("")) {
			seguroDesgravamenPrestamo = " ";
		} else {

			// 000000000826000

			// seguroDesgravamenPrestamo =
			// ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(solicitud.getSDESGRAVAMEN(),6));
			int longDes = seguroDesgravamenPrestamo.length();

			// 000000013300000
			String decimal = seguroDesgravamenPrestamo.substring(longDes - 7);
			String deci = decimal.substring(0, 5);

			String entero = seguroDesgravamenPrestamo.substring(0, 8);

			// System.out.println("primer entero "+entero);

			if (entero.equalsIgnoreCase("0000000")) {
				entero = "0";
			} else {
				entero = Funciones.eliminarCerosAlaIzquierda(entero);
			}

			if (entero.equalsIgnoreCase("")) {
				entero = "0";
			}

			// System.out.println("decimal "+decimal);
			// System.out.println("entero "+entero);

			// System.out.println("TOTAL "+entero+"."+deci);
			String segDes = entero + "." + deci;

			seguroDesgravamenPrestamo = segDes;
		}

		// Formatear seguro de Cuota Protegida de Préstamo
		String seguroCuotaProtegidaPrestamo = solicitud.getSCUOTAP();

		if (seguroCuotaProtegidaPrestamo.equals("")) {
			seguroCuotaProtegidaPrestamo = " ";
		} else {
			seguroCuotaProtegidaPrestamo = Funciones
					.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSCUOTAP(), 2));
		}

		// Formatear Número de Cuotas de Préstamo
		String numeroCuotasPrestamo = solicitud.getNCUOTAS();

		if (numeroCuotasPrestamo.equals("")) {
			numeroCuotasPrestamo = " ";
		} else {
			numeroCuotasPrestamo = solicitud.getNCUOTAS();
		}

		// Formatear Tipo de Moneda de Préstamo
		String tipoMonedaPrestamo = solicitud.getCMONEDA();

		if (tipoMonedaPrestamo.equals("")) {
			tipoMonedaPrestamo = " ";
		} else {
			if (tipoMonedaPrestamo.equals("SOL")) {
				tipoMonedaPrestamo = "Soles";
			}
			;
		}

		// Formatear Monto de Cuotas de Préstamo
		String montoCuotasPrestamo = solicitud.getSCUOTA();

		if (montoCuotasPrestamo.equals("")) {
			montoCuotasPrestamo = " ";
		} else {
			montoCuotasPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSCUOTA(), 2));
		}

		// Formatear Número de Préstamo de Renovación
		String numeroPrestamoRenovacion = solicitud.getNPRESTAMO();

		if (numeroPrestamoRenovacion.equals("")) {
			numeroPrestamoRenovacion = " ";
		} else {
			numeroPrestamoRenovacion = solicitud.getNPRESTAMO();
		}

		// Formatear Saldo de Deuda de Préstamo
		String saldoDeudaPrestamo = solicitud.getSDEUDA();

		if (saldoDeudaPrestamo.equals("")) {
			saldoDeudaPrestamo = " ";
		} else {
			saldoDeudaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSDEUDA(), 2));
		}

		// Formatear Monto Neto de Deuda de Préstamo
		String montoDeudaPrestamo = solicitud.getSNETO();

		if (montoDeudaPrestamo.equals("")) {
			montoDeudaPrestamo = " ";
		} else {
			montoDeudaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSNETO(), 2));
		}

		// Formatear Gestor de Agencia
		String gestorAgencia = solicitud.getGESTOR();

		if (gestorAgencia.equals("")) {
			gestorAgencia = " ";
		} else {
			gestorAgencia = solicitud.getGESTOR();
		}

		// Formatear Supervisor de Agencia
		String supervisorPrestamo = solicitud.getSUPER();

		if (supervisorPrestamo.equals("")) {
			supervisorPrestamo = " ";
		} else {
			supervisorPrestamo = solicitud.getSUPER();
		}

		// Formatear Agencia
		String agencia = solicitud.getAGENCIA();

		if (agencia.equals("")) {
			agencia = " ";
		} else {
			agencia = solicitud.getAGENCIA();
		}
		// ****************************************************SOLICITUD***************************************************

		String secpoliza = poliza.getSec_poliza();
		String acliente = poliza.getAcliente();
		String finivigencia = poliza.getFini_vigencia();
		String ftervigencia = poliza.getFter_vigencia();
		String tipodoc = poliza.getTdoc() + "    " + poliza.getNdoc();
		String sexo = poliza.getSexo();
		String fenac = poliza.getFecha_nac();
		String nacionalidad = poliza.getNacionalidad();
		String estcivil = poliza.getEcivil();
		String telfijo = poliza.getTelefono();
		String telmovil = "";
		String ctrabajo = poliza.getClaboral();
		String direccion = poliza.getDireccion();
		String dis = "";
		String correo = "";
		String nprestamo = poliza.getCcuenta() + poliza.getCdsbolso();
		String oficina = poliza.getCagencia() + "   " + poliza.getClaboral();
		String codvendedor = poliza.getCusuario();
		String cuota = poliza.getNcuotas() + " Meses";

		String certificado = Funciones.eliminarCerosAlaIzquierda((hojaResumen.getPREFIJO_CP())) + "-"
				+ hojaResumen.getNPRESTAMO();

		// GENERACION DE PDF

		response.setContentType("application/pdf");
		response.addHeader("Content-Disposition",
				"attachment; filename=" + "Prestamo_Multired_" + nro_prestamo + ".pdf");
		// exporter = new JRPdfExporter();

		// -->> itext docprestamo
		Document document = new Document();
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		// PdfCopy copy = new PdfCopy(document,baos);
		PdfWriter copy = null;
		try {
			// pdfprestamo
			copy = PdfWriter.getInstance(document, baos);
			copy.setInitialLeading(5);
		} catch (DocumentException e) {

		}

		document.open();

		try {

			Calendar fecha = new GregorianCalendar();

			int ano111 = fecha.get(Calendar.YEAR);
			int mes111 = (fecha.get(Calendar.MONTH)) + 1;
			int dia111 = fecha.get(Calendar.DAY_OF_MONTH);

			String anoo22 = String.valueOf(ano111);
			String mess22 = String.valueOf(mes111);
			String diaa22 = String.valueOf(dia111);

			if (mess22.length() == 1) {
				mess22 = "0" + mess22;
			}
			if (diaa22.length() == 1) {
				diaa22 = "0" + diaa22;
			}
			String fechaEnv = diaa22 + "/" + mess22 + "/" + anoo22;

			int hora = fecha.get(Calendar.HOUR_OF_DAY);
			int min = fecha.get(Calendar.MINUTE);
			int seg = fecha.get(Calendar.SECOND);

			String horaEnv = hora + ":" + min + ":" + seg;

			Principal codUsu = request.getUserPrincipal();

			// usuario de seguridad
			String usuario = codUsu.getName();

			// document.add(creaPDFGenera(nprestamo, datosSesion.getCodUsuario(),fechaEnv,
			// horaEnv));

			document.add(creaPDFGenera(nprestamo, usuario, fechaEnv, horaEnv));

			// 1 Solicitud de crédito

			String tipo = solicitud.getIENDOSO();

			document.add(creaPDFSolicitudPrestamo(numeroPrestamoRenov, nro_prestamo, tipoPrestamo,
					fechaSolicitudPrestamo, modalidadPrestamo, aCliente1, dniCliente1, fechNacCliente, eCivilCliente,
					sexoCliente, telefonoCliente1, celularCliente1, direccCliente, distritoCliente, provinciaCliente,
					dptoCliente, referenciaCliente, correoCliente, correspondenciaCliente, cLaboralCliente,
					entidadCliente, telefonoLaboralCliente, fechaIngresoCliente, montoIngresosCliente, aGarante1,
					dniGarante1, fechNacGarante, eCivilGarante, sexoGarante, telefonoGarante, celularGarante,
					direccGarante, distritoGarante, provinciaGarante, dptoGarante, referenciaGarante, correoGarante,
					correspondenciaGarante, cLaboralGarante, entidadGarante, telefonoLaboralGarante,
					fechaIngresoGarante, montoIngresosGarante, montoSolicitadoPrestamo, montoAbonadoPrestamo,
					iCuotaProtegidaPrestamo, iEndosoPrestamo, iPeriodoGraciaPrestamo, diaVencimientoPagoPrestamo,
					tasaPrestamo, tceaPrestamo, cuentaCliente, cuentaGarante, seguroDesgravamenPrestamo,
					seguroCuotaProtegidaPrestamo, numeroCuotasPrestamo, tipoMonedaPrestamo, montoCuotasPrestamo,
					numeroPrestamoRenovacion, saldoDeudaPrestamo, montoDeudaPrestamo, gestorAgencia, supervisorPrestamo,
					agencia, oficina, tipo));

			// 2 Cronograma

			// si queda comentado
			// document.add(creaPDFCronograma(telefonoCliente1,fechaDesembolso,aCliente,dniClienteCronograma,tlfCliente,dCliente,aGarante,dniGarante,deudaTotal,cronograma.getSPRESTAMO(),nPrestamoCronograma,tasa,tcea,seguroCP,dGarante,cronograma.getNCUOTAS(),cronograma.getFVCTO(),cronograma.getSAMORTIZACION(),cronograma.getSINTERES(),cronograma.getSDESGRAVAMEN(),cronograma.getSDCUOTA(),cronograma.getACUOTA()));

			// 3 Hoja de Resumen

			ConsultaImagen dao = null;
			BufferedImage image = null;
			byte[] imageByte = null;

			dao = new ConsultaImagen();
			String codFirma1 = Constante.FIRMA1;
			imageByte = dao.consultarFirma1(codFirma1);
			Image firm1 = Image.getInstance(imageByte);
			firm1 = Image.getInstance(firm1);
			firm1.scalePercent(50);

			dao = new ConsultaImagen();
			String codFirma2 = Constante.FIRMA2;
			imageByte = dao.consultarFirma2(codFirma2);
			Image firm2 = Image.getInstance(imageByte);
			firm2 = Image.getInstance(firm2);
			firm2.scalePercent(50);

			Image logoBN = Image
					.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
			logoBN = Image.getInstance(logoBN);
			logoBN.setAlignment(Image.NO_BORDER);
			logoBN.setAlignment(Image.RIGHT);
			logoBN.scalePercent(60f);

			document.add(logoBN);

			String tasaPoliza = solicitud.getSDESGRAVAMEN();

			document.add(creaPDFHojaResumen(hojaResumen, tasaPoliza, montoAbonadoPrestamo, saldoPrestamo, saldoInteres,
					saldoTasaIC, saldoTasaIM, sSeguroDesgravamen, nPolizaDesgravamen, sPrimaCP, sEmisionCP, nPolizaCP,
					sSeguroCP, sEndosoCP, sEnvioCP, siPagint, finivigencia, prefijoCP, noamortcap,
					cronograma.getSDESGRAVAMEN(), cronograma.getNCUOTAS(), seguroDesgravamenPrestamo,
					hojaResumen.getCIA_SEG_DESGV(), (solicitud.getCORRESPONDENCIA()).substring(2)));

			PdfPTable table = new PdfPTable(2);
			table.setWidthPercentage(100);
			table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

			String agen = (solicitud.getAGENCIA()).substring(0, 4);
			// String agen = "0010";

			System.out.println("Agenciaaaa filtro" + agen);

			ConsultaImagen daoAgencia = null;

			daoAgencia = new ConsultaImagen();

			String agenDB = dao.consultarAgencia(agen);

			// valida agencia

			if (agen.equals(agenDB)) {

				table.addCell(firm1);
				table.addCell(firm2);
				document.add(table);

				PdfPTable linea = new PdfPTable(2);
				linea.setWidthPercentage(100);
				linea.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea.addCell("      _______________________________");
				linea.addCell("      _______________________________");
				document.add(linea);

				Paragraph firma = new Paragraph("FIRMA DEL BANCO");
				firma.getFont().setSize(10);

				PdfPTable banco = new PdfPTable(2);
				banco.setWidthPercentage(100);
				banco.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				banco.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				banco.addCell(firma);
				banco.addCell(firma);
				document.add(banco);

				dao = new ConsultaImagen();
				String codNombre1 = Constante.NOMBRE1;
				String nombre1 = dao.consultarNombre1(codNombre1);

				String codNombre2 = Constante.NOMBRE2;
				String nombre2 = dao.consultarNombre2(codNombre2);

				Paragraph nom1 = new Paragraph(nombre1);
				nom1.getFont().setSize(10);
				Paragraph nom2 = new Paragraph(nombre2);
				nom2.getFont().setSize(10);

				PdfPTable nombre = new PdfPTable(2);
				nombre.setWidthPercentage(100);
				nombre.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				nombre.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				nombre.addCell(nom1);
				nombre.addCell(nom2);
				document.add(nombre);

				PdfPTable espacio1 = new PdfPTable(1);
				espacio1.setWidthPercentage(100);
				espacio1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				espacio1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
				espacio1.addCell("");
				document.add(espacio1);

				Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
				firma2.getFont().setSize(10);

				PdfPTable wee = new PdfPTable(1);
				wee.setWidthPercentage(100);
				wee.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				wee.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
				PdfPCell cell3 = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
				cell3.setBorder(Rectangle.NO_BORDER);
				cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell3.setColspan(1);
				cell3.setPadding(0);
				wee.addCell(cell3);
				wee.addCell(cell3);
				document.add(wee);

				PdfPTable linea3 = new PdfPTable(1);
				linea3.setWidthPercentage(100);
				linea3.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

				PdfPCell cell2 = new PdfPCell(
						new Phrase("F.OP-433-E-V05-GPIF", FontFactory.getFont(FontFactory.HELVETICA, 7)));
				cell2.setBorder(Rectangle.NO_BORDER);
				cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell2.setColspan(1);
				cell2.setPadding(0);

				linea3.addCell(cell2);
				document.add(linea3);

				PdfPTable piePagina = new PdfPTable(1);
				piePagina.setWidthPercentage(100);
				piePagina.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				piePagina.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				PdfPCell cell = new PdfPCell(
						new Phrase("Pág. 02 de 02", FontFactory.getFont(FontFactory.HELVETICA, 7)));
				cell.setBorder(Rectangle.NO_BORDER);
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setColspan(1);
				cell.setPadding(0);
				piePagina.addCell(cell);

			} else

			{

				PdfPTable lineaEs1 = new PdfPTable(2);
				lineaEs1.setWidthPercentage(100);
				lineaEs1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				lineaEs1.addCell("        ");
				lineaEs1.addCell("        ");
				document.add(lineaEs1);

				PdfPTable lineaEs = new PdfPTable(2);
				lineaEs.setWidthPercentage(100);
				lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				lineaEs.addCell("        ");
				lineaEs.addCell("        ");
				document.add(lineaEs);

				document.add(lineaEs);

				document.add(lineaEs);

				document.add(lineaEs);

				PdfPTable linea = new PdfPTable(2);
				linea.setWidthPercentage(100);
				linea.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea.addCell("      _______________________________");
				linea.addCell("      _______________________________");
				document.add(linea);

				// Paragraph firma = new Paragraph("FIRMA DEL BANCO");
				// firma.getFont().setSize(10);

				PdfPTable linea31 = new PdfPTable(2);
				linea31.setWidthPercentage(100);

				linea31.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea31.addCell("                      FIRMA DEL BANCO         ");
				linea31.addCell("                      FIRMA DEL BANCO           ");

				document.add(linea31);

				PdfPTable espacio1 = new PdfPTable(1);
				espacio1.setWidthPercentage(100);
				espacio1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				espacio1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
				PdfPCell cell3 = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
				cell3.setBorder(Rectangle.NO_BORDER);
				cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell3.setColspan(1);
				cell3.setPadding(0);
				espacio1.addCell(cell3);
				espacio1.addCell(cell3);
				document.add(espacio1);

				PdfPTable linea3 = new PdfPTable(1);
				linea3.setWidthPercentage(100);
				linea3.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

				PdfPCell cell2 = new PdfPCell(
						new Phrase("F.OP-433-E-V05-GPIF", FontFactory.getFont(FontFactory.HELVETICA, 7)));
				cell2.setBorder(Rectangle.NO_BORDER);
				cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell2.setColspan(1);
				cell2.setPadding(0);

				linea3.addCell(cell2);
				document.add(linea3);

				PdfPTable piePagina = new PdfPTable(1);
				piePagina.setWidthPercentage(100);
				piePagina.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				piePagina.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				PdfPCell cell = new PdfPCell(
						new Phrase("Pág. 02 de 02", FontFactory.getFont(FontFactory.HELVETICA, 7)));
				cell.setBorder(Rectangle.NO_BORDER);
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setColspan(1);
				cell.setPadding(0);
				piePagina.addCell(cell);

			}

			document.add(codigo());

			// impreso

			String correspPoliza = correspondenciaCliente.substring(0, 1);

			if (correspPoliza.equalsIgnoreCase("N") || correspPoliza.equalsIgnoreCase("V")) {

				ConsultaImagen daoSolicitud1_1 = null;
				byte[] imageByteSolicitud1_1 = null;

				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(6);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					// String key = g.getKey();
					PdfReader reader2 = new PdfReader(pdf);
					int numeroPagina = reader2.getNumberOfPages();

					for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
						if (pageNum == 1) {

							document.add(espacios());
							document.add(creaPDFPolizaUnoAdulto(telefonoCliente1, secpoliza, acliente, finivigencia,
									tipodoc, sexo, fenac, nacionalidad, correoCliente, estcivil, telfijo,
									celularCliente1, ctrabajo, direccion, distritoCliente, provinciaCliente,
									dptoCliente, nprestamo, agencia, codvendedor));

						}
					}
					document.newPage();

				}

				Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(7);
				for (Entry<String, InputStream> g : resultado2.entrySet()) {
					InputStream pdf = g.getValue();
					// String key = g.getKey();
					PdfReader reader2 = new PdfReader(pdf);
					int numeroPagina = reader2.getNumberOfPages();
					for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
						if (pageNum == 1) {

							document.add(espacios());
							document.add(creaPDFPolizaDosAdulto(secpoliza, cuota, finivigencia, ftervigencia, nprestamo,
									acliente, tipodoc, correoCliente, direccion));
						}
					}
					document.newPage();

				}

				ConsultaImagen daoCondiciones1 = null;
				byte[] imageByteCondiciones1 = null;

				// hojas poliza
				Map<String, InputStream> resultadotem = new ConsultaDocumentoImpl().buscarPdf(3);
				for (Entry<String, InputStream> g : resultadotem.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
					}
					document.newPage();

				}

			} else {

				if (correspPoliza.equalsIgnoreCase("S") || correspPoliza.equalsIgnoreCase("T")) {

					Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(5);
					for (Entry<String, InputStream> g : resultado.entrySet()) {
						InputStream pdf = g.getValue();
						// String key = g.getKey();
						PdfReader reader2 = new PdfReader(pdf);
						int numeroPagina = reader2.getNumberOfPages();

						for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
							document.newPage();
							PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
							copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
							if (pageNum == 1) {

								document.add(espacios());
								document.add(creaPDFPolizaUnoAdulto(telefonoCliente1, secpoliza, acliente, finivigencia,
										tipodoc, sexo, fenac, nacionalidad, correoCliente, estcivil, telfijo,
										celularCliente1, ctrabajo, direccion, distritoCliente, provinciaCliente,
										dptoCliente, nprestamo, agencia, codvendedor));

							}
						}
						document.newPage();

					}
					Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(4);
					for (Entry<String, InputStream> g : resultado2.entrySet()) {
						InputStream pdf = g.getValue();
						// String key = g.getKey();
						PdfReader reader2 = new PdfReader(pdf);
						int numeroPagina = reader2.getNumberOfPages();

						for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
							document.newPage();
							PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
							copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
							if (pageNum == 1) {

								document.add(espacios());
								document.add(creaPDFPolizaDosAdultoOtro(secpoliza, cuota, finivigencia, ftervigencia,
										nprestamo, acliente, tipodoc, correoCliente, direccion));
							}
						}
						document.newPage();

					}

					Map<String, InputStream> resultadotem = new ConsultaDocumentoImpl().buscarPdf(2);
					for (Entry<String, InputStream> g : resultadotem.entrySet()) {
						InputStream pdf = g.getValue();
						PdfReader readerTemporal = new PdfReader(pdf);
						int numeroPagina = readerTemporal.getNumberOfPages();

						for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
							document.newPage();
							PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
							copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
						}

					}

					PdfPTable linea4 = new PdfPTable(2);
					linea4.setWidthPercentage(100);
					linea4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea4.addCell("                                              ");
					linea4.addCell("                                              ");
					document.add(linea4);

					PdfPTable linea444 = new PdfPTable(2);
					linea444.setWidthPercentage(100);
					linea444.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea444.addCell("                                              ");
					linea444.addCell("                                              ");
					document.add(linea4);

					PdfPTable linea5 = new PdfPTable(2);
					linea5.setWidthPercentage(100);
					linea5.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea5.addCell("                                              ");
					linea5.addCell("                                              ");
					/*
					 * document.add(linea5);
					 * 
					 * document.add(linea5);
					 * 
					 * document.add(linea5);
					 * 
					 * 
					 * document.add(linea5);
					 */

				} else {

					if (correspPoliza.equalsIgnoreCase("E")) {

					}

				}

			}

			Image logoPositiva = Image
					.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/positiva.jpg"));
			logoPositiva = Image.getInstance(logoPositiva);
			logoPositiva.scalePercent(50);

			if (prima.equalsIgnoreCase("0.00")) {

				document.newPage();
				PdfPTable linea4 = new PdfPTable(2);
				linea4.setWidthPercentage(100);
				linea4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea4.addCell("                                              ");
				linea4.addCell("                                              ");
				document.add(linea4);

				PdfPTable linea444 = new PdfPTable(2);
				linea444.setWidthPercentage(100);
				linea444.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea444.addCell("                                              ");
				linea444.addCell("                                              ");
				document.add(linea4);

				PdfPTable linea5 = new PdfPTable(2);
				linea5.setWidthPercentage(100);
				linea5.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea5.addCell("                                              ");
				linea5.addCell("                                              ");

				document.add(creaPDFCartaInstruccion(fechaSolicitudPrestamo, cLaboralCliente, entidadCliente, aCliente1,
						dniCliente1, aGarante1, dniGarante1));

				// Clausulas generales y especificas

				// doc3 exportarprestamo
				System.out.println("PRIMA CERO DOC3 CLAUSULA-EXPORTPREST");
				Image logoBN2 = Image
						.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
				logoBN2 = Image.getInstance(logoBN2);
				logoBN2.setAlignment(Image.NO_BORDER);
				logoBN2.setAlignment(Image.LEFT);
				logoBN2.scalePercent(60f);
				Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(0);
				for (Entry<String, InputStream> g : resultado2.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
					}
					document.newPage();

				}
				// document.add(Testeopdf.clausulasGPageFinal2(fechaEnv,dniCliente1,aCliente1,firm1,firm2));

				String parametro = "0";
				if (agen.equals(agenDB)) {

					document.add(Testeopdf.clausulasGPageFinal2(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
							parametro, aGarante1, dniGarante1));

				} else {

					Image firmVacio = null;

					document.add(Testeopdf.clausulasGPageFinal2(fechaEnv, dniCliente1, aCliente1, firmVacio, firmVacio,
							agen, parametro, aGarante1, dniGarante1));

				}

				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(1);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
					}
					document.newPage();

				}

				if (agen.equals(agenDB)) {

					document.add(Testeopdf.clausulasGPageFinal3(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
							aGarante1, dniGarante1, parametro));

				} else {

					Image firmVacio = null;

					document.add(Testeopdf.clausulasGPageFinal3(fechaEnv, dniCliente1, aCliente1, firmVacio, firmVacio,
							agen, aGarante1, dniGarante1, parametro));

				}
				document.newPage();

				PdfPTable fechadoc = new PdfPTable(2);
				fechadoc.setWidthPercentage(100);
				fechadoc.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				fechadoc.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				fechadoc.addCell("  FECHA   ");

				document.add(fechadoc);

				// document.add(prueba());

				document.add(creaPDFCronograma(aGarante1, direccGarante, tceaPrestamo, telefonoCliente1,
						fechaDesembolso, aCliente, dniClienteCronograma, tlfCliente, dCliente, aGarante, dniGarante,
						deudaTotal, cronograma.getSPRESTAMO(), nPrestamoCronograma, tasa, tcea, seguroCP,
						cronograma.getNCUOTAS(), cronograma.getFVCTO(), cronograma.getSAMORTIZACION(),
						cronograma.getSINTERES(), cronograma.getSDESGRAVAMEN(), cronograma.getSDCUOTA(),
						cronograma.getACUOTA()));

				// crono1

				dao = new ConsultaImagen();
				String codFirma12 = Constante.FIRMA1;
				imageByte = dao.consultarFirma1(codFirma12);
				Image firm12 = Image.getInstance(imageByte);
				firm12 = Image.getInstance(firm12);
				firm12.scalePercent(50);

				dao = new ConsultaImagen();
				String codFirma22 = Constante.FIRMA2;
				imageByte = dao.consultarFirma2(codFirma22);
				Image firm22 = Image.getInstance(imageByte);
				firm22 = Image.getInstance(firm22);
				firm22.scalePercent(50);

				PdfPTable table2 = new PdfPTable(2);
				table2.setWidthPercentage(100);
				table2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

				String agenCrono = (solicitud.getAGENCIA()).substring(0, 4);

				String agenDBCrono = dao.consultarAgencia(agenCrono);

				if (agenCrono.equals(agenDBCrono)) {

					table2.addCell(firm1);
					table2.addCell(firm2);
					document.add(table2);

					dao = new ConsultaImagen();
					String codNombre12 = Constante.NOMBRE1;
					String nombre12 = dao.consultarNombre1(codNombre12);

					String codNombre22 = Constante.NOMBRE2;
					String nombre22 = dao.consultarNombre2(codNombre22);

					Paragraph nom12 = new Paragraph(nombre12);
					nom12.getFont().setSize(10);
					Paragraph nom22 = new Paragraph(nombre22);
					nom22.getFont().setSize(10);

					PdfPTable nombre222 = new PdfPTable(2);
					nombre222.setWidthPercentage(100);
					nombre222.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					nombre222.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					nombre222.addCell(nom12);
					nombre222.addCell(nom22);
					document.add(nombre222);

					PdfPTable espacio12 = new PdfPTable(1);
					espacio12.setWidthPercentage(100);
					espacio12.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					espacio12.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
					espacio12.addCell("");
					document.add(espacio12);

				} else

				{

					PdfPTable lineaEs1 = new PdfPTable(2);
					lineaEs1.setWidthPercentage(100);
					lineaEs1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs1.addCell("        ");
					lineaEs1.addCell("        ");
					document.add(lineaEs1);

					PdfPTable lineaEs = new PdfPTable(2);
					lineaEs.setWidthPercentage(100);
					lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs.addCell("        ");
					lineaEs.addCell("        ");
					document.add(lineaEs);

				}
				/*
				 * PdfPTable lineaEs = new PdfPTable(2); lineaEs.setWidthPercentage(100);
				 * lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				 * table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				 * lineaEs.addCell("        "); lineaEs.addCell("        ");
				 * document.add(lineaEs);
				 * 
				 * PdfPTable lineaEs1 = new PdfPTable(2); lineaEs.setWidthPercentage(100);
				 * lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				 * table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				 * lineaEs.addCell("        "); lineaEs.addCell("        ");
				 * document.add(lineaEs1);
				 * 
				 * PdfPTable lineaEs2 = new PdfPTable(2); lineaEs.setWidthPercentage(100);
				 * lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				 * table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				 * lineaEs.addCell("        "); lineaEs.addCell("        ");
				 * document.add(lineaEs2);
				 * 
				 * PdfPTable lineaEs3 = new PdfPTable(2); lineaEs.setWidthPercentage(100);
				 * lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				 * table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				 * lineaEs.addCell("        "); lineaEs.addCell("        ");
				 * document.add(lineaEs3);
				 * 
				 * PdfPTable lineaEs4 = new PdfPTable(2); lineaEs.setWidthPercentage(100);
				 * lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				 * table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				 * lineaEs.addCell("        "); lineaEs.addCell("        ");
				 * document.add(lineaEs4);
				 */

				PdfPTable linea2 = new PdfPTable(2);
				linea2.setWidthPercentage(100);
				linea2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea2.addCell("      ____________________________");
				linea2.addCell("      ____________________________");
				document.add(linea2);

				Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
				firma2.getFont().setSize(10);

				PdfPTable banco2 = new PdfPTable(2);
				banco2.setWidthPercentage(100);
				banco2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				banco2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				banco2.addCell(firma2);
				banco2.addCell(firma2);
				document.add(banco2);

			} else {

				Map<String, InputStream> resultado3 = new ConsultaDocumentoImpl().buscarPdf(8);
				for (Entry<String, InputStream> g : resultado3.entrySet()) {
					InputStream pdf = g.getValue();
					// String key = g.getKey();
					PdfReader reader2 = new PdfReader(pdf);
					int numeroPagina = reader2.getNumberOfPages();
					for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
						if (pageNum == 1) {

							document.add(espacios(3));
							document.add(creaPDFPolizaCertificadoSeguroCuotaPPre(certificado, logoPositiva, secpoliza,
									acliente, finivigencia, ftervigencia, tipodoc, sexo, fenac, nacionalidad, estcivil,
									telefonoCliente1, celularCliente1, ctrabajo, direccion, dis, correoCliente,
									nprestamo, oficina, codvendedor, montoSolicitadoPrestamo, numeroCuotasPrestamo,
									tasaPrestamo, tceaPrestamo, prima, 9));
						}
					}
					document.newPage();

				}

				// ---------------------------------------- FIN SEGURO CUOTA PROTEGIDA
				// 2-----------------------------------------

				document.add(creaPDFCartaInstruccion(fechaSolicitudPrestamo, cLaboralCliente, entidadCliente, aCliente1,
						dniCliente1, aGarante1, dniGarante1));

				// doc4 exportarprestamo
				System.out.println("PRIMA DIEFERENTE CERO DOC4 CLAUSULA-EXPORTPREST");

				Image logoBN2 = Image
						.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
				logoBN2 = Image.getInstance(logoBN2);
				logoBN2.setAlignment(Image.NO_BORDER);
				logoBN2.setAlignment(Image.LEFT);
				logoBN2.scalePercent(60f);

				Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(0);
				for (Entry<String, InputStream> g : resultado2.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
					}
					document.newPage();

				}

				String parametro = "0";
				document.add(Testeopdf.clausulasGPageFinal2(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						parametro, aGarante1, dniGarante1));
				// OTRO PDF
				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(1);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
					}
					document.newPage();

				}
				document.add(Testeopdf.clausulasGPageFinal3(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						aGarante1, dniGarante1, parametro));
				document.newPage();

				/*
				 * ConsultaImagen daoClausulasEsp2 = null; byte[] imageByteClausulasEsp2= null;
				 * daoClausulasEsp2 = new ConsultaImagen(); String clausulasEsp2 = "0061";
				 * imageByteClausulasEsp2
				 * =daoClausulasEsp2.consultarPolizaParte2(clausulasEsp2); Image condEsp2=
				 * Image.getInstance(Util.reducirCalidadImagen(imageByteClausulasEsp2));
				 * condEsp2.setBorder(Image.BOX); condEsp2.setBorderWidth(5);
				 * condEsp2.setBorderColor(BaseColor.WHITE); condEsp2 .scaleToFit(550, 200);
				 * document.add(condEsp2);
				 */

				PdfPTable fechadoc = new PdfPTable(2);
				fechadoc.setWidthPercentage(100);
				fechadoc.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				fechadoc.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				fechadoc.addCell("  FECHA   ");

				document.add(fechadoc);

				// document.add(prueba());

				document.add(creaPDFCronograma(aGarante1, direccGarante, tceaPrestamo, telefonoCliente1,
						fechaDesembolso, aCliente, dniClienteCronograma, tlfCliente, dCliente, aGarante, dniGarante,
						deudaTotal, cronograma.getSPRESTAMO(), nPrestamoCronograma, tasa, tcea, seguroCP,
						cronograma.getNCUOTAS(), cronograma.getFVCTO(), cronograma.getSAMORTIZACION(),
						cronograma.getSINTERES(), cronograma.getSDESGRAVAMEN(), cronograma.getSDCUOTA(),
						cronograma.getACUOTA()));

				/*
				 * 
				 * dao = new ConsultaImagen(); String codFirma12 = Constante.FIRMA1; imageByte
				 * =dao.consultarFirma1(codFirma12); Image firm12 =
				 * Image.getInstance(imageByte); firm12 = Image.getInstance(firm12);
				 * firm12.scalePercent(50);
				 * 
				 * 
				 * 
				 * dao = new ConsultaImagen(); String codFirma22 = Constante.FIRMA2; imageByte
				 * =dao.consultarFirma2(codFirma22); Image firm22 =
				 * Image.getInstance(imageByte); firm22 = Image.getInstance(firm22);
				 * firm22.scalePercent(50);
				 * 
				 * 
				 * 
				 * PdfPTable table2 = new PdfPTable(2); table2.setWidthPercentage(100);
				 * table2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				 * table2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				 * 
				 */

				String agenCrono = (solicitud.getAGENCIA()).substring(0, 4);

				String agenDBCrono = dao.consultarAgencia(agenCrono);

				if (agenCrono.equals(agenDBCrono)) {
					// crono2

					PdfPTable table2 = new PdfPTable(2);
					table2.setWidthPercentage(100);
					table2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

					table2.addCell(firm1);
					table2.addCell(firm2);
					document.add(table2);

					dao = new ConsultaImagen();
					String codNombre1 = Constante.NOMBRE1;
					String nombre1 = dao.consultarNombre1(codNombre1);

					String codNombre2 = Constante.NOMBRE2;
					String nombre2 = dao.consultarNombre2(codNombre2);

					Paragraph nom1 = new Paragraph(nombre1);
					nom1.getFont().setSize(10);
					Paragraph nom2 = new Paragraph(nombre2);
					nom2.getFont().setSize(10);

					PdfPTable nombre = new PdfPTable(2);
					nombre.setWidthPercentage(100);
					nombre.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					nombre.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					nombre.addCell(nom1);
					nombre.addCell(nom2);
					document.add(nombre);

					//

					PdfPTable linea2 = new PdfPTable(2);
					linea2.setWidthPercentage(100);
					linea2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					linea2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea2.addCell("    _________________________");
					linea2.addCell("    _________________________");
					document.add(linea2);

					Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
					firma2.getFont().setSize(10);

					PdfPTable banco2 = new PdfPTable(2);
					banco2.setWidthPercentage(100);
					banco2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					banco2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					banco2.addCell(firma2);
					banco2.addCell(firma2);
					document.add(banco2);

					/*
					 * dao = new ConsultaImagen(); String codNombre12 = Constante.NOMBRE1; String
					 * nombre12 =dao.consultarNombre1(codNombre12);
					 * 
					 * String codNombre22 = Constante.NOMBRE2; String nombre22
					 * =dao.consultarNombre2(codNombre22);
					 * 
					 * Paragraph nom12 = new Paragraph(nombre12); nom12.getFont().setSize(10);
					 * Paragraph nom22 = new Paragraph(nombre22); nom22.getFont().setSize(10);
					 * 
					 * PdfPTable nombre222 = new PdfPTable(2); nombre222.setWidthPercentage(100);
					 * nombre222.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					 * nombre222.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					 * nombre222.addCell(nom12); nombre222.addCell(nom22); document.add(nombre222);
					 */

				} else

				{

					PdfPTable lineaEs1 = new PdfPTable(2);
					lineaEs1.setWidthPercentage(100);
					lineaEs1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs1.addCell("        ");
					lineaEs1.addCell("        ");
					document.add(lineaEs1);

					PdfPTable lineaEs = new PdfPTable(2);
					lineaEs.setWidthPercentage(100);
					lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs.addCell("        ");
					lineaEs.addCell("        ");
					document.add(lineaEs);

					PdfPTable linea2 = new PdfPTable(2);
					linea2.setWidthPercentage(100);
					linea2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					linea2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea2.addCell("      _______________________________");
					linea2.addCell("      _______________________________");
					document.add(linea2);

					Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
					firma2.getFont().setSize(10);

					PdfPTable banco2 = new PdfPTable(2);
					banco2.setWidthPercentage(100);
					banco2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					banco2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					banco2.addCell(firma2);
					banco2.addCell(firma2);
					document.add(banco2);

				}

				// firmacrono

			}

			// FIN DEL CRONOGRAMA

		} catch (DocumentException e) {

		}
		// cierredocprestamo
		document.close();

		byte[] ba = baos.toByteArray();

		// Datos para conectar al servidor FTP
		String ftp = "10.7.10.26"; // También puede ir la IP
		int puerto = 7587;
		String user = "dcribillero";
		String password = "00130gnv";
		String remotePath = "/ptmos_multired/gnv/CALLCENTER";

		String ftpUrl = "ftp://%s:%s@%s/%s;type=i";
		String host1 = "10.7.10.26";
		String user1 = "dcribillero";
		String pass = "00130gnv";
		// String filePath = "D:/Test/Prestamo.pdf";
		String uploadPath = "ptmos_multired/gnv/CALLCENTER";

		FTPClient ftpClient = new FTPClient();
		try {

			ftpClient.connect(ftp, puerto);
			ftpClient.login(user, pass);
			ftpClient.enterLocalPassiveMode();

			ftpClient.setFileType(FTP.BINARY_FILE_TYPE);

			byte[] bytes2 = baos.toByteArray();
			InputStream inputStream2 = new ByteArrayInputStream(bytes2);

			/*
			 * // APPROACH #1: uploads first file using an InputStream File firstLocalFile =
			 * new File("D:/Test/Prestamo.pdf");
			 * 
			 * String firstRemoteFile = "ptmos_multired/gnv/CALLCENTER/Prestamo.pdf";
			 * InputStream inputStream = new FileInputStream(firstLocalFile);
			 * 
			 * System.out.println("Start uploading first file"); boolean done =
			 * ftpClient.storeFile(firstRemoteFile, inputStream2); inputStream2.close(); if
			 * (done) { System.out.println("The first file is uploaded successfully."); }
			 * 
			 */

			// APPROACH #2: uploads second file using an OutputStream
			// File secondLocalFile = new File("D:/Test/Prestamo2.pdf");
			String secondRemoteFile = "ptmos_multired/gnv/CALLCENTER/Prestamo.pdf";
			// inputStream2 = new FileInputStream(secondLocalFile);

			System.out.println("Start uploading second file");
			OutputStream outputStream = ftpClient.storeFileStream(secondRemoteFile);
			byte[] bytesIn = new byte[4096];
			int read = 0;

			while ((read = inputStream2.read(bytesIn)) != -1) {
				outputStream.write(bytesIn, 0, read);
			}
			inputStream2.close();
			outputStream.close();

			boolean completed = ftpClient.completePendingCommand();
			if (completed) {
				System.out.println("The second file is uploaded successfully.");
			}

		} catch (IOException ex) {
			System.out.println("Error: " + ex.getMessage());
			ex.printStackTrace();
		} finally {
			try {
				if (ftpClient.isConnected()) {
					ftpClient.logout();
					ftpClient.disconnect();
				}
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}

		// envio a base de datos

		Calendar fecha = new GregorianCalendar();

		int ano = fecha.get(Calendar.YEAR);
		int mes = (fecha.get(Calendar.MONTH)) + 1;
		int dia = fecha.get(Calendar.DAY_OF_MONTH);

		String anoo = String.valueOf(ano);
		String mess = String.valueOf(mes);
		String diaa = String.valueOf(dia);

		if (mess.length() == 1) {
			mess = "0" + mess;
		}
		if (diaa.length() == 1) {
			diaa = "0" + diaa;
		}
		String fechaEnv = diaa + "/" + mess + "/" + anoo;

		int hora = fecha.get(Calendar.HOUR_OF_DAY);
		int min = fecha.get(Calendar.MINUTE);
		int seg = fecha.get(Calendar.SECOND);

		String horaEnv = hora + ":" + min + ":" + seg;
		String horaLec = "";
		String fechaLec = "";
		String ipLec = "";
		String estado = "";
		String campo1 = "1"; // Primera vez generado
		String campo2 = correoGarante.trim();
		String nombres = aCliente;
		String age = ((solicitud.getAGENCIA()).substring(4));
		// String age= "FIOO";
		Principal codUsu = request.getUserPrincipal();

		// usuario de seguridad
		String usuario = codUsu.getName();

		CargarDocumento cargarPrestamo = new CargarDocumento();

		// String PrestamoConsult =
		// cargarPrestamo.prestamoConsultaGuardo((nro_prestamo).trim());

		// OBTENER EL CODIGO DE OPERACION

		String ope = Funciones.eliminarCerosAlaIzquierda(poliza.getCelular());

		String consultOpe = cargarPrestamo.prestamoConsultaGuardo((nro_prestamo).trim());

		// if((PrestamoConsult.equalsIgnoreCase("1")) ||
		// (PrestamoConsult.equalsIgnoreCase("2"))){

		if (ope.equalsIgnoreCase(consultOpe)) {

			response.setHeader("Expires", "0");
			response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
			response.setHeader("Pragma", "public");
			// setting the content type
			response.setContentType("application/pdf");
			// the contentlength
			response.setContentLength(baos.size());
			// write ByteArrayOutputStream to the ServletOutputStream
			ServletOutputStream outputStream = response.getOutputStream();
			baos.writeTo(outputStream);
			outputStream.flush();
			outputStream.close();
			System.out.println("Cancelacion");

		} else {
			// Pruebas para base de datos
			String PrestamoConsult = cargarPrestamo.prestamoConsultaGuardo((nro_prestamo).trim());

			if (PrestamoConsult.equalsIgnoreCase("")) {
//TODO ejmplo bd
				String prestamoInsert = cargarPrestamo.prestamo(nro_prestamo, "PRESTAMO", ba, poliza.getEmail(),
						fechaEnv, horaEnv, fechaLec, horaLec, ipLec, estado, campo1, campo2, nombres.trim(), age.trim(),
						usuario, ope);

			} else {

				String prestamoActualizaDoc = cargarPrestamo.prestamoActualizaDoc(nro_prestamo, ba,
						(poliza.getEmail()).trim(), fechaEnv, horaEnv, campo1, campo2, nombres.trim(), age.trim(),
						usuario, ope);

				// if(prestamoActualizaDoc.equalsIgnoreCase("ACTUALIZADO")){

				// request.setAttribute("msje","Error 21");

				// }

			}

			// findocprestamo
			response.setHeader("Expires", "0");
			response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
			response.setHeader("Pragma", "public");
			// setting the content type
			response.setContentType("application/pdf");
			// the contentlength
			response.setContentLength(baos.size());
			// write ByteArrayOutputStream to the ServletOutputStream
			ServletOutputStream outputStream = response.getOutputStream();
			baos.writeTo(outputStream);
			outputStream.flush();
			outputStream.close();
			System.out.println("Cancelacion");
		}

	}

	private PdfPTable espacios() {

		PdfPTable espacio = new PdfPTable(5);
		espacio.setTotalWidth(PageSize.A4.getWidth() - 70);

		espacio.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell celdaepsacio;

		celdaepsacio = new PdfPCell(new Phrase(" "));
		celdaepsacio.setBorder(Rectangle.NO_BORDER);
		celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		celdaepsacio.setColspan(5);
		espacio.addCell(celdaepsacio);

		celdaepsacio = new PdfPCell(new Phrase(" "));
		celdaepsacio.setBorder(Rectangle.NO_BORDER);
		celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		celdaepsacio.setColspan(5);
		espacio.addCell(celdaepsacio);

		celdaepsacio = new PdfPCell(new Phrase(" "));
		celdaepsacio.setBorder(Rectangle.NO_BORDER);
		celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		celdaepsacio.setColspan(5);
		espacio.addCell(celdaepsacio);

		celdaepsacio = new PdfPCell(new Phrase(" "));
		celdaepsacio.setBorder(Rectangle.NO_BORDER);
		celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		celdaepsacio.setColspan(5);
		espacio.addCell(celdaepsacio);

		celdaepsacio = new PdfPCell(new Phrase(" "));
		celdaepsacio.setBorder(Rectangle.NO_BORDER);
		celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		celdaepsacio.setColspan(5);
		espacio.addCell(celdaepsacio);

		celdaepsacio = new PdfPCell(new Phrase(" "));
		celdaepsacio.setBorder(Rectangle.NO_BORDER);
		celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		celdaepsacio.setColspan(5);
		espacio.addCell(celdaepsacio);
		return espacio;
	}

	private PdfPTable espacios(int valor) {

		PdfPTable espacio = new PdfPTable(5);
		espacio.setTotalWidth(PageSize.A4.getWidth() - 70);

		espacio.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell celdaepsacio;

		celdaepsacio = new PdfPCell(new Phrase(" "));
		celdaepsacio.setBorder(Rectangle.NO_BORDER);
		celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		celdaepsacio.setColspan(5);
		espacio.addCell(celdaepsacio);

		celdaepsacio = new PdfPCell(new Phrase(" "));
		celdaepsacio.setBorder(Rectangle.NO_BORDER);
		celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		celdaepsacio.setColspan(5);
		espacio.addCell(celdaepsacio);

		celdaepsacio = new PdfPCell(new Phrase(" "));
		celdaepsacio.setBorder(Rectangle.NO_BORDER);
		celdaepsacio.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		celdaepsacio.setColspan(5);
		espacio.addCell(celdaepsacio);
		return espacio;
	}

	// testclausula

	@RequestMapping(value = "testpdf", method = RequestMethod.POST)
	public void testpdf(HttpServletRequest request, HttpServletResponse response) throws Exception {
		System.out.println("Inicio test metodo post");

		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		response.setContentType("application/pdf");
		response.addHeader("Content-Disposition", "attachment; filename=" + "Prestamo_Multired_testClausuala.pdf");

		// -->> iitext pdf creacion
		// flujo de stream para descargar el documento
		ByteArrayOutputStream baos = new ByteArrayOutputStream();

		// documento a contener los elementos
		Document document = new Document();

		// Obejtos para escribir y copiar el documento
		PdfWriter copy = null;

		PdfCopy pdfCopy = null;

		try {
			// Creacion de
			// pdfCopy = new PdfCopy(document, baos);
			// pdfCopy.setInitialLeading(5);
			copy = PdfWriter.getInstance(document, baos);
			copy.setInitialLeading(5);
		} catch (DocumentException e) {
			System.out.println("Error creacion instancia de pdfcopy " + e.getMessage());

		}

		document.open();

		try {

			Image logoBN2 = Image
					.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
			logoBN2 = Image.getInstance(logoBN2);
			logoBN2.setAlignment(Image.NO_BORDER);
			logoBN2.setAlignment(Image.LEFT);
			logoBN2.scalePercent(60f);

			document.add(logoBN2);
			document.add(clausulasG());
			document.add(clausulasG());
			document.add(clausulasG());
			document.add(clausulasG());
			System.out.println("Exito agregando hojas anteriores");
			ConsultaImagen dao = null;
			byte[] imageByte = null;

			dao = new ConsultaImagen();
			String codFirma1 = Constante.FIRMA1;
			imageByte = dao.consultarFirma1(codFirma1);
			Image firm1 = Image.getInstance(imageByte);
			firm1 = Image.getInstance(firm1);
			firm1.scalePercent(50);

			dao = new ConsultaImagen();
			String codFirma2 = Constante.FIRMA2;
			imageByte = dao.consultarFirma2(codFirma2);
			Image firm2 = Image.getInstance(imageByte);
			firm2 = Image.getInstance(firm2);
			firm2.scalePercent(50);

			for (int i = 0; i < 6; i++) {

				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(i);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					String key = g.getKey();
					PdfReader reader2 = new PdfReader(pdf);
					int numeroPagina = reader2.getNumberOfPages();
					int tipo = 0;
					if (key.equals("pdf_ClausulaGeneral") || key.equals("pdf_ClausulaEspecifica")) {
						numeroPagina -= 1;
						tipo = (key.equals("pdf_ClausulaGeneral")) ? 1 : 2;
					}

					for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
						// copy.setPageEmpty(false);
						// document.add((Element) page);

						// copy.newPage(); // Crear una nueva página en el
						// documento final
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar
																			// la
																			// página
																			// importada
						if (pageNum == 1 && key.equals("pdf_3176_SolicitudSeguroRetorno")) {

							document.add(creaPDFPolizaUnoAdultoPre(" telefonoCliente1", "   secpoliza", "   acliente",
									"   finivigencia", "   tipodoc", "   sexo", "   fenac", "   nacionalidad",
									" correoCliente", "   estcivil", "   telfijo", "   telmovil", "   ctrabajo",
									"   direccion", "distritoCliente", "   provinciaCliente", "   dptoCliente",
									"   nprestamo", "   agencia", "  codvendedor"));

						}
						if (pageNum == 1 && key.equals("pdf_3175_PolizaIndividualRetorno")) {

							document.add(creaPDFPolizaDosAdultoPre(" secpoliza", "   cuota", "   finivigencia",
									"   ftervigencia", "   nprestamo", " acliente", "   tipodoc", "   correoCliente",
									"   direccion"));

						}
						System.out.println("agregada hoja " + pageNum);
					}

					String parametro = "1";
					String agen = "";
					System.out.println("Exito agregando hojas de claue");
					String aGarante1 = "";
					String dniGarante1 = "";
					document.newPage();
					switch (tipo) {
					case 1:
						document.add(Testeopdf.clausulasGPageFinal2("e3e3", "w2w2", "w2w2", firm1, firm2, agen,
								parametro, aGarante1, dniGarante1));

						break;
					case 2:
						document.add(Testeopdf.clausulasGPageFinal3("e3e3", "w2w2", "w2w2", firm1, firm2, agen,
								aGarante1, dniGarante1, parametro));
						break;
					}

				}

			}
			Image logoBN = Image
					.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
			logoBN = Image.getInstance(logoBN);
			logoBN.setAlignment(Image.NO_BORDER);
			logoBN.setAlignment(Image.RIGHT);
			logoBN.scalePercent(60f);
			document.add(logoBN);
			BnHojaResumen hojaResumen = new BnHojaResumen();

			document.add(clausulasG());
			document.add(clausulasG());
			document.add(clausulasG());
			document.add(clausulasG());
			document.add(clausulasG());
			document.add(clausulasG());

			System.out.println("Exito agregando hojas finales");

		} catch (DocumentException e) {
			System.out.println("Error agregacion elemntos doc " + e.getMessage());
		}
		document.close();

		byte[] ba = baos.toByteArray();
		response.setHeader("Expires", "0");
		response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
		response.setHeader("Pragma", "public");
		// setting the content type
		response.setContentType("application/pdf");
		// the contentlength
		response.setContentLength(baos.size());
		// write ByteArrayOutputStream to the ServletOutputStream
		ServletOutputStream outputStream = response.getOutputStream();
		baos.writeTo(outputStream);
		outputStream.flush();
		outputStream.close();
		System.out.println("Fin test clau");
	}

	private static final int BUFFER_SIZE = 4096;

	@RequestMapping("pagare")
	public String pagare(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "prestamo/pagare");

		return path;

	}

	@RequestMapping("emision")
	public String emision(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "prestamo/emision");

		return path;

	}

	@RequestMapping("pase")
	public String pase(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "prestamo/pase");

		return path;

	}

	@RequestMapping(value = "exPdfCronograma", method = RequestMethod.POST)
	public void exportarCronograma(HttpServletRequest request, HttpServletResponse response) throws Exception {

		String ruta = request.getSession().getServletContext().getRealPath("").toString();

		String prestamo = request.getParameter("numero");

		CicsSoapConnection cics = new CicsSoapConnection();
		RequestMensajeHost host = new RequestMensajeHost();

		// BnPolizaPrestamo prestamo = null;

		// GeneracionCronogramaRepro cronogramaRepro = null;

		BnLetraCambio letraCambio = null;

		// BodyGeneracionCronogramaRepro cronogramaInput = new
		// BodyGeneracionCronogramaRepro();

		BodyLetraCambio letraInput = new BodyLetraCambio();

		String fec = (String) request.getSession().getAttribute("fechaLiquidacion");

		letraInput.cargarData("11", prestamo, fec);

		System.out.println("Letra de cambio :" + letraInput.toShowData());

		String inputLetra = letraInput.toString();

		BodyLetraCambio bodyIn2 = new BodyLetraCambio();
		BodyLetraCambio letraOutPut = null;

		letraOutPut = cics.enviarLetra(letraInput, bodyIn2);
		System.out.println("SALIDA :");
		System.out.println(letraOutPut.toShowData());

		if (letraOutPut != null) {
			letraCambio = new BnLetraCambio();
			letraCambio.setCERROR(letraOutPut.getByTag("DFH-CERROR-76").trim());
			letraCambio.setMSJ(letraOutPut.getByTag("DFH-MSJ-76").trim());

			letraCambio = asignarValoresCronograma(letraOutPut);

			// letraCambio.setMSGNO_HOST(letraOutPut.getByTag("msgnoHost").trim());
			// letraCambio.setMSJE_HOST(letraOutPut.getByTag("msjeHost").trim());
		}

		response.setContentType("application/pdf");
		response.addHeader("Content-Disposition", "attachment; filename=EMISION_LIQUIDACION.pdf");

		// Llamar al generador de PDF para obtener el contenido del PDF en un
		// ByteArrayOutputStream
		ByteArrayOutputStream baos = GeneratePdfCronograma.PdfReporteSoft(letraCambio);

		// Configurar encabezados adicionales de la respuesta HTTP
		response.setHeader("Expires", "0");
		response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
		response.setHeader("Pragma", "public");

		// Configurar el tipo de contenido de la respuesta como PDF (repetido
		// por precaución)
		response.setContentType("application/pdf");

		// Configurar la longitud del contenido en la respuesta
		response.setContentLength(baos.size());

		// Obtener el flujo de salida del servlet y escribir en él el contenido
		// del PDF almacenado en el ByteArrayOutputStream
		ServletOutputStream outputStream = response.getOutputStream();
		baos.writeTo(outputStream);
		outputStream.flush();
		outputStream.close();
	}

	private BnPase asignarValoresPase(BodyPase paseOutPut) {
		BnPase bnPase = new BnPase();
		String etquetas = "DFH-TOPERACION-76|DFH-NPRESTAMO-76|W-FDSBOLSO|W-SPRESTAMO|W-SACTUAL|W-NCUOTAS|W-NCUOTAS_PDTS|W-TASA|W-TCEA|W-TSEG|W-FVENCMTO|W-FJUDICIAL|W-FDEMANDA|W-FCTACTE|W-NCTACTE|W-ACLIENTE|W-DCLIENTE|W-DOCUMENTO|W-FNACMTO|W-SEXO|W-TELEFONO|W-CORREO|W-CCUENTA|W-ENTIDAD|W-DATRASOS|W-SJUDICIAL|W-SINTVENC|W-SINTCOMP|W-SINTMORA|W-SSEGURO|W-NCUOTAS_JUD|W-SCUOTAP_JUD|W-COMENT1|W-COMENT2|W-NCUOTAS_PAG|W-SCUOTAS|W-CAGENCIA|W-SABONOS|W-QSBS|W-SINTERES|W-SDESGRAV|W-SCONLAB|W-CERROR|W-MSJ";
		bnPase.asignarValoresDesdeTexto(etquetas, paseOutPut);
		System.out.println("DATA CARGADA :" + bnPase.toString());

		return bnPase;
	}

	private BnLetraCambio asignarValoresCronograma(BodyLetraCambio cronogramaOutPut) {
		BnLetraCambio cronograma = new BnLetraCambio();

		cronograma.setTOPERACION(cronogramaOutPut.getByTag("DFH-TOPERACION-76"));
		cronograma.setNPRESTAMO(cronogramaOutPut.getByTag("DFH-NPRESTAMO-76"));
		cronograma.setFDSBOLSO(cronogramaOutPut.getByTag("W-FDSBOLSO"));
		cronograma.setSPRESTAMO(cronogramaOutPut.getByTag("W-SPRESTAMO"));

		// cronograma.setSPRESTAMO(Funciones.getSimMonedaxCuenta(cronogramaOutPut.getByTag("DFH-SPRESTAMO-76"))+ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-SDEUDA-DIA-76"),2)));

		cronograma.setSAMORTIZADO(cronogramaOutPut.getByTag("W-SAMORTIZADO"));
		cronograma.setSACTUAL(cronogramaOutPut.getByTag("W-SACTUAL"));
		cronograma.setSDEUDA_D(cronogramaOutPut.getByTag("W-SDEUDA-DIA"));
		cronograma.setNCUOTAS(cronogramaOutPut.getByTag("W-NCUOTAS"));
		// cronograma.setMAIL(cronogramaOutPut.getByTag("DFH-CRONOGRAMA"));
		cronograma.setFVALOR(cronogramaOutPut.getByTag("W-FVALOR"));
		ArrayList<String> bcuota = new ArrayList<String>();
		for (int i = 1; i <= 72; i++) {
			bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-" + i).trim());

		}

		cronograma.setBCUOTA(bcuota);

		ArrayList<String> acuota = new ArrayList<String>();
		for (int i = 1; i <= 72; i++) {
			acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-" + i).trim());

		}

		cronograma.setACUOTA(acuota);

		ArrayList<String> fvcto = new ArrayList<String>();

		for (int i = 1; i <= 72; i++) {
			fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-" + i).trim());

		}

		cronograma.setFVCTO(fvcto);

		ArrayList<String> fcancel = new ArrayList<String>();

		for (int i = 1; i <= 72; i++) {
			fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-" + i).trim());
		}
		cronograma.setFCANCEL(fcancel);

		ArrayList<String> gcuota = new ArrayList<String>();
		for (int i = 1; i <= 72; i++) {
			gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-" + i).trim());
		}
		cronograma.setGCUOTA(gcuota);

		ArrayList<String> samortizacion = new ArrayList<String>();

		for (int i = 1; i <= 72; i++) {
			samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-" + i).trim());
		}
		cronograma.setSAMORTIZACION(samortizacion);

		ArrayList<String> sinteres = new ArrayList<String>();
		for (int i = 1; i <= 72; i++) {
			sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-" + i).trim());
		}

		cronograma.setSINTERES(sinteres);

		ArrayList<String> sintcomp1 = new ArrayList<String>();
		for (int i = 1; i <= 72; i++) {
			sintcomp1.add(cronogramaOutPut.getByTag("DFH-SINTCOMP-76-" + i).trim());
		}

		cronograma.setSINTCOMP1(sintcomp1);

		ArrayList<String> sintmora1 = new ArrayList<String>();
		for (int i = 1; i <= 72; i++) {
			sintmora1.add(cronogramaOutPut.getByTag("DFH-SINTMORA-76-" + i).trim());
		}

		cronograma.setSINTMORA1(sintmora1);

		ArrayList<String> sdesgravamen = new ArrayList<String>();
		for (int i = 1; i <= 72; i++) {
			sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-" + i).trim());
		}

		cronograma.setSDESGRAVAMEN(sdesgravamen);

		ArrayList<String> sdcuota = new ArrayList<String>();
		for (int i = 1; i <= 72; i++) {
			sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-" + i).trim());
		}

		cronograma.setSDCUOTA(sdcuota);

		cronograma.setACLIENTE(cronogramaOutPut.getByTag("DFH-ACLIENTE-76").trim());
		cronograma.setDOCUMENTO(cronogramaOutPut.getByTag("DFH-DOCUMENTO-76").trim());
		cronograma.setTELEFONO(cronogramaOutPut.getByTag("DFH-TELEFONO-76").trim());
		cronograma.setDCLIENTE(cronogramaOutPut.getByTag("DFH-DCLIENTE-76").trim());
		/*
		 * cronograma.setDOCUMGAR(cronogramaOutPut.getByTag( "DFH-DOCUMGAR-76").trim());
		 */
		/*
		 * cronograma.setAGARANTE(cronogramaOutPut.getByTag( "DFH-AGARANTE-76").trim());
		 */
		/*
		 * cronograma.setDGARANTE(cronogramaOutPut.getByTag( "DFH-DGARANTE-76").trim());
		 */

		cronograma.setTASA(cronogramaOutPut.getByTag("DFH-TASA-76").trim());

		cronograma.setTCEA(cronogramaOutPut.getByTag("DFH-TCEA-76").trim());

		cronograma.setTSEG(cronogramaOutPut.getByTag("DFH-TSEG-76").trim());

		cronograma.setSINTVENC(cronogramaOutPut.getByTag("DFH-SINTVENC-76").trim());
		cronograma.setSINTCOMP(cronogramaOutPut.getByTag("DFH-SINTCOMP-76").trim());

		cronograma.setSINTMORA(cronogramaOutPut.getByTag("DFH-SINTMORA-76").trim());
		cronograma.setSSEGURO(cronogramaOutPut.getByTag("DFH-SSEGURO-76").trim());
		cronograma.setSCUOTAP(cronogramaOutPut.getByTag("DFH-SCUOTAP-76").trim());

		cronograma.setCERROR(cronogramaOutPut.getByTag("DFH-CERROR-76").trim());
		cronograma.setMSJ(cronogramaOutPut.getByTag("DFH-MSJ-76").trim());

		return cronograma;
	}

	@RequestMapping(value = "exPdfPase", method = RequestMethod.POST)
	public void exportarPdfPase(HttpServletRequest request, HttpServletResponse response) throws Exception {

		CicsSoapConnection cics = new CicsSoapConnection();
		RequestMensajeHost host = new RequestMensajeHost();

		String desembolso = request.getParameter("numero");

		BnPase bnPase = null;

		BodyPase paseInput = new BodyPase();

		String tipo_prestamo = "12";

		try {
			paseInput.cargarData(tipo_prestamo, desembolso);
		} catch (Exception e1) {

			e1.printStackTrace();
		}

		System.out.println("Letra de cambio :" + paseInput.toShowData());

		// String inputLetra = paseInput.toString();

		BodyPase bodyIn2 = new BodyPase();
		BodyPase paseOutPut = null;

		try {
			paseOutPut = cics.enviarPase(paseInput, bodyIn2);
		} catch (Exception e1) {
			//
			e1.printStackTrace();
		}
		System.out.println("SALIDA :");
		System.out.println(paseOutPut.toShowData());

		if (paseOutPut != null) {
			bnPase = new BnPase();
			bnPase.setCERROR(paseOutPut.getByTag("W-CERROR").trim());
			bnPase.setMSJ(paseOutPut.getByTag("W-MSJ").trim());

			bnPase = asignarValoresPase(paseOutPut);

		}

		response.setContentType("application/pdf");
		response.addHeader("Content-Disposition", "attachment; filename=PASE_JUDICIAL_" + desembolso + ".pdf");

		// Llamar al generador de PDF para obtener el contenido del PDF en un
		// ByteArrayOutputStream
		ByteArrayOutputStream baos = GeneratePdfCronograma.PdfPaseJudicial(bnPase);

		// Configurar encabezados adicionales de la respuesta HTTP
		response.setHeader("Expires", "0");
		response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
		response.setHeader("Pragma", "public");

		// Configurar el tipo de contenido de la respuesta como PDF (repetido
		// por precaución)
		response.setContentType("application/pdf");

		// Configurar la longitud del contenido en la respuesta
		response.setContentLength(baos.size());

		// Obtener el flujo de salida del servlet y escribir en él el contenido
		// del PDF almacenado en el ByteArrayOutputStream
		ServletOutputStream outputStream = response.getOutputStream();
		baos.writeTo(outputStream);
		outputStream.flush();
		outputStream.close();
	}

	private String formatearFecha(String fecha) {
		try {
			// Parsear la fecha ISO al objeto Date
			SimpleDateFormat formatoEntrada = new SimpleDateFormat("yyyy-MM-dd");
			java.util.Date fechaDate = formatoEntrada.parse(fecha);
			//Date fechaDate = formatoEntrada.parse(fecha);
			// Formatear la fecha al formato deseado (DDMMAAAA)
			SimpleDateFormat formatoSalida = new SimpleDateFormat("ddMMyyyy");
			return formatoSalida.format(fechaDate);
		} catch (Exception e) {
			e.printStackTrace(); // Manejo de errores si la conversión falla
			return null; // O manejo de errores según tu lógica de negocio
		}
	}

	@RequestMapping("emisionG")
	public String emisionG(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		String desembolso = request.getParameter("numero");

		String fecha = request.getParameter("fecha");

		fecha = formatearFecha(fecha);
		sesion.setAttribute("fechaLiquidacion", fecha);
		CicsSoapConnection cics = new CicsSoapConnection();
		RequestMensajeHost host = new RequestMensajeHost();

		// BnPolizaPrestamo prestamo = null;

		// GeneracionCronogramaRepro cronogramaRepro = null;

		BnLetraCambio letraCambio = null;

		// BodyGeneracionCronogramaRepro cronogramaInput = new
		// BodyGeneracionCronogramaRepro();

		BodyLetraCambio letraInput = new BodyLetraCambio();

		String tipo_prestamo = "11";
		// String fec = "12022024";

		letraInput.cargarData(tipo_prestamo, desembolso, fecha);

		System.out.println("Letra de cambio :" + letraInput.toShowData());

		String inputLetra = letraInput.toString();

		BodyLetraCambio bodyIn2 = new BodyLetraCambio();
		BodyLetraCambio letraOutPut = null;

		letraOutPut = cics.enviarLetra(letraInput, bodyIn2);
		System.out.println("SALIDA :");
		System.out.println(letraOutPut.toShowData());

		try {

			if (letraOutPut != null) {
				letraCambio = new BnLetraCambio();

				letraCambio.setCERROR(letraOutPut.getByTag("DFH-CERROR-76").trim());
				letraCambio.setMSJ(letraOutPut.getByTag("DFH-MSJ-76").trim());

				letraCambio.setMSGNO_HOST(letraOutPut.getByTag("msgnoHost").trim());
				letraCambio.setMSJE_HOST(letraOutPut.getByTag("msjeHost").trim());
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		// System.out.println("cuenta" +(cronograma.getNPRESTAMO()).substring(0,
		// 11));
		// System.out.println("desembolso"
		// +(cronograma.getNPRESTAMO()).substring(11, 13));

		letraCambio.setCERROR(letraOutPut.getByTag("DFH-CERROR-76").trim());
		letraCambio.setMSJ(letraOutPut.getByTag("DFH-MSJ-76").trim());

		String cerror = (letraOutPut.getByTag("DFH-CERROR-76").trim());
		String merror = ((letraOutPut.getByTag("DFH-MSJ-76").trim()).replace(".", ""));

		// String prestamo = "11";

		if (cerror.equalsIgnoreCase("0000")) {

			request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");
			request.setAttribute("prestamo", desembolso);
		} else {

			request.setAttribute("msje", "Error 99");

			request.setAttribute("mensajeError", merror);
		}

		path = View.returnJsp(model, "prestamo/emision");

		return path;

	}

	@RequestMapping("paseG")
	public String paseG(ModelMap model, HttpServletRequest request, HttpServletResponse response) {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		CicsSoapConnection cics = new CicsSoapConnection();
		RequestMensajeHost host = new RequestMensajeHost();

		String desembolso = request.getParameter("numero");

		BnPase pase = null;

		BodyPase paseInput = new BodyPase();

		String tipo_prestamo = "12";
		// String fec = "12022024";

		try {
			paseInput.cargarData(tipo_prestamo, desembolso);
		} catch (Exception e1) {
			//
			e1.printStackTrace();
		}

		System.out.println("Letra de cambio :" + paseInput.toShowData());

		// String inputLetra = paseInput.toString();

		BodyPase bodyIn2 = new BodyPase();
		BodyPase paseOutPut = null;

		try {
			paseOutPut = cics.enviarPase(paseInput, bodyIn2);
		} catch (Exception e1) {
			//
			e1.printStackTrace();
		}
		System.out.println("SALIDA :");
		System.out.println(paseOutPut.toShowData());

		try {

			if (paseOutPut != null) {
				pase = new BnPase();
				pase.setCERROR(paseOutPut.getByTag("W-CERROR").trim());
				pase.setMSJ(paseOutPut.getByTag("W-MSJ").trim());

			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		String cerror = (paseOutPut.getByTag("W-CERROR").trim());
		String merror = ((paseOutPut.getByTag("W-MSJ").trim()).replace(".", ""));

		if (cerror.equalsIgnoreCase("0000")) {

			request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");
			request.setAttribute("prestamo", desembolso);
		} else {

			request.setAttribute("msje", "Error 99");

			request.setAttribute("mensajeError", merror);
		}

		path = View.returnJsp(model, "prestamo/pase");
		return path;

	}

	@RequestMapping("poliza")
	public String poliza(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "tarjeta/poliza");

		return path;

	}

	@RequestMapping("reprogramacion")
	public String reprogramacion(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "prestamo/reprogramacion");

		return path;

	}

	@RequestMapping("emisión")
	public String emisión(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "prestamo/emisión");

		return path;

	}

	@RequestMapping("pagareG")
	public String pagareG(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI

		String numero = request.getParameter("numero");

		RequestMensajeHost host = new RequestMensajeHost();

		BnPolizaPrestamo prestamo = null;

		prestamo = host.getEmisionDocumentosPrestamo(numero);

		request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");
		request.setAttribute("prestamo", prestamo);

		/*
		 * if (prestamo.getCoderror().equals("0500")){
		 * 
		 * request.setAttribute("msje","Error 10"); }else{ // request.setAttribute
		 * ("msje","Haga Clic en Abrir para Confirmar la Exportación");
		 * request.setAttribute
		 * ("msje","Haga Clic en Abrir para Confirmar la Exportación");
		 * request.setAttribute("prestamo",prestamo);
		 * 
		 * }
		 */

		path = View.returnJsp(model, "prestamo/pagare");

		return path;

	}

	@RequestMapping("prestamo")
	public String prestamo(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "prestamo/prestamo");

		// path = View.returnJsp(model,"prestamo/prestamo");
		// model.addAttribute("DatosSesion",datosSesion);
		return path;

	}

	@RequestMapping("prestamoPre")
	public String prestamoPre(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "prestamo/prestamoPre");

		// path = View.returnJsp(model,"prestamo/prestamo");
		// model.addAttribute("DatosSesion",datosSesion);
		return path;

	}

	// ------------------------------------------------------DESEMBOLSO
	// BUSQUEDA----------------------------------------
	@RequestMapping("prestamoG")
	public String prestamoG(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI

		CicsSoapConnection cics = new CicsSoapConnection();

		String numero = request.getParameter("numero");

		/*
		 * RequestMensajeHost host = new RequestMensajeHost();
		 * 
		 * BnPolizaPrestamo prestamo = null;
		 * 
		 * prestamo = host.getEmisionDocumentosPrestamo(numero);
		 */

		GeneracionCronograma cronograma = null;

		BodyGeneracionCronograma cronogramaInput = new BodyGeneracionCronograma();

		String tipo_prestamo1 = "05";

		cronogramaInput.cargarData(tipo_prestamo1, numero);

		// System.out.println("Cronograma input :"
		// +cronogramaInput.toShowData());

		String inputCronograma = cronogramaInput.toString();

		BodyGeneracionCronograma bodyIn2 = new BodyGeneracionCronograma();
		BodyGeneracionCronograma cronogramaOutPut = null;

		cronogramaOutPut = cics.enviarTrama(cronogramaInput, bodyIn2);

		cronogramaOutPut.getByIndex(1);
		cronogramaOutPut.getByIndex(2);
		cronogramaOutPut.getByIndex(3);

		System.out.println("pruena 1" + cronogramaOutPut.getByIndex(0));
		System.out.println("2 " + cronogramaOutPut.getByIndex(1));
		System.out.println(cronogramaOutPut.toShowData());

		String codResp = cronogramaOutPut.getByIndex(0);
		String mensResp = cronogramaOutPut.getByIndex(1);

		// if (!codResp.equals("0000")){

		// request.setAttribute("msje","Error 99");
		// cronograma.setMSJ(");
		// request.setAttribute("cronograma",cronograma);
		// }

		try {

			if (cronogramaOutPut != null) {
				cronograma = new GeneracionCronograma();

				cronograma.setTOPERACION(cronogramaOutPut.getByTag("DFH-TOPERACION-76"));
				cronograma.setNPRESTAMO(cronogramaOutPut.getByTag("DFH-NPRESTAMO-76"));
				cronograma.setFDSBOLSO(cronogramaOutPut.getByTag("DFH-FDSBOLSO-76"));
				cronograma.setSPRESTAMO(cronogramaOutPut.getByTag("DFH-SPRESTAMO-76"));

				cronograma.setCERROR(cronogramaOutPut.getByTag("DFH-CERROR-76").trim());
				cronograma.setMSJ(cronogramaOutPut.getByTag("DFH-MSJ-76").trim());

				cronograma.setMSGNO_HOST(cronogramaOutPut.getByTag("msgnoHost").trim());
				cronograma.setMSJE_HOST(cronogramaOutPut.getByTag("msjeHost").trim());
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		System.out.println("Prestamos: " + cronograma.getNPRESTAMO());

		System.out.println("Codigo error: " + cronograma.getNPRESTAMO());

		System.out.println("Mensaje: " + cronograma.getNPRESTAMO());

		// System.out.println("cuenta" +(cronograma.getNPRESTAMO()).substring(0,
		// 11));
		// System.out.println("desembolso"
		// +(cronograma.getNPRESTAMO()).substring(11, 13));

		/*
		 * 
		 * if( !(codResp).equals("0000")){
		 * 
		 * // cronograma.setMSJ(cronogramaOutPut.getByIndex(0)+ " - "+
		 * cronogramaOutPut.getByIndex(1));
		 * 
		 * cronograma.setMSJ("0004"+ " - "+ "MENSAJE NO EXISTE  WS0004");
		 * request.setAttribute("cronograma",cronograma);
		 * 
		 * path = View.returnJsp(model,"prestamo/prestamo");
		 * 
		 * 
		 * return path;
		 * 
		 * }
		 */

		cronograma.setCcuenta((cronograma.getNPRESTAMO()).substring(0, 11));
		cronograma.setCdsbolso((cronograma.getNPRESTAMO()).substring(11, 13));

		// Solicitud

		BnSolicitudPrestamo solicitud = null;

		BodySolicitudPrestamo solicitudInput = new BodySolicitudPrestamo();

		String tipo_prestamo = "07";

		solicitudInput.cargarData(tipo_prestamo, numero);

		log.debug("Trama de Solicitud input", Constant.LOGGER_DEBUG_NIVEL_1);

		log.debug("Trama de Solicitud", solicitudInput.toShowData());
		// log.error(e, "SOlicitud", solicitudInput.toShowData());
		// log.toString(solicitudInput.toShowData());

		String inputSolicitud = solicitudInput.toString();

		BodySolicitudPrestamo bodyIn3 = new BodySolicitudPrestamo();
		BodySolicitudPrestamo solicitudOutPut = null;

		solicitudOutPut = cics.enviarTrama(solicitudInput, bodyIn3);

		log.debug("Trama de Solicitud input", solicitudInput.toShowData());

		log.debug("Trama de Solicitud output", solicitudOutPut.toShowData());

		if (solicitudOutPut != null) {
			solicitud = new BnSolicitudPrestamo();

			solicitud.setCERROR(solicitudOutPut.getByTag("DFH-CERROR").trim());
			solicitud.setMSJ(solicitudOutPut.getByTag("DFH-MSJ").trim());

		}

		//
		//

		BnPolizaPrestamo poliza = null;

		try {

			BodyCronograma polizaInput = new BodyCronograma();

			polizaInput.cargarData1(numero);

			log.debug("Poliza input", polizaInput.toShowData());
			// System.out.println("poliza input :" +polizaInput.toShowData());

			// String inputCronograma = polizaInput.toString();

			BodyCronograma bodyIn = new BodyCronograma();
			BodyPolizaPrestamo polizaOutPut = null;

			polizaOutPut = cics.enviarTramaPoliza(polizaInput, bodyIn);
			// System.out.println("Poliza");
			// System.out.println("Poliza :" +polizaOutPut.toShowData());
			log.debug("Poliza output", polizaOutPut.toShowData());

			if (polizaOutPut != null) {
				poliza = new BnPolizaPrestamo();

				poliza.setAcliente(polizaOutPut.getByTag("ACLIENTE"));
				poliza.setNdoc(polizaOutPut.getByTag("NDOC"));

				poliza.setCelular(polizaOutPut.getByTag("CELULAR"));
				poliza.setEmail(polizaOutPut.getByTag("EMAIL"));

				poliza.setCerror(polizaOutPut.getByTag("CERROR"));
				poliza.setMsj(polizaOutPut.getByTag("MSJ"));

			}
		} catch (Exception e) {
			// log.error(e,"","");
		}

		//

		BodyHojaResumen hojaInput = new BodyHojaResumen();
		BodyHojaResumen hojaOutPut = new BodyHojaResumen();

		hojaInput.cargarData(numero);
		hojaInput.toShowData();

		String inputHoja = hojaInput.toString();

		BodyHojaResumen bodyIn1 = new BodyHojaResumen();
		BodyHojaResumen bodyOut1 = null;

		bodyOut1 = cics.enviarTramaHojaResumen(hojaInput, bodyIn1);

		// System.out.println(bodyOut1.toShowData());

		log.debug("Poliza output", bodyOut1.toShowData());

		BnHojaResumen hojaResumen = null;

		if (bodyOut1 != null) {
			hojaResumen = new BnHojaResumen();

			hojaResumen.setCERROR(bodyOut1.getByTag("DFH-CERROR"));
			hojaResumen.setMSJ(bodyOut1.getByTag("DFH-MSJ"));

		}

		//

		// d
		// System.out.println("prueba de datos" + poliza.getNdoc());

		cronograma.setACLIENTE(poliza.getAcliente());
		cronograma.setDOCUMENTO(poliza.getNdoc());

		if ((cronograma.getCERROR()).equals("0000") && (solicitud.getCERROR()).equals("0000")
				&& (poliza.getCerror()).equals("0000") && (hojaResumen.getCERROR()).equals("0000")) {

			request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");
			request.setAttribute("cronograma", cronograma);

		} else {

			if ((cronograma.getMSJ().trim()).equals("")) {

				request.setAttribute("msje", "Error 99");
				String mensa = (solicitud.getMSJ()).trim();
				String mensa1 = (poliza.getMsj()).trim();
				String mensa2 = (hojaResumen.getMSJ()).trim();

				int mensaIn = mensa.length();
				int mensa1In = mensa1.length();
				int mensa2in = mensa2.length();

				if (mensaIn > 2) {
					cronograma.setMSJ(mensa);
					request.setAttribute("cronograma", cronograma);
					log.debug("Mensaje de error: ", mensa);
					// request.setAttribute("msje","Haga Clic en Abrir para Confirmar la
					// Exportación");
					// request.setAttribute("cronograma",cronograma);
				} else {
					if (mensa1In > 2) {
						cronograma.setMSJ(mensa1);
						request.setAttribute("cronograma", cronograma);
						log.debug("Mensaje de error: ", mensa1);

						// request.setAttribute("msje","Haga Clic en Abrir para Confirmar la
						// Exportación");
						// request.setAttribute("cronograma",cronograma);

					} else {
						if (mensa2in > 2) {
							cronograma.setMSJ(mensa2);
							request.setAttribute("cronograma", cronograma);
							log.debug("Mensaje de error: ", mensa2);

							// request.setAttribute("msje","Haga Clic en Abrir para Confirmar la
							// Exportación");
							// request.setAttribute("cronograma",cronograma);

						}

					}

				}

			} else {
				request.setAttribute("msje", "Error 99");
				request.setAttribute("cronograma", cronograma);

				// request.setAttribute("msje","Haga Clic en Abrir para Confirmar la
				// Exportación");
				// request.setAttribute("cronograma",cronograma);

			}

		}

		path = View.returnJsp(model, "prestamo/prestamo");

		return path;

	}

	// ------------------------------------------------------FIN DESEMBOLSO
	// BUSQUEDA----------------------------------------

	@RequestMapping("prestamoGPre")
	public String prestamoGPre(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI

		CicsSoapConnection cics = new CicsSoapConnection();

		String numero = request.getParameter("numero");

		BnSolicitudPrestamo solicitud = null;

		BodySolicitudPrestamo solicitudInput = new BodySolicitudPrestamo();

		String tipo_prestamo = "07";

		solicitudInput.cargarData(tipo_prestamo, numero);

		// System.out.println("Solicitud input :" +solicitudInput.toShowData());
		log.debug("Solicitud input", solicitudInput.toShowData());
		String inputSolicitud = solicitudInput.toString();

		BodySolicitudPrestamo bodyIn3 = new BodySolicitudPrestamo();
		BodySolicitudPrestamo solicitudOutPut = null;

		solicitudOutPut = cics.enviarTrama(solicitudInput, bodyIn3);

		// System.out.println("solicitud cambio moneda:"
		// +solicitudInput.toShowData());

		// System.out.println("solicitud cambio moneda:"
		// +solicitudOutPut.toShowData());

		if (solicitudOutPut != null) {
			solicitud = new BnSolicitudPrestamo();

			solicitud.setCERROR(solicitudOutPut.getByTag("DFH-CERROR").trim());
			solicitud.setMSJ(solicitudOutPut.getByTag("DFH-MSJ").trim());

		}

		RequestMensajeHost host = new RequestMensajeHost();

		BnPolizaPrestamo prestamo = null;

		prestamo = host.getEmisionDocumentosPrestamo(numero);

		// request.setAttribute("msje","Haga Clic en Abrir para Confirmar la
		// Exportación");
		// request.setAttribute("prestamo",prestamo);

		prestamo.setMsjeTotal(solicitud.getMSJ());

		if ((solicitud.getCERROR().trim()).equalsIgnoreCase("")) {
			request.setAttribute("msjeTotal", "Error 9910");
			request.setAttribute("prestamo", prestamo);
		} else {

			if ((prestamo.getAcliente().trim()).equalsIgnoreCase("")) {
				request.setAttribute("msje", "Error 99");
			}

			if ((prestamo.getCoderror()).equalsIgnoreCase("98")) {
				request.setAttribute("msje", "Error 98");
			}

			if (prestamo.getCoderror().equals("0500")) {

				request.setAttribute("msje", "Error 10");
			} else {
				// request.setAttribute("msje","Haga Clic en Abrir para Confirmar la
				// Exportación");
				request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");
				request.setAttribute("prestamo", prestamo);

			}

		}

		path = View.returnJsp(model, "prestamo/prestamoPre");

		return path;

	}

	@RequestMapping("reprogramacionG")
	public String reprogramacionG(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		String desembolso = request.getParameter("numero");

		CicsSoapConnection cics = new CicsSoapConnection();
		RequestMensajeHost host = new RequestMensajeHost();

		// BnPolizaPrestamo prestamo = null;

		GeneracionCronogramaRepro cronogramaRepro = null;

		// prestamo = host.getEmisionDocumentosPrestamo(numero);

		// prestamo = host.getCronogramaReprogramado(desembolso);

		// request.setAttribute("msje","Haga Clic en Abrir para Confirmar la
		// Exportación");
		// request.setAttribute("prestamo",prestamo);

		BodyGeneracionCronogramaRepro cronogramaInput = new BodyGeneracionCronogramaRepro();

		String tipo_prestamo = "95";

		cronogramaInput.cargarData(tipo_prestamo, desembolso);

		// System.out.println("Cronograma input repro :"
		// +cronogramaInput.toShowData());

		String inputCronograma = cronogramaInput.toString();

		BodyGeneracionCronogramaRepro bodyIn2 = new BodyGeneracionCronogramaRepro();
		BodyGeneracionCronogramaRepro cronogramaOutPut = null;

		cronogramaOutPut = cics.enviarTramaRepro(cronogramaInput, bodyIn2);
		// System.out.println("SALIDA :");
		// System.out.println(cronogramaOutPut.toShowData());

		/*
		 * if (cronogramaOutPut != null){ cronogramaRepro = new
		 * GeneracionCronogramaRepro();
		 * 
		 * cronogramaRepro.setTOPERACION(cronogramaOutPut.getByTag(
		 * "DFH-TOPERACION-76")); cronogramaRepro.setNPRESTAMO(cronogramaOutPut.getByTag
		 * ("DFH-NPRESTAMO-76"));
		 * 
		 * cronogramaRepro.setCERROR(cronogramaOutPut.getByTag("DFH-CERROR-76").trim
		 * ()); cronogramaRepro.setMSJ(cronogramaOutPut.getByTag("DFH-MSJ-76").trim ());
		 * 
		 * }
		 */

		// exReprogramacionfio
		String prestamo = (cronogramaOutPut.getByTag("DFH-NPRESTAMO-95")).trim();

		String acliente = (cronogramaOutPut.getByTag("DFH-ACLIENTE-95")).trim();

		String cerror = (cronogramaOutPut.getByTag("DFH-CERROR-95")).trim();
		String merror = ((cronogramaOutPut.getByTag("DFH-MSJ-95")).trim()).replace(".", "");

		// String prestamo = "11";

		if (cerror.equalsIgnoreCase("0000")) {

			request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");
			request.setAttribute("prestamo", prestamo);
		} else {

			request.setAttribute("msje", "Error 99");

			request.setAttribute("mensajeError", merror);
		}

		/*
		 * 
		 * if((prestamo.getAcliente().trim()).equalsIgnoreCase("")){
		 * request.setAttribute("msje","Error 99"); }
		 * 
		 * if((prestamo.getCoderror()).equalsIgnoreCase("98")){
		 * request.setAttribute("msje","Error 98"); }
		 * 
		 * if (prestamo.getCoderror().equals("0500")){
		 * 
		 * request.setAttribute("msje","Error 10"); }else{ // request.setAttribute
		 * ("msje","Haga Clic en Abrir para Confirmar la Exportación");
		 * request.setAttribute
		 * ("msje","Haga Clic en Abrir para Confirmar la Exportación");
		 * request.setAttribute("prestamo",prestamo);
		 * 
		 * }
		 */

		path = View.returnJsp(model, "prestamo/reprogramacion");

		return path;

	}

	@RequestMapping("docPrestamoT")
	public String docPrestamoT(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI

		List result = null;

		ConsultaDocumentoImpl consultaDocPrestamos = new ConsultaDocumentoImpl();

		result = consultaDocPrestamos.prestamoConsultaTodo();

		request.setAttribute("msje", "Consultar Todo");
		request.setAttribute("result", result);

		path = View.returnJsp(model, "consulta/consultaPM");

		return path;

	}

	@RequestMapping("consulPR")
	public String consulPR(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI

		String numero = request.getParameter("Numero");

		try {

			if (numero.length() > 2) {

				List result = null;

				ConsultaDocumentoImpl consultaDocPrestamos = new ConsultaDocumentoImpl();

				result = consultaDocPrestamos.prestamoConsultaCronograma(numero.trim());

				int a = result.size();

				if (a == 0) {
					request.setAttribute("msje", "Error 98");
					path = View.returnJsp(model, "consulta/consultaPR");

					return path;

				} else {

					request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");
					request.setAttribute("result", result);

					request.setAttribute("desembolso", numero);

					path = View.returnJsp(model, "consulta/consultaPR");

					return path;
				}
			} else {

				List result = null;

				ConsultaDocumentoImpl consultaDocPrestamos = new ConsultaDocumentoImpl();

				// log.debug("ENTRA CONSULTA TOTAL",
				// "TODA LA TABLA",Constante.LOGGER_DEBUG_NIVEL_2);
				// log4.debug("ENTRA CONSULTA TOTAL",Constante.LOGGER_DEBUG_NIVEL_2);

				result = consultaDocPrestamos.prestamoConsultaTodoCronograma();
				int a = result.size();

				// log.debug("total resultL",
				// Integer.toString(a),Constante.LOGGER_DEBUG_NIVEL_2);

				// log4.debug("total resultL", Integer.toString(a));

				request.setAttribute("msje", "Consultar Todo");
				request.setAttribute("result", result);

				path = View.returnJsp(model, "consulta/consultaPR");

				return path;
			}

		} catch (Exception e) {

			// log.error(e,"","");

			// log.debug("CONSULTA TOTAL","CONSULTA TOTAL","CONSULTA TOTAL");

			throw e;
		}

	}

	@RequestMapping("consulPM")
	public String consulPM(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI

		String numero = request.getParameter("Numero");

		try {

			if (numero.length() > 2) {

				List result = null;

				ConsultaDocumentoImpl consultaDocPrestamos = new ConsultaDocumentoImpl();

				result = consultaDocPrestamos.prestamoConsultaCronograma(numero.trim());

				int a = result.size();

				if (a == 0) {
					request.setAttribute("msje", "Error 98");
					path = View.returnJsp(model, "consulta/consultaPR");

					return path;

				} else {

					request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");
					request.setAttribute("result", result);

					request.setAttribute("desembolso", numero);

					path = View.returnJsp(model, "consulta/consultaPR");

					return path;
				}
			} else {

				List result = null;

				ConsultaDocumentoImpl consultaDocPrestamos = new ConsultaDocumentoImpl();

				// log.debug("ENTRA CONSULTA TOTAL",
				// "TODA LA TABLA",Constante.LOGGER_DEBUG_NIVEL_2);
				// log4.debug("ENTRA CONSULTA TOTAL",Constante.LOGGER_DEBUG_NIVEL_2);

				// result =
				// consultaDocPrestamos.prestamoConsultaTodoCronograma();

				result = consultaDocPrestamos.prestamoConsultaTodo();
				int a = result.size();

				// log.debug("total resultL",
				// Integer.toString(a),Constante.LOGGER_DEBUG_NIVEL_2);

				// log4.debug("total resultL", Integer.toString(a));

				request.setAttribute("msje", "Consultar Todo");
				request.setAttribute("result", result);

				path = View.returnJsp(model, "consulta/consultaPM");

				return path;
			}

		} catch (Exception e) {

			// log.error(e,"","");

			// log.debug("CONSULTA TOTAL","CONSULTA TOTAL","CONSULTA TOTAL");

			throw e;
		}

	}

	@RequestMapping("administrarSeguro1")
	public String administrarSeguro1(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		String numero = request.getParameter("Numero");

		if (numero.equalsIgnoreCase("1")) {

			List result1 = null;

			ConsultaDocumentoImpl consultaDocPrestamos = new ConsultaDocumentoImpl();

			result1 = consultaDocPrestamos.poliza3126(numero.trim());

			int a = result1.size();

			if (a == 0) {
				request.setAttribute("msje", "Error 98");
				path = View.returnJsp(model, "administrador/administrarSeguro");

				return path;

			} else {

				request.setAttribute("result", result1);

				request.setAttribute("desembolso", numero);

				path = View.returnJsp(model, "administrador/administrarSeguro");

				return path;
			}

		}

		path = View.returnJsp(model, "administrador/administrar");

		return path;

	}

	// -------------------------------------------------MOSTRAR
	// PARAMETROS---------------------------------------------

	@RequestMapping("consulImagen")
	public String consulImagen(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		// log.debug("CONSULTA PRESTAMO",
		// "CONSULTA PRESTAMO",Constante.LOGGER_DEBUG_NIVEL_2);
		// log4.debug("CONSULTA PRESTAMO",Constant.LOGGER_DEBUG_NIVEL_1);

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI

		// String numero = request.getParameter("Numero");

		// log.debug("DESEBOLSO", numero,Constante.LOGGER_DEBUG_NIVEL_2);
		// log4.debug("DESEBOLSO", Constante.LOGGER_DEBUG_NIVEL_2);

		try {

			List result = null;

			ConsultaDocumentoImpl consultaDocPrestamos = new ConsultaDocumentoImpl();

			// log.debug("ENTRA CONSULTA TOTAL",
			// "TODA LA TABLA",Constante.LOGGER_DEBUG_NIVEL_2);
			// log4.debug("ENTRA CONSULTA TOTAL",Constante.LOGGER_DEBUG_NIVEL_2);

			result = consultaDocPrestamos.parametrosConsultaTodo();
			int a = result.size();

			// log.debug("total resultL",
			// Integer.toString(a),Constante.LOGGER_DEBUG_NIVEL_2);

			// log4.debug("total resultL", Integer.toString(a));

			request.setAttribute("msje", "Consultar Todo");
			request.setAttribute("result", result);

			path = View.returnJsp(model, "consulta/consultaImagen");

			return path;

		} catch (Exception e) {

			// log.error(e,"","");

			// log.debug("CONSULTA TOTAL","CONSULTA TOTAL","CONSULTA TOTAL");

			throw e;
		}

		/*
		 * 
		 * try {
		 * 
		 * if(numero.length()>2){
		 * 
		 * 
		 * List result = null;
		 * 
		 * ConsultaDocumentoImpl consultaDocPrestamos = new ConsultaDocumentoImpl();
		 * 
		 * result = consultaDocPrestamos.prestamoConsulta(numero.trim());
		 * 
		 * int a = result.size();
		 * 
		 * if(a == 0){ request.setAttribute("msje","Error 98"); path =
		 * View.returnJsp(model,"consulta/consultaPM");
		 * 
		 * return path;
		 * 
		 * }else{
		 * 
		 * request.setAttribute("msje",
		 * "Haga Clic en Abrir para Confirmar la Exportación");
		 * request.setAttribute("result",result);
		 * 
		 * // request.setAttribute("desembolso",numero);
		 * 
		 * 
		 * 
		 * 
		 * path = View.returnJsp(model,"consulta/consultaPM");
		 * 
		 * 
		 * return path; }
		 * 
		 * }else{
		 * 
		 * List result = null;
		 * 
		 * ConsultaDocumentoImpl consultaDocPrestamos = new ConsultaDocumentoImpl();
		 * 
		 * 
		 * // log.debug("ENTRA CONSULTA TOTAL",
		 * "TODA LA TABLA",Constante.LOGGER_DEBUG_NIVEL_2);
		 * //log4.debug("ENTRA CONSULTA TOTAL",Constante.LOGGER_DEBUG_NIVEL_2);
		 * 
		 * 
		 * result = consultaDocPrestamos.prestamoConsultaTodo(); int a = result.size();
		 * 
		 * 
		 * // log.debug("total resultL",
		 * Integer.toString(a),Constante.LOGGER_DEBUG_NIVEL_2);
		 * 
		 * 
		 * 
		 * //log4.debug("total resultL", Integer.toString(a));
		 * 
		 * request.setAttribute("msje","Consultar Todo");
		 * request.setAttribute("result",result);
		 * 
		 * path = View.returnJsp(model,"consulta/consultaPM");
		 * 
		 * 
		 * return path; }
		 * 
		 * } catch (Exception e) {
		 * 
		 * // log.error(e,"","");
		 * 
		 * // log.debug("CONSULTA TOTAL","CONSULTA TOTAL","CONSULTA TOTAL");
		 * 
		 * 
		 * 
		 * throw e; }
		 */

	}

	// -------------------------------------------------FIN MOSTRAR
	// PARAMETROS---------------------------------------------

	// -------------------------------------------------MOSTRAR PARAMETRO
	// INDIVIDUAL---------------------------------------------

	@RequestMapping("mostrarParametro")
	public String mostrarParametro(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		BnConsultaParametros result = null;
		String parametro = request.getParameter("numero");
		String tipo = "image";
		try {

			ConsultaDocumentoImpl consultaDocPrestamos = new ConsultaDocumentoImpl();
			result = consultaDocPrestamos.verparametro(parametro);

			if (!result.getCodigo().isEmpty()) {

				request.setAttribute("msje", "Consulta parametro a actualizar");
				request.setAttribute("result", result);
				if (result.getDescripcion().startsWith("pdf")) {
					tipo = "pdf";
				}
				request.setAttribute("tipo", tipo);

			} else {
				request.setAttribute("msje", "Parametro no encontrado");
			}

			path = View.returnJsp(model, "consulta/actualizar");
			return path;

		} catch (Exception e) {
			System.out.println(e.getMessage());
			throw e;
		}

	}

	// -------------------------------------------------FIN MOSTRAR PARAMETROS
	// INDIVIDUAL---------------------------------------------

	@RequestMapping("consulT")
	public String consulT(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI

		String numero = request.getParameter("Numero");

		if (numero.length() > 2) {
			List result = null;

			ConsultaDocumentoImpl consultaDocTarjeta = new ConsultaDocumentoImpl();

			result = consultaDocTarjeta.tarjetaConsulta(numero.trim());

			int a = result.size();

			if (a == 0) {
				request.setAttribute("msje", "Error 98");
				path = View.returnJsp(model, "consulta/consultaTC");

				return path;

			} else {

				request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");
				request.setAttribute("result", result);

				request.setAttribute("desembolso", numero);

				path = View.returnJsp(model, "consulta/consultaTC");

				return path;
			}
		} else {

			List result = null;

			ConsultaDocumentoImpl consultaDocTarjeta = new ConsultaDocumentoImpl();

			result = consultaDocTarjeta.tarjetaConsultaTodo();

			request.setAttribute("msje", "Consultar Todo");
			request.setAttribute("result", result);

			path = View.returnJsp(model, "consulta/consultaTC");

			return path;
		}

	}

	@RequestMapping(value = "exReprogramacion", method = RequestMethod.POST)
	public void exportarReprogramacion(HttpServletRequest request, HttpServletResponse response) throws Exception {

		// System.out.println("eors_individual");
		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String prestamo = request.getParameter("numero");

		CicsSoapConnection cics = new CicsSoapConnection();
		RequestMensajeHost host = new RequestMensajeHost();

		GeneracionCronogramaRepro cronograma = null;

		try {

			BodyGeneracionCronogramaRepro cronogramaInput = new BodyGeneracionCronogramaRepro();

			String tipo_prestamo = "95";

			cronogramaInput.cargarData(tipo_prestamo, prestamo);

			// System.out.println("Cronograma input :"
			// +cronogramaInput.toShowData());

			String inputCronograma = cronogramaInput.toString();

			BodyGeneracionCronogramaRepro bodyIn2 = new BodyGeneracionCronogramaRepro();
			BodyGeneracionCronogramaRepro cronogramaOutPut = null;

			cronogramaOutPut = cics.enviarTramaRepro(cronogramaInput, bodyIn2);

			// System.out.println(cronogramaOutPut.toShowData());

			if (cronogramaOutPut != null) {
				cronograma = new GeneracionCronogramaRepro();

				cronograma.setTOPERACION(cronogramaOutPut.getByTag("DFH-TOPERACION-95"));
				cronograma.setNPRESTAMO(cronogramaOutPut.getByTag("DFH-NPRESTAMO-95"));
				cronograma.setFDSBOLSO(cronogramaOutPut.getByTag("DFH-FDSBOLSO-95"));
				cronograma.setSPRESTAMO(cronogramaOutPut.getByTag("DFH-SPRESTAMO-95"));
				cronograma.setSAMORTIZADO(cronogramaOutPut.getByTag("DFH-SAMORTIZADO-95"));
				cronograma.setSACTUAL(cronogramaOutPut.getByTag("DFH-SACTUAL-95"));
				cronograma.setSDEUDA_D(cronogramaOutPut.getByTag("DFH-SDEUDA-DIA-95"));
				cronograma.setNCUOTAS(cronogramaOutPut.getByTag("DFH-NCUOTAS-95"));

				ArrayList<String> ncuota = new ArrayList<String>();
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-1").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-2").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-3").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-4").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-5").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-6").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-7").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-8").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-9").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-10").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-11").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-12").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-13").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-14").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-15").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-16").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-17").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-18").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-19").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-20").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-21").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-22").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-23").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-24").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-25").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-26").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-27").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-28").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-29").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-30").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-31").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-32").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-33").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-34").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-35").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-36").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-37").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-38").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-39").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-40").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-41").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-42").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-43").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-44").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-45").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-46").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-47").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-48").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-49").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-50").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-51").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-52").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-53").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-54").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-55").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-56").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-57").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-58").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-59").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-60").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-61").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-62").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-63").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-64").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-65").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-66").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-67").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-68").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-69").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-70").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-71").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-72").trim());
				ncuota.add(cronogramaOutPut.getByTag("DFH-NCUOTA-95-73").trim());
				cronograma.setNCUOTA(ncuota);

				cronograma.setFINICIOREPRO(cronogramaOutPut.getByTag("DFH-FVCTO-95-1"));

				ArrayList<String> fvcto = new ArrayList<String>();
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-1").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-2").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-3").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-4").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-5").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-6").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-7").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-8").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-9").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-10").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-11").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-12").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-13").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-14").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-15").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-16").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-17").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-18").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-19").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-20").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-21").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-22").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-23").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-24").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-25").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-26").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-27").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-28").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-29").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-30").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-31").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-32").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-33").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-34").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-35").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-36").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-37").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-38").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-39").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-40").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-41").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-42").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-43").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-44").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-45").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-46").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-47").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-48").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-49").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-50").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-51").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-52").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-53").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-54").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-55").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-56").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-57").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-58").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-59").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-60").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-61").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-62").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-63").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-64").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-65").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-66").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-67").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-68").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-69").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-70").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-71").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-72").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-95-73").trim());
				cronograma.setFVCTO(fvcto);

				ArrayList<String> samortizacion = new ArrayList<String>();
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-1").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-2").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-3").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-4").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-5").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-6").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-7").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-8").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-9").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-10").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-11").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-12").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-13").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-14").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-15").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-16").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-17").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-18").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-19").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-20").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-21").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-22").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-23").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-24").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-25").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-26").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-27").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-28").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-29").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-30").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-31").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-32").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-33").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-34").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-35").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-36").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-37").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-38").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-39").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-40").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-41").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-42").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-43").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-44").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-45").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-46").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-47").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-48").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-49").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-50").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-51").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-52").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-53").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-54").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-55").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-56").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-57").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-58").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-59").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-60").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-61").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-62").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-63").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-64").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-65").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-66").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-67").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-68").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-69").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-70").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-71").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-72").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-95-73").trim());
				cronograma.setSAMORTIZACION(samortizacion);

				ArrayList<String> sinteres = new ArrayList<String>();
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-1").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-2").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-3").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-4").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-5").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-6").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-7").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-8").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-9").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-10").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-11").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-12").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-13").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-14").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-15").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-16").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-17").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-18").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-19").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-20").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-21").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-22").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-23").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-24").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-25").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-26").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-27").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-28").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-29").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-30").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-31").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-32").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-33").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-34").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-35").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-36").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-37").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-38").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-39").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-40").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-41").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-42").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-43").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-44").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-45").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-46").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-47").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-48").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-49").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-50").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-51").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-52").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-53").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-54").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-55").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-56").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-57").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-58").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-59").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-60").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-61").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-62").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-63").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-64").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-65").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-66").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-67").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-68").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-69").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-70").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-71").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-72").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-95-73").trim());
				cronograma.setSINTERES(sinteres);

				ArrayList<String> sdesgravamen = new ArrayList<String>();
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-1").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-2").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-3").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-4").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-5").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-6").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-7").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-8").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-9").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-10").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-11").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-12").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-13").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-14").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-15").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-16").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-17").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-18").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-19").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-20").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-21").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-22").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-23").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-24").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-25").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-26").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-27").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-28").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-29").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-30").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-31").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-32").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-33").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-34").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-35").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-36").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-37").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-38").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-39").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-40").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-41").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-42").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-43").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-44").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-45").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-46").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-47").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-48").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-49").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-50").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-51").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-52").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-53").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-54").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-55").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-56").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-57").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-58").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-59").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-60").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-61").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-62").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-63").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-64").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-65").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-66").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-67").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-68").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-69").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-70").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-71").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-72").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-95-73").trim());
				cronograma.setSDESGRAVAMEN(sdesgravamen);

				ArrayList<String> ssaldo = new ArrayList<String>();
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-1").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-2").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-3").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-4").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-5").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-6").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-7").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-8").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-9").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-10").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-11").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-12").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-13").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-14").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-15").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-16").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-17").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-18").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-19").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-20").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-21").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-22").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-23").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-24").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-25").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-26").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-27").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-28").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-29").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-30").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-31").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-32").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-33").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-34").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-35").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-36").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-37").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-38").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-39").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-40").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-41").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-42").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-43").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-44").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-45").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-46").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-47").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-48").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-49").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-50").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-51").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-52").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-53").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-54").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-55").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-56").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-57").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-58").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-59").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-60").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-61").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-62").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-63").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-64").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-65").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-66").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-67").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-68").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-69").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-70").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-71").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-72").trim());
				ssaldo.add(cronogramaOutPut.getByTag("DFH-SSALDO-95-73").trim());
				cronograma.setSSALDO(ssaldo);

				ArrayList<String> scuota = new ArrayList<String>();
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-1").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-2").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-3").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-4").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-5").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-6").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-7").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-8").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-9").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-10").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-11").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-12").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-13").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-14").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-15").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-16").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-17").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-18").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-19").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-20").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-21").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-22").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-23").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-24").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-25").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-26").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-27").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-28").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-29").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-30").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-31").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-32").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-33").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-34").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-35").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-36").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-37").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-38").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-39").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-40").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-41").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-42").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-43").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-44").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-45").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-46").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-47").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-48").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-49").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-50").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-51").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-52").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-53").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-54").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-55").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-56").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-57").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-58").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-59").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-60").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-61").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-62").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-63").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-64").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-65").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-66").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-67").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-68").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-69").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-70").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-71").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-72").trim());
				scuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-95-73").trim());
				cronograma.setSDCUOTA(scuota);

				ArrayList<String> acuota = new ArrayList<String>();
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-1").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-2").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-3").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-4").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-5").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-6").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-7").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-8").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-9").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-10").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-11").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-12").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-13").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-14").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-15").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-16").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-17").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-18").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-19").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-20").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-21").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-22").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-23").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-24").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-25").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-26").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-27").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-28").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-29").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-30").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-31").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-32").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-33").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-34").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-35").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-36").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-37").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-38").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-39").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-40").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-41").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-42").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-43").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-44").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-45").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-46").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-47").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-48").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-49").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-50").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-51").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-52").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-53").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-54").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-55").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-56").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-57").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-58").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-59").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-60").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-61").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-62").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-63").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-64").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-65").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-66").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-67").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-68").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-69").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-70").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-71").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-72").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-95-73").trim());
				cronograma.setACUOTA(acuota);

				cronograma.setACLIENTE(cronogramaOutPut.getByTag("DFH-ACLIENTE-95").trim());
				cronograma.setDOCUMENTO(cronogramaOutPut.getByTag("DFH-DOCUMENTO-95").trim());
				cronograma.setTELEFONO(cronogramaOutPut.getByTag("DFH-TELEFONO-95").trim());
				cronograma.setDCLIENTE(cronogramaOutPut.getByTag("DFH-DCLIENTE-95").trim());
				cronograma.setDOCUMGAR(cronogramaOutPut.getByTag("DFH-DOCUMGAR-95").trim());
				cronograma.setAGARANTE(cronogramaOutPut.getByTag("DFH-AGARANTE-95").trim());
				cronograma.setDGARANTE(cronogramaOutPut.getByTag("DFH-DGARANTE-95").trim());

				cronograma.setTASA(cronogramaOutPut.getByTag("DFH-TASA-95").trim());

				// cronograma.setTASA(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-TASA-76"),7))+
				// " %");

				// System.out.println("TASA: "+cronograma.getTASA());

				cronograma.setTCEA(cronogramaOutPut.getByTag("DFH-TCEA-95").trim());

				// cronograma.setTCEA(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-TCEA-76"),7))+
				// " %");

				cronograma.setSGCPRO(cronogramaOutPut.getByTag("DFH-SCUOTAP-95").trim());

				// cronograma.setSGCPRO(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-SGCPRO-76"),2))+
				// " %");

				cronograma.setCERROR(cronogramaOutPut.getByTag("DFH-CERROR-96").trim());
				cronograma.setMSJ(cronogramaOutPut.getByTag("DFH-MSJ-95").trim());

				// cronograma.setMSGNO_HOST(cronogramaOutPut.getByTag("msgnoHost").trim());
				// cronograma.setMSJE_HOST(cronogramaOutPut.getByTag("msjeHost").trim());
			}

		} catch (Exception e) {
			// log.error(e,"","");
		}

		String fechaIn = Funciones.eliminarCerosAlaIzquierda(((cronograma.getSGCPRO()).trim()));
		String fIniRepro = fechaIn.substring(0, 8);
		System.out.print("FECHA INICIO :" + fIniRepro);

		String diaRepro = "";
		String mesRepro = "";
		String annioRepro = "";

		if (fIniRepro.equals("")) {
			fIniRepro = "";
		} else {
			annioRepro = (fIniRepro).substring(0, 4);
			mesRepro = (fIniRepro).substring(4, 6);
			diaRepro = (fIniRepro).substring(6, 8);

			fIniRepro = diaRepro + "/" + mesRepro + "/" + annioRepro;
		}

		String fechaDesembolso = cronograma.getFDSBOLSO();
		String diaDesembolso = "";
		String mesDesembolso = "";
		String annioDesembolso = "";

		if (fechaDesembolso.equals("")) {
			fechaDesembolso = "";
		} else {
			annioDesembolso = (cronograma.getFDSBOLSO()).substring(0, 4);
			mesDesembolso = (cronograma.getFDSBOLSO()).substring(4, 6);
			diaDesembolso = (cronograma.getFDSBOLSO()).substring(6, 8);

			fechaDesembolso = diaDesembolso + "/" + mesDesembolso + "/" + annioDesembolso;
		}

		// Formatear Apellidos y Nombres de Cliente
		String aCliente = cronograma.getACLIENTE();

		if (aCliente.equals("")) {
			aCliente = "";
		} else {
			aCliente = (cronograma.getACLIENTE());
		}

		// Formatear Apellidos y Nombres de Garante
		String aGarante = cronograma.getAGARANTE();

		if (aGarante.equals("")) {
			aGarante = "";
		} else {
			aGarante = Funciones.validar_texto_reves(cronograma.getAGARANTE());
		}

		// Formatear DNI de Cliente para pagaré
		String dniCliente = cronograma.getDOCUMENTO();

		if (dniCliente.equals("")) {
			dniCliente = "";
		} else {
			dniCliente = (cronograma.getDOCUMENTO()).substring(4, 14);
		}

		// Formatear DNI de Cliente para Cronograma
		String dniClienteCronograma = cronograma.getDOCUMENTO();

		if (dniClienteCronograma.equals("")) {
			dniClienteCronograma = "";
		} else {
			dniClienteCronograma = (cronograma.getDOCUMENTO()).substring(0, 3) + " "
					+ (cronograma.getDOCUMENTO()).substring(4);
		}

		// Formatear Número de Teléfono de Cliente
		String tlfCliente = cronograma.getTELEFONO();

		if (tlfCliente.equals("")) {
			tlfCliente = "";
		} else {
			tlfCliente = cronograma.getTELEFONO();
		}

		// Formatear DNI de Garante
		String dniGarante = cronograma.getDOCUMGAR();

		if (dniGarante.equals("")) {
			dniGarante = "";
		} else {
			dniGarante = (cronograma.getDOCUMGAR()).substring(4);
		}

		// Formatear Monto de Préstamo
		String deudaTotal = cronograma.getSPRESTAMO();

		if (deudaTotal.equals("")) {
			deudaTotal = "";
		} else {
			deudaTotal = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getSPRESTAMO(), 2));
		}

		// Formatear Tasa Int.
		String tasa = cronograma.getTASA();

		if (tasa.equals("")) {
			tasa = "";
		} else {
			tasa = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getTASA(), 7));
		}

		// Formatear TCEA
		String tcea = cronograma.getTCEA();

		if (tcea.equals("")) {
			tcea = "";
		} else {
			tcea = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getTCEA(), 7));
		}

		// Formatear Seguro de Cuota Protegida
		String seguroCP = cronograma.getSGCPRO();

		if (seguroCP.equals("")) {
			seguroCP = "";
		} else {
			seguroCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getSGCPRO(), 2));
		}

		// Formatear Número de Préstamo para Cronograma

		String nPrestamoCronograma = cronograma.getNPRESTAMO();
		String valor11 = "";
		String valor2 = "";

		if (nPrestamoCronograma.equals("")) {
			nPrestamoCronograma = "";
		} else {
			valor11 = (cronograma.getNPRESTAMO()).substring(0, 11);
			valor2 = (cronograma.getNPRESTAMO()).substring(11, 13);

			nPrestamoCronograma = valor11 + "-" + valor2;
		}

		// Formatear Número de Préstamo para Pagaré

		String nPrestamoPP = cronograma.getNPRESTAMO();

		if (nPrestamoPP.equals("")) {
			nPrestamoPP = "";
		} else {
			nPrestamoPP = cronograma.getNPRESTAMO();
		}

		// Formatear Dirección de Cliente
		String dCliente = cronograma.getDCLIENTE();

		if (dCliente.equals("")) {
			dCliente = "";
		} else {
			dCliente = Funciones.validar_texto_reves(cronograma.getDCLIENTE());
		}

		// Formatear Dirección de Garante
		String dGarante = cronograma.getDGARANTE();

		if (dGarante.equals("")) {
			dGarante = "";
		} else {
			dGarante = Funciones.validar_texto_reves(cronograma.getDGARANTE());
		}

		// GENERACION DE PDF

		response.setContentType("application/pdf");
		response.addHeader("Content-Disposition", "attachment; filename=" + "Prestamo_Multired_" + prestamo + ".pdf");
		// exporter = new JRPdfExporter();

		// -->> itext
		Document document = new Document();
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		PdfWriter copy = null;
		try {
			// pdfprestamo
			copy = PdfWriter.getInstance(document, baos);
			copy.setInitialLeading(5);
		} catch (DocumentException e) {

		}

		document.open();

		try {

			Calendar fecha = new GregorianCalendar();

			int ano111 = fecha.get(Calendar.YEAR);
			int mes111 = (fecha.get(Calendar.MONTH)) + 1;
			int dia111 = fecha.get(Calendar.DAY_OF_MONTH);

			String anoo22 = String.valueOf(ano111);
			String mess22 = String.valueOf(mes111);
			String diaa22 = String.valueOf(dia111);

			if (mess22.length() == 1) {
				mess22 = "0" + mess22;
			}
			if (diaa22.length() == 1) {
				diaa22 = "0" + diaa22;
			}
			String fechaEnv = diaa22 + "/" + mess22 + "/" + anoo22;

			int hora = fecha.get(Calendar.HOUR_OF_DAY);
			int min = fecha.get(Calendar.MINUTE);
			int seg = fecha.get(Calendar.SECOND);

			String horaEnv = hora + ":" + min + ":" + seg;

			Principal codUsu = request.getUserPrincipal();

			// usuario de seguridad
			String usuario = codUsu.getName();

			document.add(creaPDFGenera(nPrestamoCronograma, usuario, fechaEnv, horaEnv));

			document.add(creaPDFCronogramaRepro(fIniRepro, cronograma.getAGARANTE(), cronograma.getDGARANTE(), tcea,
					cronograma.getTELEFONO(), fechaDesembolso, aCliente, dniClienteCronograma, tlfCliente, dCliente,
					aGarante, dniGarante, deudaTotal, cronograma.getSPRESTAMO(), nPrestamoCronograma, tasa, tcea,
					seguroCP, cronograma.getNCUOTAS(), cronograma.getNCUOTA(), cronograma.getFVCTO(),
					cronograma.getSAMORTIZACION(), cronograma.getSINTERES(), cronograma.getSDESGRAVAMEN(),
					cronograma.getSSALDO(), cronograma.getSDCUOTA(), cronograma.getACUOTA()));

		} catch (DocumentException e) {

		}
		document.close();

		byte[] ba = baos.toByteArray();

		Calendar fecha = new GregorianCalendar();

		int ano = fecha.get(Calendar.YEAR);
		int mes = (fecha.get(Calendar.MONTH)) + 1;
		int dia = fecha.get(Calendar.DAY_OF_MONTH);

		String anoo = String.valueOf(ano);
		String mess = String.valueOf(mes);
		String diaa = String.valueOf(dia);

		if (mess.length() == 1) {
			mess = "0" + mess;
		}
		if (diaa.length() == 1) {
			diaa = "0" + diaa;
		}
		String fechaEnv = diaa + "/" + mess + "/" + anoo;

		int hora = fecha.get(Calendar.HOUR_OF_DAY);
		int min = fecha.get(Calendar.MINUTE);
		int seg = fecha.get(Calendar.SECOND);

		String horaEnv = hora + ":" + min + ":" + seg;
		String horaLec = "";
		String fechaLec = "";
		String ipLec = "";
		String estado = "";
		String campo1 = "1"; // Primera vez generado
		String campo2 = "";
		Principal codUsu = request.getUserPrincipal();

		// usuario de seguridad
		String usuario = codUsu.getName();

		// String usuario =
		// datosSesion.setCodUsuario(Util.lpad(datosSesion.getCodUsuario(),4));

		// System.out.println(datosSesion.getCodUsuario(),4);
		// System.out.println(datosSesion.getCodUsuario());

		CargarDocumento cargarPrestamoCronograma = new CargarDocumento();

		String PrestamoConsult = cargarPrestamoCronograma.prestamoConsultaCronograma((prestamo).trim());

		if ((PrestamoConsult.equalsIgnoreCase("1"))) {

			// setting some response headers
			response.setHeader("Expires", "0");
			response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
			response.setHeader("Pragma", "public");
			// setting the content type
			response.setContentType("application/pdf");
			// the contentlength
			response.setContentLength(baos.size());
			// write ByteArrayOutputStream to the ServletOutputStream
			ServletOutputStream outputStream = response.getOutputStream();
			baos.writeTo(outputStream);
			outputStream.flush();
			outputStream.close();
			// System.out.println("Cancelacion");

		} else {

			String prestamoInsert = cargarPrestamoCronograma.prestamoCronograma(prestamo, "PRE REPROGRAMADO", ba, "",
					fechaEnv, horaEnv, fechaLec, horaLec, ipLec, estado, usuario, campo1, campo2);

			// setting some response headers
			response.setHeader("Expires", "0");
			response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
			response.setHeader("Pragma", "public");
			// setting the content type
			response.setContentType("application/pdf");
			// the contentlength
			response.setContentLength(baos.size());
			// write ByteArrayOutputStream to the ServletOutputStream
			ServletOutputStream outputStream = response.getOutputStream();
			baos.writeTo(outputStream);
			outputStream.flush();
			outputStream.close();
			// System.out.println("Cancelacion");

		}
	}

	public static PdfPTable codigo() throws Exception {

		PdfPTable table = new PdfPTable(12);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell cell;

		Phrase datePhrase;

		/*
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(12);
		 * table.addCell(cell);
		 */

		return table;
	}

	public static PdfPTable creaPDFPagare(String aCliente1, String dniCliente1, String direccCliente,
			String distritoCliente, String provinciaCliente, String dptoCliente, String aGarante1, String dniGarante1,
			String direccAval, String distritoAval, String provinciaAval, String dptoAval) {
		// a table with three columns
		// fechaSolic = fechaSolic.substring(6,8) + "/"+
		// fechaSolic.substring(4,6) + "/" + fechaSolic.substring(0,4);
		PdfPTable table = new PdfPTable(6);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		// we add a cell with colspan 3
		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("       TITULAR   ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		// String aCliente1,String dniCliente1,String direccCliente,String
		// distritoCliente,String provinciaCliente,String dptoCliente,
		// aGarante1, String dniGarante1){
		cell = new PdfPCell(
				new Phrase("" + new String(": " + aCliente1) + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("       D.O.I.         ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("" + new String(": " + dniCliente1) + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("       DOMICILIO ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("" + new String(": " + direccCliente) + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("                ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"" + new String("  " + distritoCliente + "     " + provinciaCliente + "     " + dptoCliente) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("       AVAL           ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		// String aCliente1,String dniCliente1,String direccCliente,String
		// distritoCliente,String provinciaCliente,String dptoCliente,
		// aGarante1, String dniGarante1){
		cell = new PdfPCell(
				new Phrase("" + new String(": " + aGarante1) + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("       D.O.I.           ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("" + new String(": " + dniGarante1) + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		// DOMICILIO PAGARE String direccAval, String distritoAval,String
		// provinciaAval,String dptoAval
		cell = new PdfPCell(new Phrase("       DOMICILIO ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("" + new String(": " + direccAval) + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("                ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("" + new String("  " + distritoAval + "     " + provinciaAval + "     " + dptoAval) + "",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFSolicitudPrestamo(String numeroPrestamoRenov, String nro_prestamo,
			String tipoPrestamo, String fechaSolicitudPrestamo, String modalidadPrestamo, String aCliente1,
			String dniCliente1, String fechNacCliente, String eCivilCliente, String sexoCliente,
			String telefonoCliente1, String celularCliente1, String direccCliente, String distritoCliente,
			String provinciaCliente, String dptoCliente, String referenciaCliente, String correoCliente,
			String correspondenciaCliente, String cLaboralCliente, String entidadCliente, String telefonoLaboralCliente,
			String fechaIngresoCliente, String montoIngresosCliente, String aGarante1, String dniGarante1,
			String fechNacGarante, String eCivilGarante, String sexoGarante, String telefonoGarante,
			String celularGarante, String direccGarante, String distritoGarante, String provinciaGarante,
			String dptoGarante, String referenciaGarante, String correoGarante, String correspondenciaGarante,
			String cLaboralGarante, String entidadGarante, String telefonoLaboralGarante, String fechaIngresoGarante,
			String montoIngresosGarante, String montoSolicitadoPrestamo, String montoAbonadoPrestamo,
			String iCuotaProtegidaPrestamo, String iEndosoPrestamo, String iPeriodoGraciaPrestamo,
			String diaVencimientoPagoPrestamo, String tasaPrestamo, String tceaPrestamo, String cuentaCliente,
			String cuentaGarante, String seguroDesgravamenPrestamo, String seguroCuotaProtegidaPrestamo,
			String numeroCuotasPrestamo, String tipoMonedaPrestamo, String montoCuotasPrestamo,
			String numeroPrestamoRenovacion, String saldoDeudaPrestamo, String montoDeudaPrestamo, String gestorAgencia,
			String supervisorPrestamo, String agencia, String oficina, String tipo) {
		// a table with three columns
		// fechaSolic = fechaSolic.substring(6,8) + "/"+
		// fechaSolic.substring(4,6) + "/" + fechaSolic.substring(0,4);
		PdfPTable table = new PdfPTable(6);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		// we add a cell with colspan 3
		Phrase datePhrase;

		cell = new PdfPCell(new Phrase("SOLICITUD DE PRÉSTAMO MULTIRED N° " + nro_prestamo + "",
				FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		String tipoPrestamoN = "";
		String tipoPrestamoR = "";

		if (tipoPrestamo.equals("NUEVO")) {
			tipoPrestamoN = "X";
		}
		if (tipoPrestamo.equals("RENOVACION")) {
			tipoPrestamoR = "X";
		}

		cell = new PdfPCell(new Phrase("Tipo de Préstamo", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		String tipoPrestamoMinuscula = tipoPrestamo.toLowerCase();
		char[] caracteresTipoPrestamo = tipoPrestamoMinuscula.toCharArray();

		if (!tipoPrestamo.equals("")) {

			caracteresTipoPrestamo[0] = Character.toUpperCase(caracteresTipoPrestamo[0]);

			for (int i = 0; i < tipoPrestamo.length() - 2; i++) {
				if (caracteresTipoPrestamo[i] == ' ' || caracteresTipoPrestamo[i] == '.'
						|| caracteresTipoPrestamo[i] == ',') {
					caracteresTipoPrestamo[i + 1] = Character.toUpperCase(caracteresTipoPrestamo[i + 1]);
				}
			}

		}

		cell = new PdfPCell(new Phrase(tipoPrestamo, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Fecha de Solicitud: " + fechaSolicitudPrestamo + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(2);
		table.addCell(cell);

		String modalidadPrestamoM = "";
		String modalidadPrestamoE = "";
		String modalidadPrestamoCD = "";

		if (modalidadPrestamo.equals("PRESTAMO MULTIRED")) {
			modalidadPrestamoM = "X";
		}
		if (modalidadPrestamo.equals("PRESTAMO ESTUDIOS")) {
			modalidadPrestamoE = "X";
		}
		if (modalidadPrestamo.equals("PRESTAMO COMPRA DE DEUDA")) {
			modalidadPrestamoCD = "X";
		}

		cell = new PdfPCell(new Phrase("Modalidad", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		String modalidadPrestamoMinuscula = modalidadPrestamo.toLowerCase();
		char[] caracteresModalidadPrestamo = modalidadPrestamoMinuscula.toCharArray();

		if (!modalidadPrestamo.equals("")) {

			caracteresModalidadPrestamo[0] = Character.toUpperCase(caracteresModalidadPrestamo[0]);

			for (int i = 0; i < modalidadPrestamoMinuscula.length() - 2; i++) {
				if (caracteresModalidadPrestamo[i] == ' ' || caracteresModalidadPrestamo[i] == '.'
						|| caracteresModalidadPrestamo[i] == ',') {
					caracteresModalidadPrestamo[i + 1] = Character.toUpperCase(caracteresModalidadPrestamo[i + 1]);
				}
			}

		}
		cell = new PdfPCell(new Phrase("" + new String(caracteresModalidadPrestamo) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("1.   DATOS DEL TITULAR",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.WHITE)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("INFORMACIÓN PERSONAL", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + aCliente1 + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Documento de Identidad", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Estado Civil", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Sexo", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + dniCliente1 + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + fechNacCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		String eCivilClienteMinuscula = eCivilCliente.toLowerCase();
		char[] caracteresECivil = eCivilClienteMinuscula.toCharArray();

		if (!eCivilCliente.equals("")) {

			caracteresECivil[0] = Character.toUpperCase(caracteresECivil[0]);

			for (int i = 0; i < eCivilClienteMinuscula.length() - 2; i++) {
				if (caracteresECivil[i] == ' ' || caracteresECivil[i] == '.' || caracteresECivil[i] == ',') {
					caracteresECivil[i + 1] = Character.toUpperCase(caracteresECivil[i + 1]);
				}
			}

		}
		cell = new PdfPCell(
				new Phrase("" + new String(caracteresECivil) + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		String sexoClienteMinuscula = sexoCliente.toLowerCase();
		char[] caracteresSexoCliente = sexoClienteMinuscula.toCharArray();

		if (!sexoCliente.equals("")) {
			caracteresSexoCliente[0] = Character.toUpperCase(caracteresSexoCliente[0]);

			for (int i = 0; i < sexoClienteMinuscula.length() - 2; i++) {
				if (caracteresSexoCliente[i] == ' ' || caracteresSexoCliente[i] == '.'
						|| caracteresSexoCliente[i] == ',') {
					caracteresSexoCliente[i + 1] = Character.toUpperCase(caracteresSexoCliente[i + 1]);
				}
			}

		}

		cell = new PdfPCell(new Phrase("" + new String(caracteresSexoCliente) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Teléfono Domicilio", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Teléfono Celular", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + telefonoCliente1 + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + celularCliente1 + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Dirección", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + direccCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Distrito", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Provincia", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Departamento", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + distritoCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + provinciaCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + dptoCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Referencia", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Correo electrónico", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + referenciaCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		// System.out.println("CORREO CLIENTE PDF: "+correoCliente.trim());

		String correoClienteMinuscula = correoCliente.toLowerCase();
		char[] caracteresCorreoCliente = correoClienteMinuscula.toCharArray();

		if (!correoCliente.equals("")) {

			// caracteresCorreoCliente[0] =
			// Character.toUpperCase(caracteresCorreoCliente[0]);

			for (int i = 0; i < correoClienteMinuscula.length() - 2; i++) {
				if (caracteresCorreoCliente[i] == ',') {
					caracteresCorreoCliente[i + 1] = Character.toUpperCase(caracteresCorreoCliente[i + 1]);
				}
			}

		}

		cell = new PdfPCell(new Phrase("" + new String(caracteresCorreoCliente) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.UNDERLINE)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Envío de correspondencia (Contratos y Estados de Cuenta)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		String correspondenciaClienteD = "";
		String correspondenciaClienteCE = "";
		String correspondenciaClienteA = "";

		String coreesp = correspondenciaCliente.substring(1, 2);

		if (correspondenciaCliente.substring(1, 2).equals("1")) {
			correspondenciaClienteD = "X";
			correspondenciaClienteCE = " ";
			correspondenciaClienteA = " ";
			// System.out.println("1");
		}
		if (correspondenciaCliente.substring(1, 2).equals("2")) {
			correspondenciaClienteD = " ";
			correspondenciaClienteCE = "X";
			correspondenciaClienteA = " ";
			// System.out.println("2");
		}
		if (correspondenciaCliente.substring(1, 2).equals("3")) {
			correspondenciaClienteD = " ";
			correspondenciaClienteCE = " ";
			correspondenciaClienteA = "X";
			// System.out.println("3");
		}

		if (!correspondenciaCliente.substring(1, 2).equals("1") && !correspondenciaCliente.substring(1, 2).equals("2")
				&& !correspondenciaCliente.substring(1, 2).equals("3")) {
			correspondenciaClienteD = " ";
			correspondenciaClienteCE = " ";
			correspondenciaClienteA = " ";
			// System.out.println("4");
		}

		datePhrase = new Phrase(new Chunk("Domicilio  ", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		datePhrase.add(new Phrase(new Chunk("" + correspondenciaClienteD + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.UNDERLINE))));
		cell = new PdfPCell(datePhrase);

		// cell = new PdfPCell(new
		// Phrase("Domicilio "+correspondenciaClienteD+"",
		// FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Correo Electrónico  ", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		datePhrase.add(new Phrase(new Chunk("" + correspondenciaClienteCE + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.UNDERLINE))));
		cell = new PdfPCell(datePhrase);

		// cell = new PdfPCell(new
		// Phrase("Correo Electrónico "+correspondenciaClienteCE+"",
		// FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Ambos  ", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		datePhrase.add(new Phrase(new Chunk("" + correspondenciaClienteA + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.UNDERLINE))));
		cell = new PdfPCell(datePhrase);

		// cell = new PdfPCell(new Phrase("Ambos "+correspondenciaClienteA+"",
		// FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("INFORMACIÓN LABORAL / PENSIONARIA",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Condición Laboral", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Entidad Pública", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Teléfono Laboral", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Fecha de Ingreso", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + cLaboralCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + entidadCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		String telLaboralCliente = Funciones.elmiminarCerosAlaIzquierda(telefonoLaboralCliente);

		if (telLaboralCliente.equalsIgnoreCase("")) {
			cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
			cell.setColspan(1);
			table.addCell(cell);
		} else {

			cell = new PdfPCell(
					new Phrase("" + telefonoLaboralCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
			cell.setColspan(1);
			table.addCell(cell);
		}

		cell = new PdfPCell(new Phrase("" + fechaIngresoCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Ingreso Promedio Mensual", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("S/ " + montoIngresosCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2.   DATOS DEL FIADOR/GARANTE",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.WHITE)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("INFORMACIÓN PERSONAL", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Documento de Identidad", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + aGarante1 + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + dniGarante1 + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Estado Civil", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Teléfono Domicilio", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Teléfono Celular", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + eCivilGarante + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + telefonoGarante + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + celularGarante + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Dirección", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + direccGarante + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Distrito", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Provincia", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Departamento", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + distritoGarante + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + provinciaGarante + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + dptoGarante + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Referencia", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Correo electrónico", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		String correoGaranteMinuscula = correoGarante.toLowerCase();
		char[] caracteresCorreoGarante = correoGaranteMinuscula.toCharArray();

		if (!correoGarante.equals("")) {

			// caracteresCorreoGarante[0] =
			// Character.toUpperCase(caracteresCorreoGarante[0]);

			for (int i = 0; i < correoGaranteMinuscula.length() - 2; i++) {
				if (caracteresCorreoGarante[i] == ',') {
					caracteresCorreoGarante[i + 1] = Character.toUpperCase(caracteresCorreoGarante[i + 1]);
				}
			}

		}

		cell = new PdfPCell(new Phrase("" + referenciaGarante + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + new String(caracteresCorreoGarante) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.UNDERLINE)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("INFORMACIÓN LABORAL / PENSIONARIA",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Condición Laboral", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Entidad Pública", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Ingreso Neto Mensual", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + cLaboralGarante + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + entidadGarante + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		if ((montoIngresosGarante.equals(" ")) || (montoIngresosGarante.equalsIgnoreCase("0.00"))) {
			cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
			cell.setColspan(2);
			table.addCell(cell);
		} else {
			cell = new PdfPCell(
					new Phrase("S/" + montoIngresosGarante + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
			cell.setColspan(2);
			table.addCell(cell);
		}

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("3.   DATOS DEL PRÉSTAMO/RENOVACIÓN",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.WHITE)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Importe Solicitado", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Seg. Cuota Protegida", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Periodo de Gracia", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Endoso Seg. Desg.", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("S/ " + montoSolicitadoPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("" + iCuotaProtegidaPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("" + iPeriodoGraciaPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + iEndosoPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Importe Abonado", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Día de Vencimiento", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("TEA", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("TCEA.", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("S/ " + montoAbonadoPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("" + diaVencimientoPagoPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + tasaPrestamo + "%", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + tceaPrestamo + "%", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("N° Cta. Ahorros Titular (*)", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("N° Cta. Ahorros Fiador /Garante (*)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + Funciones.formatearCuenta(cuentaCliente) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Plazo", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Moneda", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Importe Cuota Mensual", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		int numCuotasPrestamo = 0;

		numCuotasPrestamo = Integer.parseInt(numeroCuotasPrestamo);

		cell = new PdfPCell(new Phrase("" + numCuotasPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + tipoMonedaPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("S/ " + montoCuotasPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Seguro de Desgravamen (%)", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Tipo de Seguro", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Seguro Cuota Protegida", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("" + seguroDesgravamenPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);
		// solicutd tipo de seguro a
		cell = new PdfPCell(new Phrase("" + correspondenciaCliente.substring(2) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("" + seguroCuotaProtegidaPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase("Página 1 de 2",
		 * FontFactory.getFont(FontFactory.HELVETICA, 8, BaseColor.GRAY)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_RIGHT); cell.setColspan(6);
		 * table.addCell(cell);
		 */

		datePhrase = new Phrase(new Chunk("IMPORTANTE: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk("Autorizo el cargo automático de la cuota mensual en mi cuenta de ahorros.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);

		// cell = new PdfPCell(new
		// Phrase("IMPORTANTE: Autorizo el cargo automático de la cuota mensual en mi
		// cuenta de ahorros.",
		// FontFactory.getFont(FontFactory.HELVETICA, 10,Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		String mensaje = "";

		if (tipoPrestamo.equals("NUEVO")) {
			mensaje = "Préstamo Nuevo";
		}
		if (tipoPrestamo.equals("RENOVACION")) {
			mensaje = "Renovación del Préstamo";
		}

		cell = new PdfPCell(new Phrase(mensaje, FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		String renovacionPrestamo = "";

		if (tipoPrestamo.equals("NUEVO")) {
			renovacionPrestamo = "N";
			numeroPrestamoRenovacion = "";
		}
		if (tipoPrestamo.equals("RENOVACION")) {
			renovacionPrestamo = "S";
		}

		cell = new PdfPCell(new Phrase("S", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("N° de Préstamo", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		if (tipoPrestamo.equals("NUEVO")) {

			cell = new PdfPCell(new Phrase("00 000 000000 00", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
			cell.setColspan(1);
			table.addCell(cell);
		}
		if (tipoPrestamo.equals("RENOVACION")) {

			cell = new PdfPCell(
					new Phrase("" + numeroPrestamoRenov + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
			cell.setColspan(1);
			table.addCell(cell);
		}

		cell = new PdfPCell(new Phrase("Deuda a la fecha préstamo anterior",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("S/ " + saldoDeudaPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Monto neto a desembolsar", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("S/ " + montoDeudaPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("IMPORTANTE: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(
				new Chunk("Autorizo al Banco a cancelar el préstamo anterior con cargo al desembolso de este préstamo.",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);

		// cell = new PdfPCell(new
		// Phrase("IMPORTANTE: Autorizo al Banco a cancelar el préstamo anterior con
		// cargo al desembolso de este préstamo.",
		// FontFactory.getFont(FontFactory.HELVETICA, 10,Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		//-------------------
		cell = new PdfPCell(new Phrase("4.   AUTORIZACIÓN PARA ENVÍO DE INFORMACIÓN VÍA CORREO ELECTRÓNICO",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.WHITE)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Usted autoriza que el Banco le remita los formularios contractuales que ha suscrito por el otorgamiento del Préstamo Multired, a través del correo electrónico que tiene registrado en el Banco. La información que se le está siendo remitida consiste en: solicitud de préstamo, Hoja Resumen, Cronograma de Pagos, Pagare, Póliza de Seguros Desgravamen y/o Cuota Protegida. Así mismo señala que se ha informado sobre las condiciones contractuales pactadas en las Cláusulas Generales y Especificas del Préstamo Multired, las mismas que tendrá a disposición a través de la página web www.bn.com.pe",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);
		
		cell = new PdfPCell(new Phrase("Autoriza envió por correo electrónico    _____", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("No autoriza envió por correo electrónico    _____", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);
		
		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);
		
				//--------------
		
		cell = new PdfPCell(new Phrase("5.   CARÁCTER DE DECLARACIÓN JURADA",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.WHITE)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La información proporcionada tiene carácter de Declaración Jurada. El Banco se reserva verificarla y solicitar su acreditación. Si se ha omitido, ocultado o registrado información falsa, el Banco se reserva el derecho de iniciar las acciones que correspondan. Autorizo al Banco para que actualice los datos de dirección, correo electrónico y teléfonos consignados en esta solicitud.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("6.   USO INTERNO DEL BANCO",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.WHITE)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Gestión Comercial", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		String gestorNom = "";
		String gestorCod = "";
		if ((gestorAgencia.trim()).length() < 1) {

			gestorNom = gestorAgencia.trim();
			gestorCod = gestorAgencia.trim();
		} else {

			gestorNom = gestorAgencia.substring(5);
			gestorCod = gestorAgencia.substring(0, 5);

		}

		String gestorSuperNom = "";
		String gestorSuperCod = "";
		if ((gestorAgencia.trim()).length() < 1) {

			gestorSuperNom = gestorAgencia.trim();
			gestorSuperCod = gestorAgencia.trim();
		} else {

			gestorSuperNom = gestorAgencia.substring(5);
			gestorSuperCod = gestorAgencia.substring(0, 5);

		}

		cell = new PdfPCell(new Phrase(gestorSuperNom, FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Código", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(gestorCod.trim(), FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Agencia", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(agencia, FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		String funcionarioNom = "";
		String funcionarioCod = "";

		if ((supervisorPrestamo.trim()).length() < 1) {

			funcionarioNom = supervisorPrestamo.trim();
			funcionarioCod = supervisorPrestamo.trim();

		} else {

			funcionarioNom = supervisorPrestamo.substring(5);
			funcionarioCod = supervisorPrestamo.substring(0, 5);
		}

		cell = new PdfPCell(new Phrase("Funcionario", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(funcionarioNom, FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Código", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(funcionarioCod, FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		/*cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);*/

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("________________________________", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("____________________________________", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("FIRMA DEL TITULAR", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("FIRMA DEL FIADOR/GARANTE", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("F.OP-433-D-V02-GNEG", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		/*cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);
*/
		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		return table;
	}

	// -----------------------------HOJA RESUMEN
	// ----------------------------------------
	// ejemplo add pdf
	public static PdfPTable creaPDFHojaResumen(BnHojaResumen cuerpo, String tasaPoliza, String montoAbonadoPrestamo,
			String saldoPrestamo, String saldoInteres, String saldoTasaIC, String saldoTasaIM,
			String sSeguroDesgravamen, String nPolizaDesgravamen, String sPrimaCP, String sEmisionCP, String nPolizaCP,
			String sSeguroCP, String sEndosoCP, String sEnvioCP, String siPagint, String finivigencia, String prefijoCP,
			String noamortcap, List sdesgravamen, String ncuotas, String seguroDesgravamenPrestamo, String compania,
			String tipo) throws Exception {

		PdfPTable table = new PdfPTable(12);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell cell;

		Phrase datePhrase;

		/*
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(12);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase("HOJA RESUMEN INFORMATIVA Y CRONOGRAMA DE PAGOS DEL CONTRATO DE PRESTAMO",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("(Conforme a la Ley N° 28587 y Resolución SBS Nro. 3274-2017 y sus modificatorias)",
						FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		BaseColor myColor = WebColors.getRGBColor("#BDBDBD");

		cell = new PdfPCell(new Phrase("1.- DATOS DEL PRÉSTAMO",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("IMPORTE DEL PRINCIPAL S/", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(myColor);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("NÚMERO DE CUOTAS", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(myColor);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ " + saldoPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(ncuotas, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell = new PdfPCell(new Phrase("S/ "+saldoInteres+"",
		// FontFactory.getFont(FontFactory.HELVETICA, 10)));

		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("TASA DE INTERÉS COMPENSATORIA EFECTIVA ANUAL FIJA (a)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(myColor);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("TASA DE INTERÉS MORATORIA NOMINAL ANUAL (b)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(myColor);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + saldoTasaIC + "%", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + saldoTasaIM + "%", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("(a)", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"y (b) LA TASA DE INTERÉS COMPENSATORIA Y MORATORIA, SE APLICA PARA UN AÑO DE TRESCIENTOS SESENTA (360) DÍAS.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(11);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("(b)", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"LA TASA DE INTERÉS MORATORIA NOMINAL ANUAL SERÁ APLICABLE LUEGO DE 04 DÍAS POSTERIORES DE LA FECHA DE VENCIMIENTO DE LA CUOTA. ANTE EL INCUMPLIMIENTO DEL PAGO  SEGÚN  LAS  CONDICIONES  PACTADAS,  SE  PROCEDERÁ A REALIZAR  EL REPORTE CORRESPONDIENTE A LA CENTRAL DE RIESGOS CON LA CALIFICACIÓN RESPECTIVA, DE CONFORMIDAD CON EL REGLAMENTO PARA LA EVALUACIÓN Y CLASIFICACIÓN DEL DEUDOR Y LA EXIGENCIA DE PROVISIONES VIGENTE.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(11);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("(c)", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"USTED PUEDE RETIRAR LOS FONDOS DE SU PRÉSTAMO OTORGADO A TRAVÉS DE NUESTROS CAJEROS A NIVEL NACIONAL, SUJETO A COMISIONES Y TRIBUTOS, ACORDE A TARIFARIO PUBLICADO EN NUESTRA PÁGINA WEB WWW.BN.COM.PE.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(11);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2.- COMISIONES",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CATEGORIA", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(myColor);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DENOMINACION", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(myColor);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("MONTO (S/)", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(myColor);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SERVICIOS ASOCIADOS AL CRÉDITO",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("ENVÍO FÍSICO DE ESTADO DE CUENTA",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ " + sEnvioCP, FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("(d)", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"ENVIO FISICO DE ESTADO DE CUENTA A LA DIRECCION DE DOMICILIO DECLARADO AL MOMENTO DE REALIZAR EL OTORGAMIENTO DEL PRESTAMO. EL CLIENTE PODRA REALIZAR POSTERIORMENTE LA ACTUALIZACION DEL DOMICILIO, EN CUALQUIERA DE NUESTRAS AGENCIAS A NIVEL NACIONAL Y OTROS CANALES QUE EL BANCO IMPLEMENTE Y QUE SERÁN INFORMADOS A USTED, A TRAVÉS DE LA PÁGINA WEB DEL BANCO (WWW.BN.COM.PE).",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(11);
		table.addCell(cell);

		// String monto = montoAbonadoPrestamo;

		// String decimal = (monto).replace(",", "");

		// BigDecimal mdecimal = new BigDecimal(decimal);
		// BigDecimal mredondeado =
		// mdecimal.setScale(0,BigDecimal.ROUND_HALF_UP);

		/*
		 * 
		 * // System.out.println( " bd22 " +bd22);
		 * 
		 * // int tam = monto.length();
		 * 
		 * // System.out.println( " monto " +monto);
		 * 
		 * // String monto1 = (monto.substring(0, tam-2)).replace(",", "");
		 * 
		 * // System.out.println( " monto1 " +monto1);
		 * 
		 * //BigDecimal bd = new BigDecimal(monto1);
		 * 
		 * //System.out.println( " bd " +bd); BigDecimal b = new BigDecimal("1000");
		 * 
		 * double it=0.05;
		 * 
		 * BigDecimal c = mredondeado.divideToIntegralValue(b);
		 * 
		 * // System.out.println( " c " +c);
		 * 
		 * double itf = (c.doubleValue())*it;
		 * 
		 * String tamItf = String.valueOf(itf);
		 * 
		 * int tamit = tamItf.length(); //System.out.println( " itf"+itf); //
		 * System.out.print( "tamaño itf"+tamit);
		 * 
		 * if (tamit==4){ cell = new PdfPCell(new Phrase("S/ "+itf,
		 * FontFactory.getFont(FontFactory.HELVETICA, 10)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(3);
		 * table.addCell(cell); }else{
		 * 
		 * if (tamit>4){
		 * 
		 * String nuevItf = (String.valueOf(itf)).substring(0, 4);
		 * 
		 * // System.out.println( "nuevItf "+nuevItf);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ "+nuevItf,
		 * FontFactory.getFont(FontFactory.HELVETICA, 10)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * }else{
		 * 
		 * 
		 * if (tamit==3){
		 * 
		 * // System.out.println( "tam3    "+itf);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ "+itf+"0",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * }else{
		 * 
		 * // System.out.println( "itf  ultimo else"+itf);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ "+itf+"0",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * 
		 * }
		 * 
		 * }
		 * 
		 * }
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("COMPAÑÍA DE SEGUROS",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("MONTO DE LA PRIMA (S/) (0.08260% DEL SALDO DEL DEUDOR) *",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("NRO. DE LA PÓLIZA",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("NRO. DE LA PÓLIZA",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("PACÍFICO SEGUROS DE VIDA",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ "+sSeguroDesgravamen+"",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.RIGHT); cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setColspan(4); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("" +nPolizaDesgravamen+"",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.RIGHT); cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setColspan(3); table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("3.- GASTOS", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEGURO DESGRAVAMEN (FRECUENCIA DE PAGO MENSUAL) (*)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(myColor);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("TIPO DEL SEGURO",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(6);
		table.addCell(cell);
		// fifhoja

		/*
		 * System.out.println("******"+tasaPoliza); if(tasaPoliza
		 * .equalsIgnoreCase("000000013300000")){
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("MONTO DE LA PRIMA (S/) (1.33000% DEL SALDO DEUDOR)",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT| Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * 
		 * cell.setColspan(6); table.addCell(cell);
		 * 
		 * }else{
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("MONTO DE LA PRIMA (S/) (0.1200% DEL SALDO DEUDOR)",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT| Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * 
		 * cell.setColspan(6); table.addCell(cell); }
		 */

		cell = new PdfPCell(new Phrase("MONTO DE LA PRIMA (S/) (" + seguroDesgravamenPrestamo + "% DEL SALDO DEUDOR)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(6);
		table.addCell(cell);

		// tipotipo

		cell = new PdfPCell(new Phrase(tipo, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		float saldDesgrav = 0;
		float saldoDesgravamenParaSumaFloat = 0;
		String sDesgravamen = "";
		String saldoDesgravamen = "";
		BigDecimal saldoDesgravamenParaSuma = BigDecimal.ZERO;

		saldoDesgravamenParaSumaFloat = saldoDesgravamenParaSuma.floatValue();

		if (ncuotas.length() == 0) {
			ncuotas = "0";
		}
		int numCuotas = 0;

		numCuotas = Integer.parseInt(ncuotas);

		for (int i = 0; i < numCuotas; i++) {

			sDesgravamen = ((String) sdesgravamen.get(i));

			saldoDesgravamen = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sDesgravamen, 2));
			saldoDesgravamenParaSuma = Funciones.tramaToBigDecimal(sDesgravamen, 2);
			saldoDesgravamenParaSumaFloat = saldoDesgravamenParaSuma.floatValue();

			saldDesgrav = saldDesgrav + saldoDesgravamenParaSumaFloat;

		}

		cell = new PdfPCell(new Phrase("S/ " + Funciones.formatearMonto111(saldDesgrav) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("COMPANÍA DE SEGUROS", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("NRO. DE LA POLIZA", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(compania, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(nPolizaCP + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("RIESGOS OBJETO DE LA COBERTURA (**)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("-        Muerte Natural o Accidental", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(12);
		table.addCell(cell);
		if (tipo.equalsIgnoreCase("RETORNO")) {
			cell = new PdfPCell(new Phrase("-        Invalidez Total y Permanente por Accidente o por Enfermedad",
					FontFactory.getFont(FontFactory.HELVETICA, 10)));
			// cell.setBorder(Rectangle.NO_BORDER);
			cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(12);
			table.addCell(cell);
			cell = new PdfPCell(new Phrase("-        Sobrevivencia", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			// cell.setBorder(Rectangle.NO_BORDER);
			cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(12);
			table.addCell(cell);
		} else {

			cell = new PdfPCell(new Phrase("-        Invalidez Total y Permanente por Accidente o por Enfermedad",
					FontFactory.getFont(FontFactory.HELVETICA, 10)));
			// cell.setBorder(Rectangle.NO_BORDER);
			cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(12);
			table.addCell(cell);

		}

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("4.- OTROS CONCEPTOS",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEGURO DE CUOTA PROTEGIDA (SOLICITADO POR EL CLIENTE)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(myColor);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("COMPANÍA DE SEGUROS",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("MONTO DE LA PRIMA COMERCIAL (S/) ( 0.984 % DEL IMPORTE DEL PRÉSTAMO)(***)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("LA POSITIVA SEGUROS Y REASEGUROS",
				FontFactory.getFont(FontFactory.HELVETICA, 10, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ " + sPrimaCP + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		/*
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "MONTO DE DERECHO DE EMISIÓN (S/) (0.02900% DEL IMPORTE DEL PRÉSTAMO)" ,
		 * FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setBackgroundColor(myColor); cell.setColspan(3); table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase("NRO. DE LA POLIZA",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("MONTO DE LA PRIMA ( PRIMA COMERCIAL + IGV) S/",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + prefijoCP + "-" + nPolizaCP + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ " + sSeguroCP + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("TIPO DEL SEGURO",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("RIESGOS OBJETO DE LA COBERTURA (**)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(9);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("COLECTIVO", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("PRINCIPALES: Desempleo involuntario, Incapacidad Temporal y Hospitalización por accidente.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(9);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"ADICIONALES: Primer diagnóstico de enfermedades graves, Invalidez permanente total por accidente y Pensión Segura (Robo de efectivo retirado por ventanilla)",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(9);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"(*) USTED PUEDE CONTRATAR UNA PÓLIZA DISTINTA A LA OFRECIDA POR EL BANCO DE LA NACION, CON LA COMPAÑÍA DE SEGUROS DE SU ELECCIÓN, Y PRESENTARLA PARA SU EVALUACIÓN, SIN COSTO ADICIONAL",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		cell.setPadding(0);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("(**) EXCLUSIONES INDICADAS EN LAS CORRESPONDIENTES SOLICITUDES ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		cell.setPadding(0);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("(***) SU COBRO ES POR ÚNICA VEZ, AL MOMENTO DEL DESEMBOLSO DEL CREDITO ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		cell.setPadding(0);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Pág. 01 de 02", FontFactory.getFont(FontFactory.HELVETICA, 7)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(12);
		cell.setPadding(0);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("CATEGORÍA", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("DENOMINACIÓN", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SERVICIO INCLUIDO",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("MONTO (S/)", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("IMPUESTO A LAS TRANSACCIONES FINANCIERAS (ITF)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, BaseColor.BLACK)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);
		// hoja de resumen ver datos
		cell = new PdfPCell(new Phrase("0.00500 %", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		String monto = montoAbonadoPrestamo;

		String decimal = (monto).replace(",", "");

		BigDecimal mdecimal = new BigDecimal(decimal);
		BigDecimal mredondeado = mdecimal.setScale(0, BigDecimal.ROUND_HALF_UP);

		// System.out.println( " bd22 " +bd22);

		// int tam = monto.length();

		// System.out.println( " monto " +monto);

		// String monto1 = (monto.substring(0, tam-2)).replace(",", "");

		// System.out.println( " monto1 " +monto1);

		// BigDecimal bd = new BigDecimal(monto1);

		// System.out.println( " bd " +bd);
		BigDecimal b = new BigDecimal("1000");

		double it = 0.05;

		BigDecimal c = mredondeado.divideToIntegralValue(b);

		// System.out.println( " c " +c);

		double itf = (c.doubleValue()) * it;

		String tamItf = String.valueOf(itf);

		int tamit = tamItf.length();
		// System.out.println( " itf"+itf);
		// System.out.print( "tamaño itf"+tamit);

		if (tamit == 4) {
			cell = new PdfPCell(new Phrase("S/ " + itf, FontFactory.getFont(FontFactory.HELVETICA, 10)));
			// cell.setBorder(Rectangle.NO_BORDER);
			cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(3);
			table.addCell(cell);
		} else {

			if (tamit > 4) {

				String nuevItf = (String.valueOf(itf)).substring(0, 4);

				// System.out.println( "nuevItf "+nuevItf);

				cell = new PdfPCell(new Phrase("S/ " + nuevItf, FontFactory.getFont(FontFactory.HELVETICA, 10)));
				// cell.setBorder(Rectangle.NO_BORDER);
				cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setColspan(3);
				table.addCell(cell);

			} else {

				if (tamit == 3) {

					// System.out.println( "tam3 "+itf);

					cell = new PdfPCell(new Phrase("S/ " + itf + "0", FontFactory.getFont(FontFactory.HELVETICA, 10)));
					// cell.setBorder(Rectangle.NO_BORDER);
					cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell.setColspan(3);
					table.addCell(cell);

				} else {

					// System.out.println( "itf ultimo else"+itf);

					cell = new PdfPCell(new Phrase("S/ " + itf + "0", FontFactory.getFont(FontFactory.HELVETICA, 10)));
					// cell.setBorder(Rectangle.NO_BORDER);
					cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell.setColspan(3);
					table.addCell(cell);

				}

			}

		}

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("5.- OPCIONES ADICIONALES",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.BLACK)));
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("OPCIÓN", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(9);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEÑALAR SÍ O NO", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"PERIODO DE GRACIA (A PARTIR DEL SEGUNDO PRESTAMO O SUS RENOVACIONES): EL CLIENTE OPTA POR NO AMORTIZAR EL CAPITAL E INTERESES EN LOS MESES DE ABRIL Y DICIEMBRE. LOS INTERESES GENERADOS EN DICHOS MESES SE CANCELARÁN EN LOS MESES DE MAYO Y ENERO. LAS CUOTAS DE AMORTIZACIÓN DEL CAPITAL DEJADAS DE PAGAR SERÁN INCORPORADAS EN EL RESTO DE LAS CUOTAS.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(9);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(noamortcap, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"PERIODO DE GRACIA (POR UNICA VEZ):                                                                              SÓLO SI EL PRÉSTAMO ES OTORGADO POR PRIMERA VEZ, LUEGO DE LA ENTRADA EN VIGENCIA DE UN CONVENIO DE COLABORACIÓN INTERINSTITUCIONAL CELEBRADO ENTRE EL BANCO Y LA ENTIDAD EN LA QUE LABORA O ES PENSIONISTA: EL CLIENTE Y EL BANCO: EL CLIENTE OPTA, POR ÚNICA VEZ, EN AMORTIZAR SÓLO INTERESES (NO CAPITAL) DURANTE LOS PRIMEROS CUATRO MESES Y NO AMORTIZAR EL CAPITAL E INTERESES EN LOS MESES DE ABRIL Y DICIEMBRE. EN CASO ELIJA ESTA OPCIÓN, A PARTIR DEL QUINTO MES SE INICIARÁ LA AMORTIZACIÓN DEL CAPITAL MÁS LOS INTERESES DEVENGADOS POR EL PRÉSTAMO Y, ADICIONALMENTE, NO AMORTIZARÁ EL CAPITAL E INTERESES EN LOS MESES DE ABRIL Y DICIEMBRE.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(9);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(siPagint, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"EL CLIENTE TIENE DERECHO A EFECTUAR PAGOS ANTICIPADOS PARCIALES O TOTALES, CON LA CONSIGUIENTE REDUCCIÓN DE LOS INTERESES AL DÍA DE PAGO, LAS COMISIONES Y GASTOS. ADEMÁS PODRÁ EFECTUAR ADELANTO DE CUOTAS SIN QUE SE PRODUZCA REDUCCIÓN DE LOS INTERESES, COMISIONES Y GASTOS DERIVADOS DE LAS CLÁUSULAS CONTRACTUALES PACTADAS ENTRE LAS PARTES. EN NINGUNO DE ESTOS CASOS, LES SERÁN APLICABLES COMISIONES, GASTOS O PENALIDADES DE ALGÚN TIPO O COBROS DE NATURALEZA O EFECTO SIMILAR.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"SI PRODUCTO DE DOLO O CULPA DEBIDAMENTE ACREDITADOS, SE INDUCE A ERROR AL CLIENTE Y COMO CONSECUENCIA DE ELLO ÉSTE REALIZA UN PAGO EN EXCESO, DICHO MONTO ES RECUPERABLE Y DEVENGARÁ HASTA SU DEVOLUCIÓN EL MÁXIMO DE LA SUMA POR CONCEPTO DE INTERESES COMPENSATORIOS Y MORATORIOS QUE SE HAYAN PACTADO PARA LA OPERACIÓN CREDITICIA O EN SU DEFECTO, EL INTERÉS LEGAL.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"EL FIADOR SE CONSTITUYE EN FIADOR SOLIDARIO DE EL CLIENTE, SIN BENEFICIO DE EXCUSIÓN, COMPROMETIÉNDOSE A PAGAR LAS OBLIGACIONES ASUMIDAS POR EL CLIENTE A FAVOR DE EL BANCO; INCLUYENDO LOS INTERESES COMPENSATORIOS, MORATORIOS, COMISIONES Y GASTOS DE TODA CLASE, QUE SE DERIVEN DE ESTE CONTRATO, SIN RESERVA NI LIMITACIÓN ALGUNA, ACEPTANDO PARA TAL EFECTO TODAS LAS CONDICIONES  ESTIPULADAS EN EL CONTRATO DE PRÉSTAMO. EL FIADOR SE OBLIGA AL PAGO, EN FORMA INDISTINTA Y SOLIDARIA FRENTE A EL BANCO,  DEL PAGARÉ MENCIONADO EN EL CONTRATO DE PRÉSTAMO. LA FIANZA QUE OTORGA ES SOLIDARIA DE PLAZO INDETERMINADO, INDIVISIBLE E ILIMITADA.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("SE ACOMPAÑA EL CRONOGRAMA DE PAGOS QUE FORMA PARTE DE LA HOJA RESUMEN Y EL CONTRATO.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"EL CLIENTE Y EL FIADOR DECLARA(N) HABER RECIBIDO PARA SU LECTURA EL CONTRATO, EL PAGARÉ, EL CRONOGRAMA DE PAGOS Y LA PRESENTE HOJA RESUMEN Y QUE EL BANCO HA ABSUELTO TODAS SUS DUDAS, SUSCRIBIENDO TODOS LOS DOCUMENTOS QUE EL BANCO LE HA REQUERIDO, CON CONOCIMIENTO PLENO DE LAS CONDICIONES, DERECHOS, OBLIGACIONES Y RESPONSABILIDADES EN ELLOS CONTENIDAS.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Fecha " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("           _____________________________________",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("_____________________________________", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("FIRMA DE EL CLIENTE", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("FIRMA DEL GARANTE", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);
		;
		// ImagenResponse response = new ImagenResponse();

		return table;
	}

	// ----------------------------FIN HOJA
	// RESUMEN----------------------------------------

	public static PdfPTable creaPDFPolizaUnoAdultoPre(String telefonoCliente1, String secpoliza, String acliente,
			String finivigencia, String tipodoc, String sexo, String fenac, String nacionalidad, String correoCliente,
			String estcivil, String telfijo, String telmovil, String ctrabajo, String direccion, String distritoCliente,
			String provinciaCliente, String dptoCliente, String nprestamo, String agencia, String codvendedor)
			throws DocumentException {

		String oficina = agencia;
		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		Phrase datePhrase;
		// we add a cell with colspan 3

		// float[] medidaCeldas = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

		// table.setWidths(medidaCeldas);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Solicitud", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo/Nro.de Documento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Sexo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + sexo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + fenac, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nacionalidad", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nacionalidad, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Estado Civil", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + estcivil, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono Fijo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telefonoCliente1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono Móvil", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telmovil, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Centro de Trabajo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ctrabajo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Domicilio Contractual", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				": Para efectos del presente seguro, mi domicilio contractual será, indistintamente, la dirección física y la dirección electrónica (opcional) que a continuación se indican:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" a) Dirección Física (Particular ó Comercial):",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" b) Dirección Electrónica (Correo electrónico):",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		String correoClienteMinuscula = correoCliente.toLowerCase();
		char[] caracteresCorreoCliente = correoClienteMinuscula.toCharArray();

		if (!correoCliente.equals("")) {

			// caracteresCorreoCliente[0] =
			// Character.toUpperCase(caracteresCorreoCliente[0]);

			for (int i = 0; i < correoClienteMinuscula.length() - 2; i++) {
				if (caracteresCorreoCliente[i] == ',') {
					caracteresCorreoCliente[i + 1] = Character.toUpperCase(caracteresCorreoCliente[i + 1]);
				}
			}

		}

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" " + new String(caracteresCorreoCliente) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Dist/Prov/Dpto", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + distritoCliente + " / " + provinciaCliente + " / " + dptoCliente + "",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro. de Solicitud de Crédito ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   (En adelante el CRÉDITO) ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Oficina", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		String cod = "";
		if ((oficina.trim()).length() < 1) {
			cod = oficina.trim();

		}
		if ((oficina.trim()).length() > 1) {
			cod = oficina.substring(0, 4);

		}

		cell = new PdfPCell(new Phrase(": " + oficina, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Vendedor", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		String codVendedor = codvendedor.substring(0, 4);

		cell = new PdfPCell(new Phrase(": " + codVendedor, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		/*
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */
		return table;

	}

	public static PdfPTable imagePoliza1(Image polizaParte1) throws DocumentException {

		PdfPTable table = new PdfPTable(1);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		Phrase datePhrase;
		// we add a cell with colspan 3

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		cell.setBorder(0);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(polizaParte1);
		cell.setBorder(0);
		cell.setColspan(1);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable imagePoliza2(Image polizaParte2) throws DocumentException {

		PdfPTable table = new PdfPTable(1);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		Phrase datePhrase;
		// we add a cell with colspan 3

		cell = new PdfPCell(polizaParte2);
		cell.setBorder(0);
		cell.setColspan(1);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable imagePoliza1_2(Image polizaParte1_2) throws DocumentException {

		PdfPTable table = new PdfPTable(1);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		Phrase datePhrase;
		// we add a cell with colspan 3

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		cell.setBorder(0);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(polizaParte1_2);
		cell.setBorder(0);
		cell.setColspan(1);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable creaPDFPolizaUnoAdulto(String telefonoCliente1, String secpoliza, String acliente,
			String finivigencia, String tipodoc, String sexo, String fenac, String nacionalidad, String correoCliente,
			String estcivil, String telfijo, String telmovil, String ctrabajo, String direccion, String distritoCliente,
			String provinciaCliente, String dptoCliente, String nprestamo, String agencia, String codvendedor)
			throws DocumentException {

		String oficina = agencia;
		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		Phrase datePhrase;
		// we add a cell with colspan 3

		/*
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "SOLICITUD DE SEGURO / SEGURO DE DESGRAVAMEN INDIVIDUAL 3   1111aaa",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * //1. DATOS DEL CONTRATANTE / ASEGURADO:1
		 * 
		 * cell = new PdfPCell(new Phrase("1. DATOS DEL CONTRATANTE / ASEGURADO:",
		 * FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.WHITE)));
		 * cell.setBackgroundColor(BaseColor.BLACK);
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(8);
		 * table.addCell(cell);
		 */
		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Solicitud", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo/Nro.de Documento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Sexo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + sexo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + fenac, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nacionalidad", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nacionalidad, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Estado Civil", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + estcivil, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono Fijo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telefonoCliente1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono Móvil", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telmovil, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Centro de Trabajo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ctrabajo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Domicilio Contractual", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				": Para efectos del presente seguro, mi domicilio contractual será, indistintamente, la dirección física y la dirección electrónica (opcional) que a continuación se indican:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" a) Dirección Física (Particular ó Comercial):",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" b) Dirección Electrónica (Correo electrónico):",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		String correoClienteMinuscula = correoCliente.toLowerCase();
		char[] caracteresCorreoCliente = correoClienteMinuscula.toCharArray();

		if (!correoCliente.equals("")) {

			// caracteresCorreoCliente[0] =
			// Character.toUpperCase(caracteresCorreoCliente[0]);

			for (int i = 0; i < correoClienteMinuscula.length() - 2; i++) {
				if (caracteresCorreoCliente[i] == ',') {
					caracteresCorreoCliente[i + 1] = Character.toUpperCase(caracteresCorreoCliente[i + 1]);
				}
			}

		}

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" " + new String(caracteresCorreoCliente) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Dist/Prov/Dpto", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + distritoCliente + " / " + provinciaCliente + " / " + dptoCliente + "",
				FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro. de Solicitud de Crédito ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   (En adelante el CRÉDITO)", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Oficina", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		String cod = "";
		if ((oficina.trim()).length() < 1) {
			cod = oficina.trim();

		}

		if ((oficina.trim()).length() > 1) {
			cod = oficina.substring(0, 4);

		}

		cell = new PdfPCell(new Phrase(": " + oficina, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Vendedor", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		String codVendedor = codvendedor.substring(0, 4);

		cell = new PdfPCell(new Phrase(": " + codVendedor, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		/*
		 * 
		 * cell = new PdfPCell(new Phrase("2. COBERTURA(S) Y SUMA ASEGURADA:",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		 * cell.setBackgroundColor(BaseColor.BLACK);
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(8);
		 * cell.setRowspan(1); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("COBERTURA PRINCIPAL",
		 * FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(1);
		 * cell.setRowspan(2); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("DEFINICIONES Y CONDICIONES",
		 * FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(3);
		 * cell.setRowspan(2); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("EXCLUSIONES",
		 * FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(4);
		 * cell.setRowspan(2); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Vida",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.RIGHT |
		 * Rectangle.LEFT); cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setColspan(1); cell.setRowspan(1); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Cubre el fallecimiento del asegurado por causas naturales o accidentales." ,
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		 * 
		 * cell.setBorder(Rectangle.BOTTOM);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * cell.setRowspan(4); table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "a) Lesiones que el Asegurado sufra en actos de guerra civil o internacional, declarada o "
		 * +
		 * "no; invasión, actos de enemigos extranjeros, hostilidades u operaciones bélicas sea que haya habido o"
		 * + " no declaración de guerra, insurrección, sublevación, rebelión, " +
		 * "sedición, motín.                                       b) Participación activa del Asegurado en actos de conmoción contra el orden público dentro o fuera del país, así como en actos delictuosos, "
		 * +
		 * "subversivos o terroristas.                                c) Fisión o fusión nuclear, contaminación "
		 * +
		 * "radioactiva.          d) Suicidio, intento de suicidio, automutilación o autolesión, salvo que, en caso de fallecimiento, la póliza haya estado en vigencia ininterrumpidamente durante dos (2) años."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(4);
		 * cell.setRowspan(4); table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("(Muerte Natural y Muerte Accidental)",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(1);
		 * cell.setRowspan(3); table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("COBERTURAS ADICIONALES",
		 * FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("DEFINICIONES Y CONDICIONES",
		 * FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("EXCLUSIONES",
		 * FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Invalidez Total y Permanente por Accidente"
		 * ,FontFactory.getFont(FontFactory.HELVETICA,9, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * cell.setRowspan(2); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Para los efectos de esta cobertura, únicamente se considera: a) Paraplejia o Cuadriplejia por fractura de columna vertebral; b) Descerebramiento que impida realizar trabajo alguno por el resto de su vida; c) Pérdida total o funcional absoluta de: (i) la visión de ambos ojos, (ii) ambos brazos o ambas manos; (iii) ambas piernas o ambos pies, (iv) una mano y un pie. Es condición necesaria que la invalidez se maniﬁeste a más tardar dentro de los (2) años siguientes de producido un accidente durante la vigencia de la póliza. Se considera como accidente a todo suceso imprevisto, involuntario, repentino y fortuito, causado por medios externos y de un modo violento que afecte el organismo del asegurado, ocasionándole una o más lesiones que se maniﬁesten por contusiones o heridas visibles, y también de los casos de lesiones internas o inmersión reveladas por los exámenes correspondientes."
		 * ,FontFactory.getFont(FontFactory.HELVETICA,9, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.RIGHT); cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setColspan(5); cell.setRowspan(2); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("Rigen las exclusiones establecidas para la cobertura de Vida"
		 * ,FontFactory.getFont(FontFactory.HELVETICA,9, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.RIGHT); cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setColspan(2); cell.setRowspan(6); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Invalidez Total y Permanente por Enfermedad"
		 * ,FontFactory.getFont(FontFactory.HELVETICA,9, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * cell.setRowspan(4); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Pérdida o disminución física o intelectual igual o superior a los 2/3 de su capacidad de trabajo, reconocida por la Compañía utilizando los criterios establecidos para el Sistema Privado de Pensiones."
		 * ,FontFactory.getFont(FontFactory.HELVETICA,9, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.RIGHT); cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setColspan(5); cell.setRowspan(4); table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * datePhrase = new Phrase(new Chunk("SUMA ASEGURADA: ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))); datePhrase.add(new
		 * Phrase(new Chunk("Es el saldo deudor del ",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)))); datePhrase.add(new
		 * Phrase(new Chunk("CRÉDITO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD,
		 * 9)))); datePhrase.add(new Phrase(new Chunk(
		 * "(capital concedido o reprogramado, intereses compensatorios, moratorios, comisiones y primas no cobradas) del Asegurado al momento de ocurrido el siniestro (fallecimiento o configuración de la Invalidez Total y Permanente por Accidente o Enfermedad) "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "hasta el límite de Suma Asegurada según el Rango de Edad que se detalla en el siguiente cuadro"
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		 * datePhrase.add(new Phrase(new Chunk(
		 * ". El pago de cualquiera de estas coberturas genera la terminación del seguro."
		 * , FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("LÍMITE DE SUMA ASEGURADA SEGÚN RANGO DE EDAD:",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * //
		 * 
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("Rango de Edad",FontFactory.getFont(FontFactory
		 * .HELVETICA,10,Font.BOLD))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM |
		 * Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * cell.setRowspan(2); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Sumas Aseguradas Máximas",FontFactory.
		 * getFont(FontFactory.HELVETICA,10,Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(6);
		 * cell.setRowspan(1); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Cobertura Principal",FontFactory.getFont
		 * (FontFactory.HELVETICA,10,Font.BOLD))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * cell.setRowspan(1); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Coberturas Adicionales",FontFactory.getFont
		 * (FontFactory.HELVETICA,10,Font.BOLD))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(4);
		 * cell.setRowspan(1); table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Edad de Ingreso",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Edad de Permanencia",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Vida (Muerte Natural y Muerte Accidental)",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Invalidez Total y Permanente Por Accidente",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Invalidez Total y Permanente Por Enfermedad",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Hasta los 84 años",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("85 y 364 días",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 100,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 100,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 100,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Desde los 84 años y 1 día",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Sin límite",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 3,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("No aplica",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("No aplica",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * //
		 * 
		 * cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA,
		 * 9, Font.BOLD))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("3. VIGENCIA DE LA COBERTURA:",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		 * cell.setBackgroundColor(BaseColor.BLACK);
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * datePhrase = new Phrase(new Chunk("- ",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9))); datePhrase.add(new
		 * Phrase(new Chunk("Inicio de Vigencia",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		 * datePhrase.add(new Phrase(new Chunk(
		 * ": La vigencia de las coberturas otorgadas al amparo del presente seguro se inicia desde que el Contratante efectúe el desembolso del "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); datePhrase.add(new
		 * Phrase(new Chunk("CRÉDITO. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD,
		 * 9)))); cell = new PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * datePhrase = new Phrase(new Chunk("- ",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9))); datePhrase.add(new
		 * Phrase(new Chunk("Fin de Vigencia",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		 * datePhrase.add(new Phrase(new Chunk(
		 * ": Las coberturas otorgadas se mantendrán vigentes mientras concurran las siguientes circunstancias: (i) se encuentre vigente el "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); datePhrase.add(new
		 * Phrase(new Chunk("CRÉDITO o sus reprogramaciones; ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "(ii) el Asegurado se encuentre en el rango de edad indicado en el acápite precedente; y (ii) no se produzcan los supuestos de resolución, extinción y nulidad del seguro."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("4. PRIMA:",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		 * cell.setBackgroundColor(BaseColor.BLACK);
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(8);
		 * table.addCell(cell); //tasita cell = new PdfPCell(new
		 * Phrase("Monto de la prima: ", FontFactory.getFont(FontFactory.HELVETICA, 9,
		 * Font.BOLD))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "•	Para los Asegurados con edad de ingreso hasta los 84 años: 0.1200% sobre el saldo deudor. "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "•	Para los Asegurados con edad de ingreso desde los 84 años y 1 día: 1.33% sobre el saldo deudor.  "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * datePhrase = new Phrase(new Chunk(
		 * "La prima indicada no incluye el IGV. Las pólizas de vida están inafectas al IGV cuando el comprobante de pago es emitido a una persona natural residente en el Perú. La prima se cobrará en forma mensual dentro de la cuota del  "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9))); datePhrase.add(new
		 * Phrase(new Chunk("CRÉDITO ",
		 * FontFactory.getFont(FontFactory.HELVETICA,9,Font.BOLD)))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * ", según el cronograma del mismo. Los pagos efectuados por el Asegurado al" ,
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)))); datePhrase.add(new
		 * Phrase(new Chunk("BANCO DE LA NACIÓN  ",
		 * FontFactory.getFont(FontFactory.HELVETICA,9,Font.BOLD)))); datePhrase.add(new
		 * Phrase(new Chunk("se consideran abonados a la Compañía.",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "El presente seguro no contempla deducibles, franquicias, periodos de carencia ni conceptos similares salvo por los expresamente indicados en el acápite 2 de la presente solicitud. "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("5.BENEFICIARIO DEL SEGURO:",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		 * cell.setBackgroundColor(BaseColor.BLACK);
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "El beneﬁciario de la(s) cobertura(s) del presente seguro es el BANCO DE LA NACIÓN. De determinarse la procedencia del pago de la cobertura, la Compañía pagará al BANCO DE LA NACIÓN, la suma asegurada que corresponda en un solo acto."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new
		 * Phrase(" 6.	DECLARACIONES Y AUTORIZACIONES DEL ASEGURADO:",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		 * cell.setBackgroundColor(BaseColor.BLACK);
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * datePhrase = new Phrase(new Chunk("a) ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "Declaro que las respuestas dadas a la presente solicitud están hechas bajo declaración jurada, son verídicas y completas, y es de mi conocimiento que cualquier omisión, simulación, falsedad de circunstancias relevantes o declaración inexacta, dolosa o mediando culpa inexcusable, determina la nulidad del contrato de conformidad con lo dispuesto en el artículo 8° de la Ley del Contrato de Seguros. De comprobarse, antes del siniestro, alguna declaración inexacta que obedece a dolo o culpa inexcusable, Pacíﬁco Seguros (en adelante la “Compañía”) podrá informarme la revisión del seguro; mi rechazo o silencio ante las nuevas condiciones dará derecho a la Compañía a resolver el contrato de seguro."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * datePhrase = new Phrase(new Chunk("b) ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "Declaro haber sido debidamente informado sobre las condiciones del seguro y conocer que el modelo de la póliza emitido por la Compañía está disponible en la página web de la Compañía (www.paciﬁco.com.pe) y en el Registro de Pólizas de la Superintendencia de Banca, Seguros y AFP bajo Código SBS VI2007400218, el cual es de acceso público a través del “Portal del Usuario” de la página web de dicha institución (www.sbs.gob.pe)."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * datePhrase = new Phrase(new Chunk("c) ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "Solicito y autorizo a la Compañía a notiﬁcarme cualquier comunicación relacionada con el presente seguro a través de la dirección electrónica antes indicada, la misma que constituirá mi domicilio contractual. En caso no haya señalado en la presente solicitud una dirección electrónica, la referida comunicación deberá realizarse a mi dirección física por escrito. Asimismo, me comprometo a informar por escrito cualquier variación de mi dirección con por lo menos quince (15) días de anticipación, caso contrario se considerarán como válidas para todo efecto legal las comunicaciones enviadas a la dirección electrónica o física original. Todas las comunicaciones entre las partes relacionadas al presente seguro deberán ser puestas en conocimiento del BANCO DE LA NACIÓN, en su calidad de beneﬁciario y comercializador del seguro."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * datePhrase = new Phrase(new
		 * Chunk("d) Consentimiento (Ley 29733 - Protección de datos personales):  " ,
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "Para la correcta ejecución de la relación contractual, EL CONTRATANTE / ASEGURADO (“EL CLIENTE”) se obliga a mantener actualizada su información personal, ﬁnanciera y crediticia (“LA INFORMACIÓN”) y reconoce que PACÍFICO SEGUROS podrá tratarla, actualizarla, completarla y realizar ﬂujos transfronterizos conforme a ley."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "PACÍFICO SEGUROS conservará, tratará y realizará ﬂujos transfronterizos con LA INFORMACIÓN de EL CLIENTE mientras se mantenga la relación contractual y luego de veinte (20) años de ﬁnalizado el contrato."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "Para el tratamiento de La INFORMACIÓN de EL CLIENTE, PACÍFICO SEGUROS utilizará diversos Encargados ubicados en el Perú y el extranjero, los cuales se han puesto a disposición del El Cliente y también se encuentran detallados en https://www.paciﬁco.com.pe/transparencia/politica-privacidad. "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "Su información será incluida en el banco de datos de Usuarios que se encuentra registrado ante la Autoridad de Protección de Datos Personales bajo el número de registro RNPDP-PJ N.° 774, de titularidad de PACÍFICO SEGUROS, ubicada en Juan de Arona 830, San Isidro, Lima - Perú."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "EL CLIENTE puede ejercer los derechos de acceso, rectiﬁcación, cancelación, revocación y oposición, dirigiéndose a PACÍFICO SEGUROS de forma presencial en cualquiera de sus oﬁcinas a nivel nacional en el horario establecido para la atención al público o por teléfono o a través del Chat ubicado en nuestra página web www.paciﬁco.com.pe."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "El detalle de nuestra Política de Privacidad se encuentra disponible en https://www.paciﬁco.com.pe/transparencia/politica-privacidad. "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * datePhrase = new Phrase(new Chunk("e) ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "La Compañía entregará la póliza dentro de un plazo de quince (15) días calendario de haberse presentado la solicitud de seguro con todos los requisitos solicitados por la Compañía, si no media rechazo previo. Para estos efectos autorizo a la Compañía a que realice la entrega de la póliza, indistintamente, en la dirección física elegida o en mi dirección electrónica y declaro expresamente: (i) haber sido informado sobre la forma, procedimiento, ventajas y posibles riesgos asociados al envío de la póliza por medios electrónicos; (ii) tener conocimiento sobre las medidas de seguridad que me corresponde aplicar; (iii) conocer que se conﬁrmará la recepción de la póliza a través de un sistema informático que veriﬁca si el correo electrónico enviado llegó a la bandeja de entrada de mi dirección electrónica; y (iv) aceptar que, a efectos de garantizar la autenticidad e integridad de la póliza, esta contará con la ﬁrma electrónica del representante de la Compañía y será enviada, con copia a una entidad Certiﬁcadora, en un archivo PDF encriptado al cual podré acceder digitando el número de mi Documento de Identidad."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "La Compañía es la única y exclusiva responsable por el cumplimiento íntegro de las estipulaciones del presente seguro y es responsable frente al Asegurado de todos los errores u omisiones en que incurra el BANCO DE LA NACIÓN con motivo de la comercialización del mismo. Las comunicaciones cursadas por el Asegurado al BANCO DE LA NACIÓN, por aspectos relacionados con el contrato de seguros, tienen el mismo efecto que si se hubiesen dirigido a la Compañía. Asimismo, los pagos efectuados por el Asegurado al BANCO DE LA NACIÓN, se consideran abonados a la Compañía."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase ("    FECHA DE EMISION:  "+finivigencia,
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase
		 * ("                _________________________                             " ));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (
		 * "                                    Firma del Asegurado                                                                             "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Mediante la ﬁrma escrita o electrónica, el Contratante/Asegurado acepta todas las condiciones del seguro indicadas en la presente solicitud."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * /*cell = new PdfPCell(new Phrase("2/3",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("3/3",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell); cell = new PdfPCell(new Phrase(" "));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		return table;

	}

	public static PdfPTable creaPDFPolizaUnoPre(String agencia, String telefonoCliente1, String secpoliza,
			String acliente, String finivigencia, String tipodoc, String sexo, String fenac, String nacionalidad,
			String correoCliente, String estcivil, String telfijo, String telmovil, String ctrabajo, String direccion,
			String distritoCliente, String provinciaCliente, String dptoCliente, String nprestamo, String oficina,
			String codvendedor) throws DocumentException {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		Phrase datePhrase;
		// we add a cell with colspan 3

		// float[] medidaCeldas = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

		// table.setWidths(medidaCeldas);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Solicitud", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo/Nro.de Documento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Sexo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + sexo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + fenac, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nacionalidad", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nacionalidad, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Estado Civil", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + estcivil, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono Fijo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telefonoCliente1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono Móvil", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telmovil, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Centro de Trabajo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ctrabajo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Edad Máxima de Ingreso", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": El Asegurado podrá afiliarse  hasta el día  que cumpla 84 años de edad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Edad Máxima de Permanencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Hasta el dia que cumpla 85 años de edad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Domicilio Contractual", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				": Para efectos del presente seguro, mi domicilio contractual será, indistintamente, la dirección física y la dirección electrónica (opcional) que a continuación se indican:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" a) Dirección Física (Particular ó Comercial):",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" b) Dirección Electrónica (Correo electrónico):",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		String correoClienteMinuscula = correoCliente.toLowerCase();
		char[] caracteresCorreoCliente = correoClienteMinuscula.toCharArray();

		if (!correoCliente.equals("")) {

			// caracteresCorreoCliente[0] =
			// Character.toUpperCase(caracteresCorreoCliente[0]);

			for (int i = 0; i < correoClienteMinuscula.length() - 2; i++) {
				if (caracteresCorreoCliente[i] == ',') {
					caracteresCorreoCliente[i + 1] = Character.toUpperCase(caracteresCorreoCliente[i + 1]);
				}
			}

		}

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" " + new String(caracteresCorreoCliente) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Dist/Prov/Dpto", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + distritoCliente + " / " + provinciaCliente + " / " + dptoCliente + "",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro. de Solicitud de Crédito ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   (En adelante el CRÉDITO) ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Oficina", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		String cod = "";
		if ((oficina.trim()).length() < 1) {
			cod = oficina.trim();

		}

		if ((oficina.trim()).length() > 1) {
			cod = oficina.substring(0, 4);

		}

		cell = new PdfPCell(new Phrase(": " + agencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Vendedor", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		String codVendedor = codvendedor.substring(0, 4);

		cell = new PdfPCell(new Phrase(": " + codVendedor, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable creaPDFPolizaUno(String agencia, String telefonoCliente1, String secpoliza, String acliente,
			String finivigencia, String tipodoc, String sexo, String fenac, String nacionalidad, String correoCliente,
			String estcivil, String telfijo, String telmovil, String ctrabajo, String direccion, String distritoCliente,
			String provinciaCliente, String dptoCliente, String nprestamo, String oficina, String codvendedor)
			throws DocumentException {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		Phrase datePhrase;
		// we add a cell with colspan 3

		// float[] medidaCeldas = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

		// table.setWidths(medidaCeldas);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SOLICITUD DE SEGURO / SEGURO DE DESGRAVAMEN INDIVIDUAL 3 ",
				FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("1. DATOS DEL CONTRATANTE / ASEGURADO:",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Solicitud", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo/Nro.de Documento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Sexo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + sexo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + fenac, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nacionalidad", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nacionalidad, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Estado Civil", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + estcivil, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono Fijo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telefonoCliente1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono Móvil", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telmovil, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Centro de Trabajo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ctrabajo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Edad Máxima de Ingreso", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": El Asegurado podrá afiliarse  hasta el día  que cumpla 84 años de edad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Edad Máxima de Permanencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Hasta el dia que cumpla 85 años de edad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Domicilio Contractual", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				": Para efectos del presente seguro, mi domicilio contractual será, indistintamente, la dirección física y la dirección electrónica (opcional) que a continuación se indican:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" a) Dirección Física (Particular ó Comercial):",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" b) Dirección Electrónica (Correo electrónico):",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		String correoClienteMinuscula = correoCliente.toLowerCase();
		char[] caracteresCorreoCliente = correoClienteMinuscula.toCharArray();

		if (!correoCliente.equals("")) {

			// caracteresCorreoCliente[0] =
			// Character.toUpperCase(caracteresCorreoCliente[0]);

			for (int i = 0; i < correoClienteMinuscula.length() - 2; i++) {
				if (caracteresCorreoCliente[i] == ',') {
					caracteresCorreoCliente[i + 1] = Character.toUpperCase(caracteresCorreoCliente[i + 1]);
				}
			}

		}

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" " + new String(caracteresCorreoCliente) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Dist/Prov/Dpto", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + distritoCliente + " / " + provinciaCliente + " / " + dptoCliente + "",
				FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro. de Solicitud de Crédito", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   (En adelante el CRÉDITO)  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Oficina", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		String cod = "";
		if ((oficina.trim()).length() < 1) {
			cod = oficina.trim();

		}

		if ((oficina.trim()).length() > 1) {
			cod = oficina.substring(0, 4);

		}

		cell = new PdfPCell(new Phrase(": " + agencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Vendedor", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		String codVendedor = codvendedor.substring(0, 4);

		cell = new PdfPCell(new Phrase(": " + codVendedor, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2. COBERTURA(S) Y SUMA ASEGURADA:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("COBERTURA PRINCIPAL", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(1);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("DEFINICIONES Y CONDICIONES", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(3);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("EXCLUSIONES", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(4);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Vida", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Cubre el fallecimiento del asegurado por causas naturales o accidentales.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));

		cell.setBorder(Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		cell.setRowspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"a) Lesiones que el Asegurado sufra en actos de guerra civil o internacional, declarada o "
						+ "no; invasión, actos de enemigos extranjeros, hostilidades u operaciones bélicas sea que haya habido o"
						+ " no declaración de guerra, insurrección, sublevación, rebelión, "
						+ "sedición, motín.                                       b) Participación activa del Asegurado en actos de conmoción contra el orden público dentro o fuera del país, así como en actos delictuosos, "
						+ "subversivos o terroristas.                                c) Fisión o fusión nuclear, contaminación "
						+ "radioactiva.          d) Suicidio, intento de suicidio, automutilación o autolesión, salvo que, en caso de fallecimiento, la póliza haya estado en vigencia ininterrumpidamente durante dos (2) años.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		cell.setRowspan(4);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("(Muerte Natural y Muerte Accidental)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		cell.setRowspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("COBERTURAS ADICIONALES", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("DEFINICIONES Y CONDICIONES", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("EXCLUSIONES", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente por Accidente",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Para los efectos de esta cobertura, únicamente se considera: a) Paraplejia o Cuadriplejia por fractura de columna vertebral; b) Descerebramiento que impida realizar trabajo alguno por el resto de su vida; c) Pérdida total o funcional absoluta de: (i) la visión de ambos ojos, (ii) ambos brazos o ambas manos; (iii) ambas piernas o ambos pies, (iv) una mano y un pie. Es condición necesaria que la invalidez se maniﬁeste a más tardar dentro de los (2) años siguientes de producido un accidente durante la vigencia de la póliza. Se considera como accidente a todo suceso imprevisto, involuntario, repentino y fortuito, causado por medios externos y de un modo violento que afecte el organismo del asegurado, ocasionándole una o más lesiones que se maniﬁesten por contusiones o heridas visibles, y también de los casos de lesiones internas o inmersión reveladas por los exámenes correspondientes.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Rigen las exclusiones establecidas para la cobertura de Vida",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		cell.setRowspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente por Enfermedad",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Pérdida o disminución física o intelectual igual o superior a los 2/3 de su capacidad de trabajo, reconocida por la Compañía utilizando los criterios establecidos para el Sistema Privado de Pensiones.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		cell.setRowspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("SUMA ASEGURADA: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk("Es el saldo deudor del ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("CRÉDITO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"(capital concedido o reprogramado, intereses compensatorios, moratorios, comisiones y primas no cobradas) del Asegurado al momento de ocurrido el siniestro (fallecimiento o configuración de la Invalidez Total y Permanente por Accidente o Enfermedad) ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"hasta el límite de Suma Asegurada según el Rango de Edad que se detalla en el siguiente cuadro",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		datePhrase.add(
				new Phrase(new Chunk(". El pago de cualquiera de estas coberturas genera la terminación del seguro.",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("LÍMITE DE SUMA ASEGURADA SEGÚN RANGO DE EDAD:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		//

		cell = new PdfPCell(new Phrase("Rango de Edad", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Sumas Aseguradas Máximas", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Cobertura Principal", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Coberturas Adicionales", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(4);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Edad de Ingreso", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Edad de Permanencia", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Vida (Muerte Natural y Muerte Accidental)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente Por Accidente",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente Por Enfermedad",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Hasta los 84 años", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("85 y 364 días", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 100,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 100,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 100,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Desde los 84 años y 1 día", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Sin límite", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 3,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		//

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("3. VIGENCIA DE LA COBERTURA:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("- ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(
				new Chunk("Inicio de Vigencia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				": La vigencia de las coberturas otorgadas al amparo del presente seguro se inicia desde que el Contratante efectúe el desembolso del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("CRÉDITO. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("- ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(
				new Chunk("Fin de Vigencia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				": Las coberturas otorgadas se mantendrán vigentes mientras concurran las siguientes circunstancias: (i) se encuentre vigente el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(
				new Chunk("CRÉDITO o sus reprogramaciones; ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"(ii) el Asegurado se encuentre en el rango de edad indicado en el acápite precedente; y (ii) no se produzcan los supuestos de resolución, extinción y nulidad del seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("4. PRIMA:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);
		// tasita
		cell = new PdfPCell(
				new Phrase("Monto de la prima: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"•	Para los Asegurados con edad de ingreso hasta los 84 años: 0.1200% sobre el saldo deudor. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"•	Para los Asegurados con edad de ingreso desde los 84 años y 1 día: 1.33% sobre el saldo deudor.  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"La prima indicada no incluye el IGV. Las pólizas de vida están inafectas al IGV cuando el comprobante de pago es emitido a una persona natural residente en el Perú. La prima se cobrará en forma mensual dentro de la cuota del  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("CRÉDITO ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD))));
		datePhrase.add(new Phrase(new Chunk(", según el cronograma del mismo. Los pagos efectuados por el Asegurado al",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(
				new Chunk("BANCO DE LA NACIÓN  ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD))));
		datePhrase.add(new Phrase(
				new Chunk("se consideran abonados a la Compañía.", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El presente seguro no contempla deducibles, franquicias, periodos de carencia ni conceptos similares salvo por los expresamente indicados en el acápite 2 de la presente solicitud. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("5.BENEFICIARIO DEL SEGURO:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El beneﬁciario de la(s) cobertura(s) del presente seguro es el BANCO DE LA NACIÓN. De determinarse la procedencia del pago de la cobertura, la Compañía pagará al BANCO DE LA NACIÓN, la suma asegurada que corresponda en un solo acto.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" 6.	DECLARACIONES Y AUTORIZACIONES DEL ASEGURADO:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("a) ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"Declaro que las respuestas dadas a la presente solicitud están hechas bajo declaración jurada, son verídicas y completas, y es de mi conocimiento que cualquier omisión, simulación, falsedad de circunstancias relevantes o declaración inexacta, dolosa o mediando culpa inexcusable, determina la nulidad del contrato de conformidad con lo dispuesto en el artículo 8° de la Ley del Contrato de Seguros. De comprobarse, antes del siniestro, alguna declaración inexacta que obedece a dolo o culpa inexcusable, Pacíﬁco Seguros (en adelante la “Compañía”) podrá informarme la revisión del seguro; mi rechazo o silencio ante las nuevas condiciones dará derecho a la Compañía a resolver el contrato de seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("b) ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"Declaro haber sido debidamente informado sobre las condiciones del seguro y conocer que el modelo de la póliza emitido por la Compañía está disponible en la página web de la Compañía (www.paciﬁco.com.pe) y en el Registro de Pólizas de la Superintendencia de Banca, Seguros y AFP bajo Código SBS VI2007400218, el cual es de acceso público a través del “Portal del Usuario” de la página web de dicha institución (www.sbs.gob.pe).",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("c) ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"Solicito y autorizo a la Compañía a notiﬁcarme cualquier comunicación relacionada con el presente seguro a través de la dirección electrónica antes indicada, la misma que constituirá mi domicilio contractual. En caso no haya señalado en la presente solicitud una dirección electrónica, la referida comunicación deberá realizarse a mi dirección física por escrito. Asimismo, me comprometo a informar por escrito cualquier variación de mi dirección con por lo menos quince (15) días de anticipación, caso contrario se considerarán como válidas para todo efecto legal las comunicaciones enviadas a la dirección electrónica o física original. Todas las comunicaciones entre las partes relacionadas al presente seguro deberán ser puestas en conocimiento del BANCO DE LA NACIÓN, en su calidad de beneﬁciario y comercializador del seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("d) Consentimiento (Ley 29733 - Protección de datos personales):  ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"Para la correcta ejecución de la relación contractual, EL CONTRATANTE / ASEGURADO (“EL CLIENTE”) se obliga a mantener actualizada su información personal, ﬁnanciera y crediticia (“LA INFORMACIÓN”) y reconoce que PACÍFICO SEGUROS podrá tratarla, actualizarla, completarla y realizar ﬂujos transfronterizos conforme a ley.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"PACÍFICO SEGUROS conservará, tratará y realizará ﬂujos transfronterizos con LA INFORMACIÓN de EL CLIENTE mientras se mantenga la relación contractual y luego de veinte (20) años de ﬁnalizado el contrato.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"Para el tratamiento de La INFORMACIÓN de EL CLIENTE, PACÍFICO SEGUROS utilizará diversos Encargados ubicados en el Perú y el extranjero, los cuales se han puesto a disposición del El Cliente y también se encuentran detallados en https://www.paciﬁco.com.pe/transparencia/politica-privacidad. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"Su información será incluida en el banco de datos de Usuarios que se encuentra registrado ante la Autoridad de Protección de Datos Personales bajo el número de registro RNPDP-PJ N.° 774, de titularidad de PACÍFICO SEGUROS, ubicada en Juan de Arona 830, San Isidro, Lima - Perú.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"EL CLIENTE puede ejercer los derechos de acceso, rectiﬁcación, cancelación, revocación y oposición, dirigiéndose a PACÍFICO SEGUROS de forma presencial en cualquiera de sus oﬁcinas a nivel nacional en el horario establecido para la atención al público o por teléfono o a través del Chat ubicado en nuestra página web www.paciﬁco.com.pe.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"El detalle de nuestra Política de Privacidad se encuentra disponible en https://www.paciﬁco.com.pe/transparencia/politica-privacidad. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("e) ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"La Compañía entregará la póliza dentro de un plazo de quince (15) días calendario de haberse presentado la solicitud de seguro con todos los requisitos solicitados por la Compañía, si no media rechazo previo. Para estos efectos autorizo a la Compañía a que realice la entrega de la póliza, indistintamente, en la dirección física elegida o en mi dirección electrónica y declaro expresamente: (i) haber sido informado sobre la forma, procedimiento, ventajas y posibles riesgos asociados al envío de la póliza por medios electrónicos; (ii) tener conocimiento sobre las medidas de seguridad que me corresponde aplicar; (iii) conocer que se conﬁrmará la recepción de la póliza a través de un sistema informático que veriﬁca si el correo electrónico enviado llegó a la bandeja de entrada de mi dirección electrónica; y (iv) aceptar que, a efectos de garantizar la autenticidad e integridad de la póliza, esta contará con la ﬁrma electrónica del representante de la Compañía y será enviada, con copia a una entidad Certiﬁcadora, en un archivo PDF encriptado al cual podré acceder digitando el número de mi Documento de Identidad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La Compañía es la única y exclusiva responsable por el cumplimiento íntegro de las estipulaciones del presente seguro y es responsable frente al Asegurado de todos los errores u omisiones en que incurra el BANCO DE LA NACIÓN con motivo de la comercialización del mismo. Las comunicaciones cursadas por el Asegurado al BANCO DE LA NACIÓN, por aspectos relacionados con el contrato de seguros, tienen el mismo efecto que si se hubiesen dirigido a la Compañía. Asimismo, los pagos efectuados por el Asegurado al BANCO DE LA NACIÓN, se consideran abonados a la Compañía.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("    FECHA DE EMISION:  " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("                _________________________                              "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"                                    Firma del Asegurado                                                                              ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Mediante la ﬁrma escrita o electrónica, el Contratante/Asegurado acepta todas las condiciones del seguro indicadas en la presente solicitud.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable creaPDFPolizaDosAdultoPre(String secpoliza, String cuota, String finivigencia,
			String ftervigencia, String nprestamo, String acliente, String tipodoc, String correoCliente,
			String direccion) throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell cell;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo de Póliza ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Desgravamen Individual", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Código SBS ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": VI2007400134,  póliza adecuada a la Ley N° 29946 y sus normas reglamentarias.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Póliza", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Moneda del Contrato", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Nuevos Soles", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Plazo de Contratación", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + cuota, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha de Fin de Vigencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ftervigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha de Inicio de Vigencia ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro. de Solicitud del Crédito", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   (En adelante Crédito)", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo y N° de Documento de Identidad",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Domicilio Contractual", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   a) Dirección Electrónica ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + correoCliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   b) Dirección Física ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell); cell = new PdfPCell(new Phrase (" "));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 */
		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFPolizaDosAdulto(String secpoliza, String cuota, String finivigencia,
			String ftervigencia, String nprestamo, String acliente, String tipodoc, String correoCliente,
			String direccion) throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell cell;

		Phrase datePhrase;

		/*
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo de Póliza ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Desgravamen Individual", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Código SBS ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": VI2007400218,  póliza adecuada a la Ley N° 29946 y sus normas reglamentarias.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Póliza", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": 58700  -  " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Moneda del Contrato", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Nuevos Soles", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Plazo de Contratación", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + cuota, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha de Fin de Vigencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ftervigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha de Inicio de Vigencia ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Solicitud del Crédito (En adelante Crédito)",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo y N° de Documento de Identidad",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Domicilio Contractual", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   a) Dirección Electrónica ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + correoCliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   b) Dirección Física ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		/*
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Se deja expresa constancia que el Contratante autoriza a Pacífico Seguros a notificarle cualquier comunicación relacionada con el presente seguro a través de la dirección electrónica antes indicada, la misma que constituirá su domicilio contractual. En caso no haya señalado una dirección electrónica, la referida comunicación deberá realizarse por escrito a la dirección física del Contratante. Asimismo, el Contratante se compromete a informar por escrito cualquier variación del domicilio contractual con, por lo menos, quince (15) días de anticipación, caso contrario se considerarán como válidas, para todo efecto legal, las notificaciones enviadas a la dirección electrónica o física original. Todas las comunicaciones entre las partes relacionadas al presente seguro deberán ser puestas en conocimiento del Beneficiario."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.RIGHT |
		 * Rectangle.LEFT); cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setColspan(5); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("4. PRIMA COMERCIAL",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("   TASA MENSUAL",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * ": 0.1200% sobre el Saldo Deudor para los Asegurados con edad de ingreso hasta los 84 años."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * ": 1.33% sobre el Saldo Deudor para los Asegurados con edad de ingreso desde los 84 años y 1 día."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("   FORMA DE PAGO ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new
		 * Phrase(": Conforme al pago de las cuotas del Crédito Asociado.",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("   LUGAR DE PAGO ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(": Oficinas de EL BANCO DE LA NACIÓN.",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("   FECHA DE VENCIMIENTO DE PAGO ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(": Según las fechas de pago del Crédito.",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("   FRECUENCIA DE PAGO ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(": Mensual",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder( Rectangle.BOTTOM |
		 * Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * /*cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		/*
		 * cell = new PdfPCell(new Phrase("3/18",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * datePhrase = new Phrase(new Chunk(
		 * "La tasa indicada no incluye el IGV. Las pólizas de vida están inafectas al IGV cuando el comprobante de pago es emitido a una persona natural residente en el Perú. La prima incluye la comisión (o cargos por la comercialización) que se indica en el acápite 2 de las presentes Condiciones Particulares. "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "El presente seguro no contempla deducibles, franquicias, periodos de carencia ni conceptos similares, salvo por los expresamente indicados en el acápite 6 de las Condiciones Particulares."
		 * , FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("5. BENEFICIARIO",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "El Beneficiario de la(s) cobertura(s) otorgada(s) en virtud de la presente póliza es el BANCO DE LA NACIÓN."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.RIGHT |
		 * Rectangle.LEFT); cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setColspan(5); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("6. SUMA ASEGURADA Y COBERTURA(S)",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("SUMA ASEGURADA                             :",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Saldo deudor del Crédito (capital concedido o reprogramado, intereses compensatorios, moratorios, comisiones y primas no cobradas) a la fecha del siniestro, hasta el límite máximo por Asegurado especiﬁcado para cada cobertura, según el rango de edad que se indica:"
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("Rango de Edad",FontFactory.getFont(FontFactory
		 * .HELVETICA,10,Font.BOLD))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM |
		 * Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * cell.setRowspan(2); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Sumas Aseguradas Máximas(*)",FontFactory
		 * .getFont(FontFactory.HELVETICA,10,Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(3);
		 * cell.setRowspan(1); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Cobertura Principal",FontFactory.getFont
		 * (FontFactory.HELVETICA,10,Font.BOLD))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * cell.setRowspan(1); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Coberturas Adicionales",FontFactory.getFont
		 * (FontFactory.HELVETICA,10,Font.BOLD))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * cell.setRowspan(1); table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Edad de Ingreso",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Edad de Permanencia",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Vida (Muerte Natural y Muerte Accidental)",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Invalidez Total y Permanente Por Accidente",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("Invalidez Total y Permanente Por Enfermedad(**)",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Hasta los 84 años",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("85 y 364 días",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 100,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 100,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 100,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Desde los 84 años y 1 día",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Sin límite",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 3,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("No aplica",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("No aplica",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "(*) Límite aplicable a todos los créditos asegurados o reprogramados." ,
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder( Rectangle.LEFT|
		 * Rectangle.RIGHT); cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		 * cell.setColspan(5); table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("(**)Sin Periodo de carencia.",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.LEFT | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Pacífico Compañía de Seguros y Reaseguros, denominada en adelante “LA COMPAÑÍA”, con R.U.C. N° 20332970411, con domicilio en Av. Juan de Arona 830, Lima, teléfono 4500-518, emite la presente póliza de conformidad con las estipulaciones contenidas en las Condiciones Particulares y Generales de la misma."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Las comunicaciones cursadas por el Contratante y/o Asegurado a través del BANCO DE LA NACIÓN sobre aspectos relacionados con el contrato de seguros, tienen el mismo efecto que si se hubiesen dirigido a la COMPAÑÍA. Asimismo los pagos efectuados por el Asegurado al BANCO DE LA NACIÓN, se consideran abonados a LA COMPAÑÍA. Se deja expresa constancia que el presente seguro forma parte del Registro Nacional de Información de Contratos de Seguros de Vida y de Accidentes Personales con Cobertura de Fallecimiento o de Muerte Accidental, creado mediante Ley 29355."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "EN FE DE LO CUAL, la presente ha sido firmada por el Contratante y los funcionarios de LA COMPAÑÍA debidamente autorizados para ello."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("LIMA, "+finivigencia,
		 * FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * /*cell = new PdfPCell(new Phrase("4/18",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);
		return table;
	}

	public static PdfPTable creaPDFPolizaDosAdultoOtro(String secpoliza, String cuota, String finivigencia,
			String ftervigencia, String nprestamo, String acliente, String tipodoc, String correoCliente,
			String direccion) throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell cell;

		Phrase datePhrase;

		/*
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo de Póliza ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Desgravamen Individual", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Código SBS ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": VI2007400247,  póliza adecuada a la Ley N° 29946 y sus normas reglamentarias.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Póliza", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": 0086328  -  " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Moneda del Contrato", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Nuevos Soles", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Plazo de Contratación", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + cuota, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha de Fin de Vigencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ftervigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha de Inicio de Vigencia ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Solicitud del Crédito (En adelante Crédito)",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo y N° de Documento de Identidad",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Domicilio Contractual", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   a) Dirección Electrónica ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + correoCliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   b) Dirección Física ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(0);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(0);
		cell.setColspan(3);
		table.addCell(cell);

		/*
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Se deja expresa constancia que el Contratante autoriza a Pacífico Seguros a notificarle cualquier comunicación relacionada con el presente seguro a través de la dirección electrónica antes indicada, la misma que constituirá su domicilio contractual. En caso no haya señalado una dirección electrónica, la referida comunicación deberá realizarse por escrito a la dirección física del Contratante. Asimismo, el Contratante se compromete a informar por escrito cualquier variación del domicilio contractual con, por lo menos, quince (15) días de anticipación, caso contrario se considerarán como válidas, para todo efecto legal, las notificaciones enviadas a la dirección electrónica o física original. Todas las comunicaciones entre las partes relacionadas al presente seguro deberán ser puestas en conocimiento del Beneficiario."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.RIGHT |
		 * Rectangle.LEFT); cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setColspan(5); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("4. PRIMA COMERCIAL",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("   TASA MENSUAL",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * ": 0.1200% sobre el Saldo Deudor para los Asegurados con edad de ingreso hasta los 84 años."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * ": 1.33% sobre el Saldo Deudor para los Asegurados con edad de ingreso desde los 84 años y 1 día."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("   FORMA DE PAGO ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new
		 * Phrase(": Conforme al pago de las cuotas del Crédito Asociado.",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("   LUGAR DE PAGO ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(": Oficinas de EL BANCO DE LA NACIÓN.",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("   FECHA DE VENCIMIENTO DE PAGO ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(": Según las fechas de pago del Crédito.",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("   FRECUENCIA DE PAGO ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(": Mensual",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder( Rectangle.BOTTOM |
		 * Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * /*cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		/*
		 * cell = new PdfPCell(new Phrase("3/18",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * datePhrase = new Phrase(new Chunk(
		 * "La tasa indicada no incluye el IGV. Las pólizas de vida están inafectas al IGV cuando el comprobante de pago es emitido a una persona natural residente en el Perú. La prima incluye la comisión (o cargos por la comercialización) que se indica en el acápite 2 de las presentes Condiciones Particulares. "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "El presente seguro no contempla deducibles, franquicias, periodos de carencia ni conceptos similares, salvo por los expresamente indicados en el acápite 6 de las Condiciones Particulares."
		 * , FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("5. BENEFICIARIO",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "El Beneficiario de la(s) cobertura(s) otorgada(s) en virtud de la presente póliza es el BANCO DE LA NACIÓN."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.RIGHT |
		 * Rectangle.LEFT); cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setColspan(5); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("6. SUMA ASEGURADA Y COBERTURA(S)",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("SUMA ASEGURADA                             :",
		 * FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Saldo deudor del Crédito (capital concedido o reprogramado, intereses compensatorios, moratorios, comisiones y primas no cobradas) a la fecha del siniestro, hasta el límite máximo por Asegurado especiﬁcado para cada cobertura, según el rango de edad que se indica:"
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("Rango de Edad",FontFactory.getFont(FontFactory
		 * .HELVETICA,10,Font.BOLD))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM |
		 * Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * cell.setRowspan(2); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Sumas Aseguradas Máximas(*)",FontFactory
		 * .getFont(FontFactory.HELVETICA,10,Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(3);
		 * cell.setRowspan(1); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Cobertura Principal",FontFactory.getFont
		 * (FontFactory.HELVETICA,10,Font.BOLD))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * cell.setRowspan(1); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Coberturas Adicionales",FontFactory.getFont
		 * (FontFactory.HELVETICA,10,Font.BOLD))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(2);
		 * cell.setRowspan(1); table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Edad de Ingreso",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Edad de Permanencia",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Vida (Muerte Natural y Muerte Accidental)",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Invalidez Total y Permanente Por Accidente",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("Invalidez Total y Permanente Por Enfermedad(**)",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Hasta los 84 años",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("85 y 364 días",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 100,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 100,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 100,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Desde los 84 años y 1 día",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Sin límite",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("S/ 3,000.00",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("No aplica",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("No aplica",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "(*) Límite aplicable a todos los créditos asegurados o reprogramados." ,
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER); cell.setBorder( Rectangle.LEFT|
		 * Rectangle.RIGHT); cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		 * cell.setColspan(5); table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("(**)Sin Periodo de carencia.",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.BOTTOM |
		 * Rectangle.LEFT | Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Pacífico Compañía de Seguros y Reaseguros, denominada en adelante “LA COMPAÑÍA”, con R.U.C. N° 20332970411, con domicilio en Av. Juan de Arona 830, Lima, teléfono 4500-518, emite la presente póliza de conformidad con las estipulaciones contenidas en las Condiciones Particulares y Generales de la misma."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "Las comunicaciones cursadas por el Contratante y/o Asegurado a través del BANCO DE LA NACIÓN sobre aspectos relacionados con el contrato de seguros, tienen el mismo efecto que si se hubiesen dirigido a la COMPAÑÍA. Asimismo los pagos efectuados por el Asegurado al BANCO DE LA NACIÓN, se consideran abonados a LA COMPAÑÍA. Se deja expresa constancia que el presente seguro forma parte del Registro Nacional de Información de Contratos de Seguros de Vida y de Accidentes Personales con Cobertura de Fallecimiento o de Muerte Accidental, creado mediante Ley 29355."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "EN FE DE LO CUAL, la presente ha sido firmada por el Contratante y los funcionarios de LA COMPAÑÍA debidamente autorizados para ello."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("LIMA, "+finivigencia,
		 * FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * /*cell = new PdfPCell(new Phrase("4/18",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(0);

		cell.setColspan(5);
		table.addCell(cell);
		return table;
	}

	public static PdfPTable creaPDFPolizaFirma() throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell cell;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(
				"____________________                  ____________________                  ____________________"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"  PACÍFICO SEGUROS                       PACÍFICO SEGUROS                          CONTRATANTE"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("     LUCIANO BEDOYA                                    DANTE LINDLEY",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFPolizaDosPre(String secpoliza, String cuota, String finivigencia,
			String ftervigencia, String nprestamo, String acliente, String tipodoc, String correoCliente,
			String direccion) throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell cell;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo de Póliza ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Desgravamen Individual", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Código SBS ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": VI2007400218,  póliza adecuada a la Ley N° 29946 y sus normas reglamentarias.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Póliza", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Moneda del Contrato", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Nuevos Soles", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Plazo de Contratación", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + cuota, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha de Fin de Vigencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ftervigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro. de Solicitud del Crédito", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   (En adelante Crédito)", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo y N° de Documento de Identidad",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Edad Máxima de Ingreso", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Hasta el día que cumple 84 años de edad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Edad Máxima de Permanencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Hasta el día que cumple 85 años de edad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Domicilio Contractual", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   a) Dirección Electrónica ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + correoCliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   b) Dirección Física ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFPolizaDos(String secpoliza, String cuota, String finivigencia, String ftervigencia,
			String nprestamo, String acliente, String tipodoc, String correoCliente, String direccion)
			throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell cell;

		Phrase datePhrase;

		/*
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase("PÓLIZA INDIVIDUAL DE SEGURO DE VIDA TEMPORAL",
				FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEGURO DE DESGRAVAMEN INDIVIDUAL 3",
				FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("CONDICIONES PARTICULARES", FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("1. DATOS DE LA PÓLIZA", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo de Póliza ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Desgravamen Individual", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Código SBS ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": VI2007400134,  póliza adecuada a la Ley N° 29946 y sus normas reglamentarias.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Póliza", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Moneda del Contrato", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Nuevos Soles", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Plazo de Contratación", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + cuota, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha de Fin de Vigencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ftervigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro. de Solicitud del Crédito", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   (En adelante Crédito)", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La presente póliza forma parte del Registro Nacional de Información de Contratos de Seguros de Vida y de Accidentes Personales con Cobertura de Fallecimiento o de Muerte Accidental, creado mediante Ley 29355.",
				FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2. COMERCIALIZADOR (ENTIDAD FINANCIERA)",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   DENOMINACIÓN O RAZÓN SOCIAL", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": BANCO DE LA NACIÓN", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   R.U.C N°", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": 201000030595", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   COMISIÓN", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": 0.4", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La comisión del comercializador o intermediario está incluida en la prima comercial y se calcula sin considerar el factor de gestión.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("3. CONTRATANTE / ASEGURADO", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo y N° de Documento de Identidad",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Edad Máxima de Ingreso", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Hasta el día que cumple 84 años de edad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Edad Máxima de Permanencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Hasta el día que cumple 85 años de edad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Domicilio Contractual", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   a) Dirección Electrónica ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + correoCliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   b) Dirección Física ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Se deja expresa constancia que el Contratante autoriza a Pacífico Seguros de Vida a notificarle cualquier comunicación relacionada con el presente seguro a través de la dirección electrónica antes indicada, la misma que constituirá su domicilio contractual. En caso no haya señalado una dirección electrónica, la referida comunicación deberá realizarse por escrito a la dirección física del Contratante. Asimismo, el Contratante se compromete a informar por escrito cualquier variación del domicilio contractual con, por lo menos, quince (15) días de anticipación, caso contrario se considerarán como válidas, para todo efecto legal, las notificaciones enviadas a la dirección electrónica o física original. Todas las comunicaciones entre las partes relacionadas al presente seguro deberán ser puestas en conocimiento del Beneficiario.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("4. PRIMA COMERCIAL", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   TASA MENSUAL", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": 0.1200% sobre el Saldo Deudor para los Asegurados con edad de ingreso hasta los 84 años.",
						FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				": 1.33% sobre el Saldo Deudor para los Asegurados con edad de ingreso desde los 84 años y 1 día.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   FORMA DE PAGO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Conforme al pago de las cuotas del Crédito Asociado.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   LUGAR DE PAGO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": Oficinas de EL BANCO DE LA NACIÓN.", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   FECHA DE VENCIMIENTO DE PAGO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": Según las fechas de pago del Crédito.", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   FRECUENCIA DE PAGO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Mensual", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		/*
		 * cell = new PdfPCell(new Phrase("3/18",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(5);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"La tasa indicada no incluye el IGV. Las pólizas de vida están inafectas al IGV cuando el comprobante de pago es emitido a una persona natural residente en el Perú. La prima incluye la comisión (o cargos por la comercialización) que se indica en el acápite 2 de las presentes Condiciones Particulares.  ",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		datePhrase.add(new Phrase(new Chunk(
				"El presente seguro no contempla deducibles, franquicias, periodos de carencia ni conceptos similares, salvo por los expresamente indicados en el acápite 6 de las Condiciones Particulares.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("5. BENEFICIARIO", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" El Beneficiario de la(s) cobertura(s) otorgada(s) en virtud de la presente póliza es el BANCO DE LA NACIÓN.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("6. SUMAS ASEGURADAS Y COBERTURAS",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SUMA ASEGURADA                             :",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Saldo deudor del Crédito (capital concedido o reprogramado, intereses compensatorios, moratorios, comisiones y primas no cobradas) a la fecha del siniestro, hasta el límite máximo por Asegurado especiﬁcado para cada cobertura, según el rango de edad que se indica:",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Rango de Edad", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Sumas Aseguradas Máximas(*)", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Cobertura Principal", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Coberturas Adicionales", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Edad de Ingreso", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Edad de Permanencia", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Vida (Muerte Natural y Muerte Accidental)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente Por Accidente",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente Por Enfermedad(**)",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Hasta los 84 años", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("85 y 364 días", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 100,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 100,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 100,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Desde los 84 años y 1 día", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Sin límite", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 3,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("(*) Límite aplicable a todos los créditos asegurados o reprogramados.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("(**)Sin Periodo de carencia.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Pacífico Compañía de Seguros y Reaseguros, denominada en adelante “LA COMPAÑÍA”, con R.U.C. N° 20332970411, con domicilio en Av. Juan de Arona 830, Lima, teléfono 4500-518, emite la presente póliza de conformidad con las estipulaciones contenidas en las Condiciones Particulares y Generales de la misma.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Las comunicaciones cursadas por el Contratante y/o Asegurado a través del BANCO DE LA NACIÓN sobre aspectos relacionados con el contrato de seguros, tienen el mismo efecto que si se hubiesen dirigido a la COMPAÑÍA. Asimismo los pagos efectuados por el Asegurado al BANCO DE LA NACIÓN, se consideran abonados a LA COMPAÑÍA. Se deja expresa constancia que el presente seguro forma parte del Registro Nacional de Información de Contratos de Seguros de Vida y de Accidentes Personales con Cobertura de Fallecimiento o de Muerte Accidental, creado mediante Ley 29355.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"EN FE DE LO CUAL, la presente ha sido firmada por el Contratante y los funcionarios de LA COMPAÑÍA debidamente autorizados para ello.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("LIMA, " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFPolizaFirma1() throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell cell;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(
				"____________________                  ____________________                  ____________________"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"  PACÍFICO SEGUROS                       PACÍFICO SEGUROS                          CONTRATANTE"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("     LUCIANO BEDOYA                                 DANTE LINDLEY",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFPolizaTres() {

		PdfPTable table = new PdfPTable(17);
		table.setTotalWidth(PageSize.A4.getWidth() - 130);

		table.setLockedWidth(true);

		// float[] medidaCeldas = {0.30f, 0.45f, 0.23f, 0.26f, 0.15f, 0.20f};
		// table.setWidths(medidaCeldas);

		PdfPCell cell;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("PÓLIZA INDIVIDUAL DE SEGURO DE VIDA TEMPORAL",
				FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("“Desgravamen Individual 3”", FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("RESUMEN", FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("1.  ¿Cuáles son las condiciones de acceso y límites de permanencia de seguro?",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("El siniestro debe ser comunicado por escrito a la Compañía dentro de los 7 días siguientes"
						+ " a la fecha en que se tenga conocimiento de la ocurrencia del siniestro o de la existencia del beneﬁcio."
						+ " La solicitud de cobertura deberá presentarse en el domicilio físico de la Compañía. Para mayor información "
						+ "podrá comunicarse a nuestra Central de Atención al Asegurado al 513-5000 o ingresar a"
						+ " nuestra página web www.paciﬁco.com.pe.  ", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Podrán acceder al seguro los clientes de la Entidad Financiera Comercializadora que se encuentren dentro del rango de edad deﬁnido en el acápite 6 de las Condiciones Particulares, hasta ﬁnalizar el plazo del Crédito.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("4.  ¿Cuál es el lugar y forma de pago de la prima?",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El pago de la prima a cargo del Asegurado se realiza junto con el pago del Crédito Asegurado a favor del Contratante de conformidad con lo dispuesto en el acápite 4 de las Condiciones Particulares.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("2.  ¿Qué riesgos cubre?", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("5.  ¿Cuál es el procedimiento para efectuar modificaciones a las condiciones de la póliza?",
						FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(3);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("Cubre el fallecimiento del Asegurado, sea en territorio nacional o internacional, ",
						FontFactory.getFont(FontFactory.HELVETICA, 10)));
		datePhrase.add(
				new Phrase(new Chunk("siempre que", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				" la causa del fallecimiento no se encuentre comprendida dentro de las exclusiones de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA, 10))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Durante la vigencia de la póliza, la Compañía no puede modificar los términos contractuales pactados sin la aprobación previa y por escrito del Contratante, quien tiene derecho a analizar la propuesta y tomar una decisión en el plazo de 30 días desde que la misma le fue comunicada. La falta de aceptación de los nuevos términos no genera la resolución del contrato, en cuyo caso se deberán respetar los términos en los que el contrato fue acordado.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(10);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Asimismo otorga al Asegurado las siguientes coberturas adicionales:",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("a)  Invalidez Total y Permanente por Accidente.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("b)  Invalidez Total y Permanente por Enfermedad.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("3.  ¿Cuáles son las ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		datePhrase.add(new Phrase(
				new Chunk("Exclusiones", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk("?", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("6.  ¿Cuáles son las causales de terminación de la cobertura?",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Este seguro no otorga cobertura a los siniestros ocurridos como consecuencia directa de:",
						FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Se encuentran establecidas en la Cláusula Décimo Primera de las Condiciones Generales.",
						FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("a) Lesiones que el Asegurado sufra en actos de guerra civil o internacional,"
				+ " declarada o no; invasión, actos de enemigos extranjeros, hostilidades u operaciones bélicas sea "
				+ "que haya habido o no declaración de guerra, insurrección, sublevación, rebelión, sedición, motín.",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"7.  ¿Cuál es el medio y plazo para dar el aviso de siniestro y los lugares autorizados para presentar una Solicitud de Cobertura?",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(7);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"b) Participación activa del Asegurado en actos de conmoción contra el orden público dentro o fuera del país así como en actos delictuosos, subversivos o terroristas.",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El siniestro debe ser comunicado por escrito a la Compañía dentro de los 7 días siguientes a la ",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 6, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"fecha en que se tenga conocimiento de la ocurrencia del siniestro o de la existencia del beneficio. La solicitud de cobertura deberá presentarse en el domicilio físico de la Compañía. Para mayor información podrá comunicarse a nuestra Central de Atención al Asegurado al 513-5000 o ingresar a nuestra página web ",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		datePhrase.add(new Phrase(
				new Chunk("www.pacificoseguros.com", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				". Los documentos que deben adjuntarse a la solicitud de cobertura se encuentran listados en la Cláusula Décimo Cuarta de las Condiciones Generales.",
				FontFactory.getFont(FontFactory.HELVETICA, 10))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(12);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Adicionalmente, podrá solicitar orientación en la Plataforma de Atención al Usuario de la SBS.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("8.  ¿Cuál es el mecanismo de solución de controversias?",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En caso se presente una controversia relacionada con el presente seguro, las partes se someten a la competencia de los jueces y tribunales del Estado Peruano.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Sin perjuicio del plazo, los Beneficiarios podrán solicitar la cobertura dentro del plazo legal de prescripción establecido. En la actualidad el plazo legal de prescripción es de diez años contados a partir de la ocurrencia del siniestro o desde que el beneficiario toma conocimiento de la existencia del beneficio; sin embargo se considerará el plazo legal que se encuentre vigente a la fecha del siniestro.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(9);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(9);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("9.  ¿Consultas y/o Reclamos?", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Si tiene alguna consulta o requiere información adicional le pedimos ingresar a nuestra web www.paciﬁco.com.pe. En ella también encontrará los canales de atención que tenemos a su disposición o comunicarse a nuestra Central de Información y Consultas al 513-5000. ",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(7);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Ante el rechazo de la solicitud de cobertura de un siniestro, se podrá presentar un reclamo escrito dirigido a la propia Compañía o acudir gratuitamente a la Defensoría del Asegurado, entidad privada, cuyos principales datos son:",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(5);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Puede presentar sus reclamos en la Compañía a través de los siguientes medios: Acercándose a las oﬁcinas de “Atención al Cliente” ubicadas en Av. Juan de Arona 830, San Isidro o llamando a nuestra Central de Atención al Asegurado al 513-5000. Ingresando a nuestra página web:  ",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		datePhrase.add(new Phrase(
				new Chunk("www.pacificoseguros.com", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				"ó escribiéndonos al correo: atencionalcliente@grupopaciﬁco.com.pe Remitiendo una carta a nuestras oﬁcinas, dirigida a “Atención al Cliente.",
				FontFactory.getFont(FontFactory.HELVETICA, 10))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(5);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Web: ", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		datePhrase.add(new Phrase(
				new Chunk("www.defaseg.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.UNDERLINE))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Dirección: ", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk("Calle Amador Merino Reyna 307 – Piso 9, San Isidro, Lima – Perú.",
				FontFactory.getFont(FontFactory.HELVETICA, 10))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(2);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Además, podrá recurrir al INDECOPI o al mecanismo de solución de controversias establecido en la póliza. Adicionalmente, podrá solicitar orientación en el Departamento de Servicios al Ciudadano de la SBS. ",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(6);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Telefax: ", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk("421-0614.", FontFactory.getFont(FontFactory.HELVETICA, 10))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Además, podrá recurrir al INDECOPI o al mecanismo de solución de controversias"
				+ " establecido en la póliza.", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		cell.setRowspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 6, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(17);
		cell.setRowspan(1);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFPolizaCuatro() {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;

		Phrase datePhrase;
		// we add a cell with colspan 3

		// float[] medidaCeldas = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

		// table.setWidths(medidaCeldas);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("PÓLIZA INDIVIDUAL DE SEGURO DE VIDA TEMPORAL",
				FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(" “Desgravamen Individual 3” ", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("CONDICIONES GENERALES", FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Pacíﬁco Compañía de Seguros y Reaseguros, en adelante LA COMPAÑÍA, emite a Usted, en adelante EL CONTRATANTE, la presente póliza sobre la vida de EL ASEGURADO. Los términos, condiciones y cláusulas que regirán el presente Contrato de Seguro son las siguientes:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("PRIMERA: DEFINICIONES", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Los términos que se indican a continuación tendrán el siguiente signiﬁcado para todos los efectos de esta póliza de seguros:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•   Accidente:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Se entiende por accidente todo suceso imprevisto, involuntario, repentino y fortuito causado por medios externos y de un modo violento que afecte el organismo de EL ASEGURADO, ocasionándole una o más lesiones que se maniﬁestan por contusiones o heridas visibles y también los casos de lesiones internas o inmersión reveladas por los exámenes correspondientes que puedan ser determinados de una manera cierta.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•   Asegurado:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Es la persona natural cuya vida e integridad física se asegura en virtud de la póliza. Para este seguro es el cliente titular de un préstamo vigente con la Entidad Financiera Comercializadora y que ha presentado una solicitud de seguro aceptada por LA COMPAÑÍA. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•   Beneficiario:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Es la Entidad Financiera Comercializadora que se indica en las Condiciones Particulares de la presente póliza.  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•   Capital Asegurado, Beneﬁcio o Suma Asegurada: ",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Es el saldo deudor del crédito (capital concedido, intereses compensatorios, moratorios, comisiones y primas no cobradas) de EL ASEGURADO al momento de ocurrido el siniestro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•    Contratante:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Es la persona natural que suscribe la póliza con LA COMPAÑÍA y la obligada al pago de la prima. Generalmente EL CONTRATANTE es el mismo ASEGURADO. Cualquiera que sea la situación se estipulará en las Condiciones Particulares.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•   Endoso:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Es el acuerdo mediante el cual se modiﬁca, aclara o deja sin efecto parte del contenido de las condiciones generales o particulares de la póliza. Los endosos surten efectos una vez que han sido suscritos y/o aprobados por la Compañía y el Contratante, según corresponda.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•   Exclusiones:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Se reﬁere a todas las condiciones no cubiertas bajo ninguna circunstancia y que se encuentran expresamente indicadas en estas condiciones generales.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•   Fecha de Inicio del Seguro:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(
				new Chunk(" Al momento del desembolso del crédito.", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•   Póliza:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Es el documento emitido por LA COMPAÑÍA en el que consta el contrato de seguro. En él se establecen los términos y condiciones de las coberturas contratadas.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•   Prima:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Es el valor determinado por LA COMPAÑÍA como contraprestación por la cobertura de seguro contratada.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•   Solicitud de Seguro:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Documento escrito y ﬁrmado por EL CONTRATANTE que forma parte integrante de la presente póliza y en el que consta su voluntad de contratar el seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•   Rehabilitación:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Es la posibilidad que tiene EL CONTRATANTE de levantar la suspensión de la cobertura del seguro que hubiere operado por la falta de pago oportuno de primas. La cobertura vuelve a tener efecto a partir de las cero (0:00) horas del día siguiente a aquel en que se cancela la obligación. La póliza podrá ser rehabilitada, a opción de EL CONTRATANTE, mientras que LA COMPAÑÍA no haya expresado por escrito su decisión de resolver la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("SEGUNDA: ESTRUCTURA DE LA PÓLIZA", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La póliza es el único documento válido para ﬁjar los derechos y obligaciones de las partes. Forman parte integrante de esta póliza los siguientes documentos:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("1. Los Endosos según su fecha, predominando los últimos sobre los primeros",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("2. Las Condiciones Particulares", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("3. Las Condiciones Generales", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("4. La Solicitud del Seguro.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Los documentos antes indicados han sido enumerados de acuerdo a su jerarquía e importancia; de existir alguna contradicción entre ellos, se entenderá que los primeros prevalecen y modifican a los que les siguen en orden correlativo. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("TERCERA: INDISPUTABILIDAD", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Esta póliza será indisputable una vez que haya transcurrido el plazo de dos (2) años contado desde la fecha de inicio de vigencia, salvo en caso de dolo. Lo dispuesto en la presente cláusula no será aplicable en caso que la inexactitud o falsedad verse sobre la edad de EL ASEGURADO. En este supuesto se aplicará lo dispuesto en la Cláusula Octava de las presentes Condiciones Generales.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CUARTA: NORMAS PARA LA CONTRATACIÓN DE LA POLIZA",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La póliza ha sido extendida por LA COMPAÑÍA sobre la base de las declaraciones efectuadas por EL CONTRATANTE y/o ASEGURADO en su solicitud de seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Toda declaración inexacta o reticente formulada por EL CONTRATANTE y/o ASEGURADO sobre circunstancias conocidas por éstos, que de haber sido informadas a la Compañía, hubiera impedido la celebración del contrato o modificado sus condiciones, determina la nulidad del presente contrato, si media dolo o culpa inexcusable. En dicho supuesto, EL CONTRATANTE, EL ASEGURADO y/o LOS BENEFICIARIOS carecerán de todo derecho a indemnización bajo la póliza, quedando LA COMPAÑIA liberada de toda responsabilidad, con excepción de lo determinado en el siguiente párrafo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"De determinarse la nulidad del contrato, LA COMPAÑÍA devolverá a EL CONTRATANTE el valor de las primas pagadas sin intereses ni impuestos, y disminuidas en los gastos administrativos incurridos por ésta por concepto de penalidad, los que ascenderán a un monto máximo equivalente a la prima pagada por el primer año de duración de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Se consideran dolosas a aquellas respuestas a preguntas formuladas en la solicitud de seguro o en sus documentos accesorios o complementarios que contengan declaraciones inexactas o reticentes sobre circunstancias conocidas por EL CONTRATANTE y/o EL ASEGURADO.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Si la declaración inexacta o reticente, no obedece a dolo o culpa inexcusable de EL CONTRATANTE y/o de EL ASEGURADO, se aplicarán las siguientes reglas, según sea constatada antes o después de producido el siniestro:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"(i) Si es constatada antes de que se produzca el siniestro, LA COMPAÑÍA presentará a EL CONTRATANTE una propuesta de revisión de la póliza dentro del plazo de treinta (30) días computado desde la referida constatación. La propuesta de revisión contendrá un reajuste de primas y/o de cobertura y deberá ser aceptada o rechazada por EL CONTRATANTE en un plazo máximo de diez (10) días.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En caso sea aceptada la revisión de la póliza, el reajuste será aplicable a partir del primer día del mes siguiente de cobertura. En caso de rechazo o falta de pronunciamiento, LA COMPAÑÍA podrá resolver la póliza, mediante una comunicación dirigida a EL CONTRATANTE, dentro de los treinta (30) días siguientes al término del plazo de diez (10) días fijado en el párrafo precedente. Corresponden a LA COMPAÑÍA las primas devengadas a prorrata, hasta el momento en que se efectuó la resolución.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"(ii) Si la constatación de la declaración inexacta o reticente es posterior a la producción de un siniestro que goza de cobertura según los términos de la póliza, LA COMPAÑÍA reducirá la indemnización debida en proporción a la diferencia entre la prima convenida y la que hubiese sido aplicable de haberse conocido el real estado del riesgo. De determinarse que el riesgo no es asegurable, no existirá suma asegurada y se procederá con la devolución total de la prima percibida.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Las partes contratantes se someten a lo expresamente acordado en la presente póliza y a las disposiciones contenidas en la Ley del Contrato de Seguro, sus normas modiﬁcatorias, sustitutorias, ampliatorias y conexas, en cuanto resulte aplicable",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("QUINTA: INICIO DE VIGENCIA ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Las coberturas previstas en la presente póliza adquieren fuerza legal desde el momento del desembolso del crédito y ﬁrma de la solicitud. Las coberturas se mantendrán vigentes mientras concurran las siguientes circunstancias: (i) se encuentre vigente el crédito que motiva la contratación del presente seguro; (ii) el Asegurado se encuentre en el rango de edad indicado en las Condiciones Particulares; y (iii) no se produzcan los supuestos de resolución, extinción y nulidad del seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEXTA: DESCRIPCIÓN DE LA COBERTURA",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Los beneficios otorgados por esta póliza serán los que se detallan a continuación:",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("COBERTURA PRINCIPAL:", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"6.1) Vida (Muerte natural o accidental): Fallecimiento de EL ASEGURADO durante la vigencia de la póliza, sea en territorio nacional o internacional y siempre que la causa del fallecimiento no se encuentra comprendida dentro de las exclusiones de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("COBERTURAS ADICIONALES:", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"6.2) Invalidez Total y Permanente por Accidente: Sólo se considerará que EL ASEGURADO se encuentra en situación de Invalidez Total y Permanente por Accidente si presenta alguna de las condiciones siguientes:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("a) Pérdida total o funcional absoluta de la visión de ambos ojos;",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("b) Pérdida total o funcional absoluta de ambos brazos o ambas manos;",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("c) Pérdida total o funcional absoluta de ambas piernas o ambos pies;",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("d) Pérdida total o funcional absoluta de una mano y un pie.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"e) e)	Paraplejia o Cuadriplejia por fractura de columna vertebral, entendiendo por ésta a aquella fractura de la columna vertebral que causa paraplejía o cuadriplejía por compromiso asociado de la médula espinal; ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"f) Estado absoluto de descerebramiento ocasionado por accidente que no permita al Asegurado realizar ningún trabajo        u ocupación por el resto de su vida. Se entiende por descerebramiento a la ausencia de función cerebral y/o inactividad      total del cerebro. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Es condición necesaria que la invalidez se manifieste a más tardar dentro de los (2) años siguientes de producido un        accidente durante la vigencia de la póliza",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"6.3) 6.3)	Invalidez Total y Permanente por Enfermedad: Se entiende por invalidez total y permanente por enfermedad, la situación de pérdida o disminución de la fuerza física o intelectual que produzca un menoscabo igual o superior a 2/3 de la capacidad de trabajo de EL ASEGURADO, debido a enfermedades y de conformidad con las “Normas para la evaluación y caliﬁcación del grado de invalidez” del Sistema Privado de Pensiones, regulado por la Resolución N° 232-98-EF/SAFP y sus normas modiﬁcatorias y complementarias. La invalidez total y permanente se sustenta con Certiﬁcado expedido por la autoridad competente (ESSALUD, AFP, MINSA, INR o una junta de médicos a falta de los anteriores)..",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("SÉTIMA: TITULAR DE ESTA PÓLIZA", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Todos los derechos, facultades, opciones y obligaciones conferidas bajo esta póliza y que no pertenecen a LA COMPAÑÍA estarán reservados a EL CONTRATANTE, salvo que en las Condiciones Particulares o Generales se hubiere convenido lo contrario.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("OCTAVA: EDAD", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Al momento de la contratación del presente seguro, EL ASEGURADO deberá encontrarse en el Rango de Edad establecido en las Condiciones Particulares, pudiendo permanecer como asegurado hasta ﬁnalizar el plazo del Crédito. LA COMPAÑÍA podrá requerir al CONTRATANTE, al ASEGURADO y/o a los herederos del ASEGURADO que acrediten la edad del ASEGURADO a través de un documento oﬁcial antes de otorgar cualquier beneﬁcio acordado por la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("NOVENA: PRIMAS", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La prima es el valor determinado por LA COMPAÑIA como el precio de las coberturas de seguro contratadas, que deberá ser pagado por EL CONTRATANTE de conformidad con lo establecido en las Condiciones Particulares de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En caso se incumpla con pagar la prima en el plazo y forma establecidos en las Condiciones Particulares, LA COMPAÑÍA comunicará a EL CONTRATANTE y/o EL ASEGURADO que, en caso no regularice el pago de la prima adeudada dentro de los treinta (30) días desde el vencimiento de la obligación, la cobertura de seguro contratada quedará suspendida automáticamente a partir del día siguiente al vencimiento de dicho plazo. LA COMPAÑÍA no será responsable por los siniestros ocurridos durante la suspensión de la cobertura.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Previamente a la suspensión de la cobertura por falta de pago de la prima de parte de EL CONTRATANTE, LA COMPAÑÍA deberá notificar al Beneficiario sobre dicho incumplimiento por conducto notarial, a fin de que tome las previsiones del caso.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Si el fallecimiento ocurriese estando la prima impaga, dentro del periodo previo a la suspensión de la cobertura antes indicada, la prima adeudada por EL CONTRATANTE será deducida del beneficio correspondiente.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En caso la cobertura se encuentre en suspenso por el incumplimiento en el pago de prima, LA COMPAÑÍA podrá optar por resolver la póliza. Para tal efecto, comunicará por escrito a EL CONTRATANTE con treinta (30) días calendario de anticipación su decisión de resolver la póliza por falta de pago de prima.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En todo caso, si LA COMPAÑÍA no reclama el pago de la prima dentro de los noventa (90) días siguientes al vencimiento del plazo establecido en las Condiciones Particulares para el pago de la prima, se entiende que el contrato queda extinguido. Se entiende por reclamo del pago de primas, el inicio de un proceso judicial o arbitral de cobranza de pago de primas por parte de LA COMPAÑÍA.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Se deja expresa constancia que las comunicaciones referidas en la presente cláusula, deberán ser notificadas al domicilio contractual fijado por las partes para efectos del presente seguro. Asimismo, las partes pactan expresamente que las comunicaciones podrán ser notificadas al último domicilio electrónico informado a LA COMPAÑÍA, o personalmente y/o a través de una llamada telefónica, en tanto LA COMPAÑÍA mantenga una constancia de la realización o envío de las comunicaciones o de la grabación telefónica u otro medio que acredite la comunicación; salvo que la Ley del Contrato de Seguro establezca que la comunicación debe ser escrita.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("DÉCIMA: REHABILITACIÓN", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"EL CONTRATANTE podrá solicitar a LA COMPAÑÍA la rehabilitación de sus coberturas, en caso éstas hubieren quedado suspendidas por falta de pago de prima, ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(
				", siempre y cuando LA COMPAÑÍA no haya comunicado su decisión de resolver la póliza o el contrato de seguro no se hubiere extinguido.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"La rehabilitación de la póliza supone el levantamiento de la suspensión de la cobertura a partir de las 00:00 horas del día siguiente a aquel en el que EL CONTRATANTE realiza el pago total de las primas adeudadas. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"LA COMPAÑÍA sólo responderá por los siniestros ocurridos a partir de la fecha de rehabilitación, de conformidad con los términos de la presente póliza.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Se deja expresa constancia que los derechos de reducción, préstamo y rescate no son aplicables al presente seguro, por tratarse de un seguro de vida temporal.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DÉCIMO PRIMERA: CAUSALES DE RESOLUCIÓN, EXTINCIÓN Y NULIDAD DEL SEGURO",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La presente póliza se resolverá en cualquiera de los siguientes supuestos:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"1. Por rechazo o falta de pronunciamiento por parte del Contratante respecto de la propuesta de revisión de la póliza efectuada por la Compañía, ante la constatación de una declaración inexacta o reticente, de conformidad con lo establecido en la Cláusula Cuarta de las presentes Condiciones Generales.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"2. Por falta de pago oportuno de primas de conformidad con lo dispuesto en la Cláusula Novena de las presentes Condiciones Generales.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"3. Por la presentación de una Reclamación Fraudulenta, de conformidad con lo dispuesto en la Cláusula Décimo Ǫuinta de las Condiciones Generales.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"4.	Por solicitud de resolución de EL CONTRATANTE, la cual podrá efectuarse en cu"
						+ "alquier momento y sin expresión de causa, a través de los mismos mecanismos de forma, lugar y medios utilizados para la contratación del seguro y con por lo menos treinta (30) días de anticipación. En caso EL CONTRATANTE ejerza esta opción a través de una comunicación escrita, deberá acompañar a la comunicación una copia simple de su Documento de Identidad. Se deja constancia que EL CONTRATANTE tiene conocimiento de los efectos de su decisión sobre el Crédito asociado y que es su responsabilidad dar aviso a la Entidad Financiera Comercializadora.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Asimismo, la presente póliza se extinguirá ante la ocurrencia de los siguientes eventos:",
						FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"1.	Por fallecimiento de EL ASEGURADO, en cuyo caso el Beneﬁciario estará facultado a presentar la solicitud de cobertura, la que será evaluada de conformidad con lo dispuesto en la presente póliza.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"2.	Por cancelación o término del plazo del préstamo que motiva la contratación del presente.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"3.	Por falta de pago oportuno de primas, en caso transcurran noventa (90) días calendario siguientes al vencimiento del plazo para realizar el pago de la prima, de acuerdo a lo establecido en el artículo 21° de la Ley N° 29946, Ley del Contrato de Seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Como consecuencia de la resolución o extinción del presente contrato de seguro, dejarán de surtir efectos la(s) cobertura(s) otorgada(s) en virtud del mismo, liberándose a LA COMPAÑÍA de toda responsabilidad indemnizatoria ante la ocurrencia de un siniestro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Sin perjuicio de lo establecido para las causales de resolución y extinción de la póliza antes listadas, queda expresamente convenido que LA COMPAÑÍA devolverá a EL CONTRATANTE la parte proporcional de la prima por el tiempo no transcurrido. Para estos efectos, EL CONTRATANTE deberá solicitar por escrito ante la Compañía la devolución correspondiente. En caso la resolución sea efectuada por la Compañía, no se requerirá de una solicitud por parte de EL CONTRATANTE, procediendo la Compañía a devolver el importe correspondiente dentro de un plazo máximo de treinta (30) días calendarios contados a partir de la fecha de resolución.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Además de las causales de resolución y extinción, se deja expresa constancia que el contrato de seguro será Nulo y, por tanto, ineficaz desde el inicio de su vigencia en los siguientes supuestos:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"1. Si EL CONTRATANTE y/o EL ASEGURADO incurren en declaración inexacta o reticente que obedezca a dolo o culpa inexcusable, de conformidad con lo establecido en la Cláusula Cuarta de las presentes Condiciones Generales",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"2. En caso de declaración inexacta de la edad de EL ASEGURADO,, si se comprobase que EL ASEGURADO superaba la edad máxima de ingreso a la fecha de contratación del seguro, de conformidad con lo establecido  en la Cláusula Octava de las presentes Condiciones Generales.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"3. En ausencia de interés asegurable al tiempo de celebración del contrato, en virtud del artículo 2° de la Ley del Contrato de Seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En caso se produzca alguno de los supuestos de nulidad contenidos en los numerales 2, 3 o 4 antes citados, la Compañía procederá con la devolución de la prima que hubiese sido pagada por EL CONTRATANTE, sin intereses. En caso de nulidad por declaración inexacta o reticente, se aplicará lo dispuesto en la Cláusula Cuarta de las presentes Condiciones.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DÉCIMO SEGUNDA: EXCLUSIONES - RIESGOS NO CUBIERTOS",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Este seguro no otorga cobertura a los siniestros ocurridos como consecuencia directa de: ",
						FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"a) Lesiones que el Asegurado sufra en actos de guerra civil o internacional declarada o no, invasión, ac"
						+ "tos de enemigos extranjeros, hostilidades u operaciones bélicas sea que haya habido o no declaración de guerra, insurrección, s"
						+ "ublevación, rebelión, sedición, motín.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"b) Participación activa del Asegurado en actos de conmoción contra el orden público dentro o fuera del país, así como en actos delictuosos, subversivos o terroristas. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("c) Fisión o fusión nuclear, contaminación radioactiva.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"d) Suicidio, intento de suicidio, automutilación o autolesión, salvo que, en caso de fallecimiento, la póliza haya estado en vigencia ininterrumpidamente durante dos (2) años.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DÉCIMO TERCERA: BENEFICIARIO DEL SEGURO ",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El Beneﬁciario de la presente póliza es la Entidad Financiera Comercializadora que otorga el crédito a EL ASEGURADO. Dado el interés asegurable, el Beneﬁciario de la presente póliza tiene carácter irrevocable, por lo que EL ASEGURADO no podrá realizar ningún cambio de Beneﬁciario.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DÉCIMO CUARTA: AVISO DE SINIESTRO Y SOLICITUD DE COBERTURA",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El Beneﬁciario deberá informar por escrito en el domicilio de LA COMPAÑÍA la ocurrencia del siniestro, dentro de los siete (7) días siguientes a la fecha en la cual tome conocimiento de la ocurrencia del siniestro o de la existencia del beneﬁcio.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Posteriormente, el Beneﬁciario deberá presentar la solicitud de cobertura adjuntando el original o copia con certiﬁcación de reproducción notarial (antes copia legalizada) de los siguientes documentos:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		//

		cell = new PdfPCell(new Phrase("Edad de Ingreso", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Rango de Siniestros (Soles)", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Documentación", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(4);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("En caso de Fallecimiento (Natural o Accidental)",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(4);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Hasta los 84 años", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 0 - S/ 15,000", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Certiﬁcado de defunción.", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(4);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 15,001 a más", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Certiﬁcado de defunción y, adicionalmente en caso de muerte accidental, el atestado o informe policial completo, cuando corresponda.",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(4);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Desde los 84 años y 1 día", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Certiﬁcado de defunción.", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(4);
		table.addCell(cell);

		//

		datePhrase = new Phrase(new Chunk("* ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(
				new Chunk("Los documentos exigidos en caso de fallecimiento natural o accidental son los mismos.",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("** ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"Los documentos exigidos en caso de Invalidez total y permanente por accidente o por enfermedad son los mismos. La Compañía tendrá un plazo máximo de treinta (30) días contados desde la recepción completa de los documentos indicados en la presente cláusula para aprobar o rechazar la solicitud de cobertura; salvo que se solicite una prórroga de conformidad con lo dispuesto en las normas legales vigentes.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El incumplimiento del plazo para realizar el aviso del siniestro establecido en la presente cláusula no genera la pérdida de los derechos que pudiese tener el Beneﬁciario en virtud del presente seguro, los cuales podrán ser requeridos dentro del plazo de prescripción vigente a la fecha de ocurrencia del siniestro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"LA COMPAÑÍA tendrá un plazo máximo de treinta (30) días contados desde la recepción completa de los documentos indicados en la presente cláusula para aprobar o rechazar la solicitud de cobertura, salvo que dicho plazo se encuentre suspendido por haberse requerido aclaraciones o precisiones respecto de la documentación presentada dentro de los primeros veinte (20) días de dicho plazo y/o se solicite una prórroga de conformidad con lo dispuesto en las normas legales vigentes. Si la solicitud de cobertura fuese aprobada por LA COMPAÑÍA o hubiese transcurrido el plazo para aprobar o rechazar la solicitud de cobertura conforme a lo antes indicado, sin pronunciamiento, se pagará el beneﬁcio dentro de los treinta (30) días calendario siguientes..",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DÉCIMO QUINTA: RECLAMACIÓN FRAUDULENTA",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"LA COMPAÑIA quedará relevada de toda responsabilidad y EL CONTRATANTE y/o EL ASEGURADO perderán todo derecho de indemnización bajo esta póliza si, en cualquier tiempo EL CONTRATANTE, EL ASEGURADO, sus herederos o terceras personas que actúen en su representación, exageran los daños o emplean medios o documentos falsos, dolosos o engañosos, con su conocimiento o sin él, para sustentar una reclamación o para derivar beneficios del seguro otorgado por la presente póliza.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Además de lo dispuesto en el párrafo precedente, la presentación de una Reclamación Fraudulenta acarreará la resolución del presente contrato de seguro. Para ejercer esta condición resolutoria, LA COMPAÑÍA comunicará a EL CONTRATANTE su decisión de resolver la póliza en virtud de la presente cláusula. Dicha comunicación podrá ser remitida por correo, correo electrónico y/o fax a la dirección o número indicado por EL CONTRATANTE en la solicitud del seguro o documento posterior. En caso dichos datos no sean correctos o se modifiquen sin previa comunicación a LA COMPAÑÍA, ésta quedará liberada de toda obligación.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DÉCIMO SEXTA: PAGO DEL BENEFICIO",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La obligación de pagar la suma asegurada por la(s) cobertura(s) del presente seguro al Beneﬁciario deberá ser cumplida por LA COMPAÑÍA en un solo acto y por su valor total.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DÉCIMO SÉTIMA: DOMICILIO CONTRACTUAL",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La Compañía, el Contratante y/o el Asegurado señalan como su domicilio la dirección física (particular o comercial) y la dirección electrónica declaradas en la solicitud de seguro y que originalmente se consignan en las Condiciones Particulares. Para que cualquier variación respecto del domicilio (dirección física o electrónica) sea válida y surta efectos, deberá ser comunicada a la otra parte con por lo menos quince (15) días de anticipación.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Las denuncias, declaraciones y demás comunicaciones previstas y/o derivadas de la presente póliza deberán efectuarse en el último domicilio declarado por las partes de conformidad con lo dispuesto en el párrafo precedente. Toda comunicación realizada en cumplimiento de lo dispuesto en la presente cláusula se considerará válida para todo efecto legal. La Compañía no se hace responsable de las consecuencias derivadas de la inexactitud del domicilio contractual declarado por el Contratante y/o el Asegurado.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Se deja expresa constancia que todas las comunicaciones entre las partes relacionadas al presente seguro deberán ser puestas en conocimiento del Beneﬁciario. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("DÉCIMO OCTAVA: PRESCRIPCIÓN", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Los reclamos y las acciones fundadas en la póliza prescriben al vencimiento del plazo legal establecido. Actualmente, el plazo legal de prescripción es de diez años computados desde que el beneficiario conoce la existencia del beneficio; sin embargo, se considerará el plazo prescriptorio que se encuentre vigente a la fecha del siniestro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Cumplido el plazo de prescripción, sin que se hubiere solicitado el beneficio, LA COMPAÑIA quedará liberada de la obligación de pagar el capital asegurado, a menos que esté en trámite un arbitraje o una acción judicial relacionada con la reclamación.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DÉCIMO NOVENA: MECANISMO DE SOLUCIÓN DE CONTROVERSIAS",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Las partes acuerdan que toda discrepancia o litigio entre LA COMPAÑÍA, EL CONTRATANTE, EL ASEGURADO y/o sus herederos, si lo hubiere, se resolverá según las disposiciones de la Ley del Contrato de Seguro y demás normas peruanas aplicables bajo la competencia de los jueces y tribunales del Perú",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("VIGÉSIMA: MODIFICACIÓN DE LA PÓLIZA", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Toda modificación de la póliza, para que sea válida, deberá ser realizada por escrito por medio de un endoso refrendado por los funcionarios autorizados de LA COMPAÑIA y por EL CONTRATANTE.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Durante la vigencia de la póliza, LA COMPAÑÍA no puede modificar los términos contractuales pactados sin la aprobación previa y por escrito de EL CONTRATANTE, quien tiene derecho a analizar la propuesta y tomar una decisión en el plazo de treinta (30) días desde que la misma le fue comunicada. La falta de aceptación de los nuevos términos no genera la resolución del contrato, en cuyo caso se deberán respetar los términos en los que el contrato fue acordado.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(" CLÁUSULA ADICIONAL ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" “INVALIDEZ TOTAL Y PERMANENTE POR ACCIDENTE”",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Esta Cláusula Adicional se regirá por las siguientes condiciones y, en todo lo que no esté expresamente establecido en esta, por lo estipulado en las Condiciones Generales de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("PRIMERA: DEFINICIONES ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Los términos que se indican a continuación tendrán el siguiente signiﬁcado para todos los efectos de esta Cláusula Adicional: ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•   Asegurado: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(
				new Chunk(" Es la persona que se encuentra cubierta por los beneﬁcios de la cobertura principal.",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•   Miembros: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" Largos apéndices anexos al tronco destinados a ejecutar los grandes movimientos de la locomoción y prensión.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•   Pérdida Total: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" La separación completa y en forma deﬁnitiva y permanente de un miembro u órgano respecto del organismo al cual pertenece, o también su pérdida funcional absoluta.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•   Pérdida Funcional Absoluta: ",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(
				" La ausencia deﬁnitiva, total y permanente de toda capacidad de función o ﬁsiológica del o los órganos o miembros comprendidos, sin implicar su eliminación del organismo al cual pertenece.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•   Órgano: : ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(" Entidad anatómicamente independiente y siempre especíﬁca.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•   Cobertura Principal: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(" La otorgada bajo las Condiciones Generales de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Asimismo, rigen para la presente Cláusula Adicional las deﬁniciones establecidas en las Condiciones Generales de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEGUNDA: DESCRIPCIÓN DE LA COBERTURA",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La Compañía pagará el capital asegurado establecido en las Condiciones Particulares si la persona designada como el Asegurado sufriera, durante la vigencia de la cobertura, algún accidente que fuera la causa adecuada de su Invalidez Total y Permanente deﬁnida en los términos establecidos en la presente Cláusula Adicional. Esto se cumplirá siempre y cuando la invalidez se maniﬁeste como máximo durante los dos (2) años siguientes a la fecha de ocurrencia del accidente y la causa de la invalidez no se encuentre comprendida dentro de las exclusiones de la presente Cláusula Adicional.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Es condición esencial para que surja la responsabilidad de la Compañía que la Invalidez Total y Permanente sea consecuencia de las lesiones originadas por un accidente.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La Compañía cubrirá la Invalidez Total y Permanente que pueda resultar del accidente sobrevenido al tratar de salvar vidas humanas.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("TERCERA: INVALIDEZ TOTAL Y PERMANENTE",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Solo se considerará que el Asegurado se encuentra en situación de Invalidez Total y Permanente por Accidente si presenta alguna de las condiciones siguientes:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" a) Paraplejia o Cuadriplejia por fractura de la columna vertebral.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" b) Estado absoluto de descerebramiento ocasionado por accidente que no permita al Asegurado realizar ningún trabajo u ocupación por el resto de su vida. Se entiende por descerebramiento a la ausencia de la función cerebral y/o inactividad total del cerebro.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" c) Pérdida total o funcional absoluta de:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("    (i)	la visión de ambos ojos.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("     (ii)	ambos brazos o ambas manos.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("    (iii)	ambas piernas o ambos pies.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("    (iv)	una mano y un pie.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En este sentido, se deja expresa constancia que la presente Cláusula Adicional no cubrirá otra situación de invalidez distinta a las arriba mencionadas, aun cuando la misma pudiera afectar al Asegurado en más de los dos tercios de su capacidad de trabajo.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Se considerará como fecha de conﬁguración de la invalidez para la liquidación del beneﬁcio la fecha en la cual ocurrió el accidente y se veriﬁque que el Asegurado presenta alguno de los supuestos de invalidez accidental cubiertos.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CUARTA: EXCLUSIONES", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Rigen para esta Cláusula Adicional las exclusiones establecidas en las Condiciones Generales de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("QUINTA: TERMINACIÓN DE LA COBERTURA", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La presente Cláusula Adicional es parte integrante de la póliza y se regirá, en todo lo que no esté expresamente estipulado en esta, por lo dispuesto en las Condiciones Generales. Asimismo, queda expresamente convenido que la presente Cláusula Adicional solo será válida y regirá mientras la cobertura principal lo sea y esté vigente. La cobertura prevista por esta Cláusula Adicional cesará en caso se produzca la terminación de la cobertura principal por cualquier causa. Se deja expresa constancia que el pago de la cobertura de Invalidez Total y Permanente por Accidente origina la resolución de la presente póliza.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEXTA : AVISO DE SINIESTRO BAJO ESTA CLÁUSULA ADICIONAL",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Sin perjuicio de lo señalado en las Condiciones Generales de la póliza, el Beneﬁciario deberá dar aviso por escrito a la Compañía de la ocurrencia del siniestro dentro de los siete (7) días siguientes a la fecha de la ocurrencia del siniestro o desde la fecha en que toma conocimiento de la existencia del beneﬁcio. Posteriormente, el Beneﬁciario deberá presentar la solicitud de cobertura adjuntando el original o copia con certiﬁcación de reproducción notarial (antes copia legalizada) de un Informe o certiﬁcado médico proporcionando detalles de la dolencia y copia foliada y fedateada de la Historia Clínica completa.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SÉPTIMA: DETERMINACIÓN DE LA INVALIDEZ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La Compañía determinará en un máximo de treinta (30) días, contados desde la recepción de toda la documentación exigida"
						+ ", si la solicitud de cobertura es procedente o no. Ǫueda convenido que, dentro de los primeros veinte (20"
						+ ") días del plazo antes señalado, la Compañía podrá requerir documentación, pruebas o exámenes médicos adici"
						+ "onales vinculadas al siniestro que juzgue necesarios, lo que suspenderá el plazo hasta que se presente dicha información.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("OCTAVA: PAGO DEL BENEFICIO", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El beneﬁcio será pagado al Contratante en una (1) sola cuota, dentro de los treinta (30) días de haber determinado la procedencia de la solicitud de cobertura por Invalidez Total y Permanente por Accidente del Asegurado.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		// //

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		// ////////////////

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(" CLÁUSULA ADICIONAL ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" “INVALIDEZ TOTAL Y PERMANENTE POR ENFERMEDAD”",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Esta Cláusula Adicional se regirá por las siguientes condiciones y, en todo lo que no esté expresamente establecido en esta, por lo estipulado en las Condiciones Generales de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("PRIMERA: DEFINICIONES ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Los términos que se indican a continuación tendrán el siguiente signiﬁcado para todos los efectos de esta Cláusula Adicional:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•   Asegurado: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(
				new Chunk(" Es la persona que se encuentra cubierta por los beneﬁcios de la cobertura principal.",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•   Cobertura Principal: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		datePhrase.add(new Phrase(new Chunk(" La otorgada bajo las Condiciones Generales de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Asimismo, rigen para la presente Cláusula Adicional las deﬁniciones establecidas en las Condiciones Generales de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEGUNDA: DESCRIPCIÓN DE LA COBERTURA",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La Compañía pagará el capital asegurado establecido en las Condiciones Particulares si la persona designada como el Asegurado fuera diagnosticado, luego de transcurrido el periodo de carencia, con alguna enfermedad que fuera la causa adecuada de su Invalidez Total y Permanente deﬁnida en los términos establecidos en la presente Cláusula Adicional. Esto se cumplirá siempre y cuando la invalidez ocurra antes que el Asegurado cumpla la “Edad Límite de Permanencia” aplicable a la presente cobertura, la cobertura principal esté vigente y la causa de la invalidez no se encuentre comprendida dentro de las exclusiones de la presente Cláusula Adicional.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Se entiende por invalidez total y permanente por enfermedad la situación de pérdida o disminución de la fuerza física o intelectual que produzca un menoscabo igual o superior a 2/3 de la capacidad de trabajo de EL ASEGURADO, debido a enfermedades y de conformidad con las “Normas para la evaluación y caliﬁcación del grado de invalidez” del Sistema Privado de Pensiones, regulado por la Resolución N° 232-98-EF/SAFP y sus normas modiﬁcatorias y complementarias.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Es condición esencial para que surja la responsabilidad de la Compañía que la Invalidez Total y Permanente sea consecuencia de las lesiones originadas por una enfermedad diagnosticada luego de transcurrido el periodo de carencia.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Se considerará como fecha de conﬁguración de la invalidez para la liquidación del beneﬁcio la fecha de diagnóstico de la enfermedad que origina la invalidez del Asegurado o la primera fecha de ocurrencia de la invalidez indicada en la documentación proporcionada a la Compañía en caso la invalidez se maniﬁeste de manera objetiva con posterioridad al diagnóstico de la enfermedad.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("TERCERA: PERIODO DE CARENCIA", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Ningún beneﬁcio será pagado si la enfermedad es diagnosticada dentro del Periodo de Carencia indicado en las Condiciones Particulares. El Periodo de Carencia se contabiliza desde el inicio de la vigencia de esta cobertura.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CUARTA: EXCLUSIONES", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Rigen para esta Cláusula Adicional las exclusiones establecidas en las Condiciones Generales de la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("ǪUINTA: TERMINACIÓN DE LA COBERTURA", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La presente Cláusula Adicional es parte integrante de la póliza y se regirá, en todo lo que no esté expresamente estipulado en esta, por lo dispuesto en las Condiciones Generales. Asimismo, queda expresamente convenido que la presente Cláusula Adicional solo será válida y regirá mientras la cobertura principal lo sea y esté vigente. La cobertura prevista por esta Cláusula Adicional cesará en caso se produzca la terminación de la cobertura principal por cualquier causa.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Se deja expresa constancia que el pago de la cobertura de Invalidez Total y Permanente por Enfermedad origina la resolución de la presente póliza.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEXTA: AVISO DE SINIESTRO BAJO ESTA CLÁUSULA ADICIONAL",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Sin perjuicio de lo señalado en las Condiciones Generales de la póliza, el Asegurado deberá dar aviso por escrito a la Compañía de la ocurrencia del siniestro dentro de los siete (7) días siguientes a la fecha del accidente o del Periodo de Observación o desde que toma conocimiento de la existencia del beneﬁcio, si dicha fecha fuese posterior.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Posteriormente, el Beneﬁciario deberá presentar la solicitud de cobertura proporcionando a la Compañía los originales o copias con certiﬁcación de reproducción notarial (antes copia legalizada) de un Certiﬁcado expedido por la autoridad competente (ESSALUD, AFP, MINSA, INR o una junta de médicos autorizados a falta de los anteriores), en el que se especiﬁque la naturaleza, el grado de invalidez y la fecha de ocurrencia.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SÉPTIMA: DETERMINACIÓN DE LA INVALIDEZ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La Compañía determinará en un máximo de treinta (30) días, contados desde la recepción de toda la documentación exigida, si la solicitud de cobertura es procedente o no. Ǫueda convenido que, dentro de los primeros veinte (20) días del plazo antes señalado, la Compañía podrá requerir documentación, pruebas o exámenes médicos adicionales vinculados al siniestro que juzgue necesarios, lo que suspenderá el plazo hasta que se presente dicha información. La Compañía podrá solicitar la prórroga del plazo para pronunciarse sobre la procedencia de la cobertura de conformidad con las normas legales vigentes.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("OCTAVA: PAGO DEL BENEFICIO", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El beneﬁcio será pagado al Contratante en una (1) sola cuota, dentro de los treinta (30) días de haber determinado la procedencia de la solicitud de cobertura por Invalidez Total y Permanente por Enfermedad del Asegurado.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		return table;
	}

	// doc antes de clausulaantes
	public static PdfPTable creaPDFCartaInstruccion(String fechaSolicitudPrestamo, String cLaboralCliente,
			String entidadCliente, String aCliente1, String dniCliente1, String aGarante1, String dniGarante1) {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 80);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		// we add a cell with colspan 3
		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase("CARTA DE INSTRUCCIONES", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 15)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("PRÉSTAMO MULTIRED", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 15)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		datePhrase = new Phrase(new Chunk("CIUDAD:", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(
				new Chunk("________________________________ ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		datePhrase = new Phrase(new Chunk("FECHA:", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(
				new Chunk(fechaSolicitudPrestamo, FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase("SEÑORES", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(
				new Phrase(" _______________________________ ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase("PRESENTE.-", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		datePhrase = new Phrase(new Chunk(
				"POR LA PRESENTE ME DIRIJO A USTEDES PARA COMUNICARLES QUE A LA FECHA EL SUSCRITO ES DEUDOR CREDITICIO DEL BANCO DE LA NACIÓN (“ ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("BANCO ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				"”), EN CALIDAD DE TITULAR/FIADOR, POR LO QUE INSTRUYO A USTEDES PARA QUE IRREVOCABLEMENTE EJECUTEN LO SIGUIENTE:",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		datePhrase = new Phrase(new Chunk(
				"1.	MANTENER EL PAGO DE MI REMUNERACIÓN, PENSIÓN O CUALQUIER OTRO INGRESO ECONÓMICO QUE ME CORRESPONDA EN MI CONDICIÓN DE [ ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(
				new Phrase(new Chunk(cLaboralCliente, FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk("] DE [ ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase
				.add(new Phrase(new Chunk("_________________________", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("]", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("2", FontFactory.getFont(FontFactory.HELVETICA, 6))));
		datePhrase.add(new Phrase(new Chunk(
				", A TRAVÉS DEL ABONO MENSUAL EN MI CUENTA DE AHORROS ABIERTA EN EL BANCO HASTA LA CANCELACIÓN TOTAL DE CUALQUIER CRÉDITO DEL QUE SEA TITULAR O GARANTE ANTE EL BANCO.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		datePhrase = new Phrase(
				new Chunk("2.	REALIZAR LOS DEPÓSITOS POR COMPENSACIÓN POR TIEMPO DE SERVICIOS  – CTS EN    [ ",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase
				.add(new Phrase(new Chunk("_________________________", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("]", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("3", FontFactory.getFont(FontFactory.HELVETICA, 6))));
		datePhrase.add(new Phrase(new Chunk(
				" Y   MANTENER   MI   CTS   EN   DICHA ENTIDAD HASTA LA CANCELACIÓN TOTAL DE CUALQUIER CRÉDITO DEL QUE SEA TITULAR /FIADOR ANTE EL BANCO. EN EL SUPUESTO QUE MI VÍNCULO LABORAL CULMINE POR CUALQUIER MOTIVO, AUTORIZO IRREVOCABLEMENTE A QUE LOS FONDOS DEPOSITADOS EN MI CUENTA CTS SEAN TRANSFERIDOS A MI CUENTA DE AHORROS EN EL BANCO. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		datePhrase = new Phrase(new Chunk(
				"3.	EN LOS SUPUESTOS ANTERIORES, SU REPRESENTADA PODRÁ ACEPTAR CUALQUIER MODIFICACIÓN QUE LE SOLICITE SÓLO EN EL SUPUESTO QUE EL SUSCRITO LE PRESENTE PREVIAMENTE UNA CONSTANCIA DE NO ADEUDO EXPEDIDA POR EL BANCO. SIN  PERJUICIO DE ELLO, TAMBIÉN AUTORIZO EXPRESA E IRREVOCABLEMENTE AL DIRECTOR GENERAL DE ADMINISTRACIÓN DE SU REPRESENTADA O A QUIEN HAGA SUS VECES, A AFECTAR MI PLANILLA ÚNICA DE PAGOS, CARGANDO AUTOMÁTICAMENTE EL MONTO DE TODAS LAS CUOTAS PENDIENTES O ADEUDADAS AL BANCO, EN LAS FECHAS EN QUE SE PAGUEN LAS REMUNERACIONES O PENSIONES, PARA QUE LAS ABONEN EN LA CUENTA Y DENTRO DEL PLAZO QUE EL BANCO LES INFORME.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		datePhrase = new Phrase(new Chunk(
				"4.	INFORMAR AL BANCO DENTRO DE LAS 24 HORAS DE OCURRIDO, EL TÉRMINO O SUSPENSIÓN DEL VÍNCULO LABORAL O PENSIONARIO DEL SUSCRITO POR CUALQUIER MOTIVO. EN ESTE SUPUESTO Y A SOLO REQUERIMIENTO DEL BANCO, AUTORIZO A SU REPRESENTADA A DEPOSITAR EN LA CUENTA QUE ÉSTE INDIQUE, EL IMPORTE DE LAS COMPENSACIONES ORDINARIAS, EXTRAORDINARIAS Y/O CUALQUIER OTRO CONCEPTO ECONÓMICO QUE ME CORRESPONDA PERCIBIR, A EFECTOS DE CANCELAR LOS SALDOS QUE PUDIERA ADEUDAR AL BANCO POR CUALQUIER CRÉDITO DEL QUE SEA TITULAR/FIADOR.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		datePhrase = new Phrase(new Chunk(
				"5.	DE PRESENTARSE ALGÚN SALDO IMPAGO EN ALGÚN CRÉDITO, YA SEA COMO TITULAR/FIADOR, DESPUÉS DE APLICAR LOS FONDOS ANTES INDICADOS, AUTORIZO AL BANCO A EXTENDER UN NUEVO CRONOGRAMA DE PAGOS, CON CUOTAS QUE VENCERÁN EN LAS FECHAS SEÑALADAS EN DICHO CRONOGRAMA. ESTE CRONOGRAMA DE PAGOS SERÁ REMITIDO POR EL BANCO A MÍ DOMICILIO SEÑALADO AL MOMENTO DE LA OBTENCIÓN DEL CRÉDITO, SIN PERJUICIO DE QUE PUEDA SER RECOGIDO POR MÍ EN EL BANCO.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("_________________________________ ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("1  Indicar si es trabajador o pensionista.", FontFactory.getFont(FontFactory.HELVETICA, 7)));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("2  Indicar el nombre de la entidad empleadora o previsional.",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("3 Indicar el nombre del banco o entidad financiera depositaria de la CTS.",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("F.OP-404-V03-DNEG ", FontFactory.getFont(FontFactory.HELVETICA, 7)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase("ATENTAMENTE, ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("____________________________", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("___________________________", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("    TITULAR / PRESTATARIO ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("     GARANTE: FIADOR / AVAL", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("NOMBRES y APELLIDOS:", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		// String aCliente1

		cell = new PdfPCell(new Phrase("NOMBRES y APELLIDOS:", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(aCliente1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(aGarante1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(dniCliente1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(dniGarante1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		datePhrase = new Phrase(new Chunk(
				"SE DEJA EXPRESA CONSTANCIA QUE LA PRESENTE CARTA DE INSTRUCCIONES, SE EFECTÚA A TENOR DE LO DISPUESTO POR EL ARTÍCULO 179° DE LA LEY GENERAL DEL SISTEMA FINANCIERO Y DEL SISTEMA DE SEGUROS Y ORGÁNICA DE LA SUPERINTENDENCIA DE BANCA Y SEGUROS N° 26702, EL MISMO QUE A CONTINUACIÓN SE TRANSCRIBE: ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(1);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"“TODA INFORMACIÓN PROPORCIONADA POR EL CLIENTE A UNA EMPRESA DEL SISTEMA FINANCIERO O DEL SISTEMA DE SEGUROS TIENE EL CARÁCTER DE DECLARACIÓN JURADA. QUIEN VALIÉNDOSE DE INFORMACIÓN O DOCUMENTACIÓN FALSA SOBRE SU SITUACIÓN ECONÓMICA Y FINANCIERA, OBTIENE DE UNA EMPRESA DE LOS SISTEMAS FINANCIERO O DE SEGUROS, UNA O MÁS OPERACIONES DE CRÉDITO, DIRECTAS O INDIRECTAS, INCLUIDO EL ARRENDAMIENTO FINANCIERO O LA PRÓRROGA O REFINANCIACIÓN DE TALES OPERACIONES, QUEDA SUJETO A LA SANCIÓN ESTABLECIDA EN EL PRIMER PÁRRAFO DEL ARTÍCULO 247° DEL CÓDIGO PENAL. SIN PERJUICIO DE LA SANCIÓN PENAL A QUE SE ALUDE EN EL PÁRRAFO ANTERIOR, LA EMPRESA ESTÁ FACULTADA, PARA RESOLVER EL RESPECTIVO CONTRATO O DAR POR VENCIDOS TODOS LOS PLAZOS PACTADOS, PROCEDIENDO A EXIGIR LA EJECUCIÓN DE LAS GARANTÍAS CORRESPONDIENTES.”",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("F.OP-404-V03-DNEG", FontFactory.getFont(FontFactory.HELVETICA, 7)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable creaPDFCronogramaRepro(String fIniRepro, String aGarante1, String direccGarante,
			String tceaPrestamo, String telefonoCliente1, String fechaDesembolso, String aCliente, String dniCliente,
			String tlfCliente, String direccCliente, String aGarante, String dniGarante, String deudaTotal,
			String saldoNormalPrestamo, String nroPrestamo, String tasa, String tcea, String seguroCP, String ncuotas,
			List cuotas, List fvcto, List samortizacion, List sintereses, List sdesgravamen, List ssaldo, List sdcuota,
			List acuota) {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		// we add a cell with colspan 3

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase("",FontFactory.getFont(FontFactory.HELVETICA,
		 * 12))); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(2);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase("CRONOGRAMA REPROGRAMADO PRESTAMO MULTIRED",
				FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        CLIENTE", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + aCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        NRO DOCUMENTO", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + dniCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        NUMERO PRESTAMO ", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nroPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        GARANTE", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + aGarante, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        NRO DOCUMENTO GARANTE", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		if ((dniGarante.trim()).length() < 1) {

			cell = new PdfPCell(new Phrase(": -", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
			cell.setColspan(4);
			table.addCell(cell);
		} else {

			cell = new PdfPCell(new Phrase(": " + dniGarante, FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
			cell.setColspan(4);
			table.addCell(cell);
		}

		cell = new PdfPCell(
				new Phrase("        MONTO PRESTADO", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": S/**** " + deudaTotal + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        FECHA DE DESEMBOLSO ", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + fechaDesembolso + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        FECHA INICIO DE REPROGRAMACION",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		System.out.print("FECHA INICIO DE REPROGRAMACION" + fIniRepro);

		cell = new PdfPCell(new Phrase(": " + fIniRepro + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        TEA", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tasa + " %", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        TCEA", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tceaPrestamo + "%", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"      --------------------------------------------------------------------------------------------------------------------------"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("NC", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("F.VENCMTO", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("AMORTIZAC.", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("INTERESES", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEG.DESGR.", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CUOTA", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SALDO", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SIT", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"      --------------------------------------------------------------------------------------------------------------------------"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		int numCuotas = 0;

		numCuotas = Integer.parseInt(ncuotas);

		String fechaVencimiento = "";
		String diaVencimiento = "";
		String mesVencimiento = "";
		String annioVencimiento = "";

		// String saldoAmortizacion = "";

		float montoPrestamo = 0;
		float saldoAmortizacion_Numero = 0;
		float[] saldoDeuda = new float[numCuotas];

		int parteEnteraSaldoDeuda = 0;
		float parteFloatSaldoDeuda = 0;

		String sAmortizacion = "";
		String sIntereses = "";
		String sDesgravamen = "";
		String sSaldo = "";
		String sCuota = "";

		String saldoAmortizacion = "";
		BigDecimal saldoAmortizacionParaSuma = BigDecimal.ZERO;
		String saldoIntereses = "";
		BigDecimal saldoInteresesParaSuma = BigDecimal.ZERO;
		String saldoDesgravamen = "";
		BigDecimal saldoDesgravamenParaSuma = BigDecimal.ZERO;
		String saldoSaldo = "";
		BigDecimal saldoSaldoParaSuma = BigDecimal.ZERO;
		String saldoCuota = "";
		BigDecimal saldoCuotaParaSuma = BigDecimal.ZERO;

		float saldoAmortizacionParaSumaFloat = 0;
		float saldoInteresesParaSumaFloat = 0;
		float saldoDesgravamenParaSumaFloat = 0;
		float saldoSaldoParaSumaFloat = 0;
		float saldoCuotaParaSumaFloat = 0;

		float saldAmorti = 0;
		float saldInter = 0;
		float saldDesgrav = 0;
		float saldCuot = 0;

		for (int i = 0; i < numCuotas; i++) {

			annioVencimiento = ((String) fvcto.get(i)).substring(0, 4);
			mesVencimiento = ((String) fvcto.get(i)).substring(4, 6);
			diaVencimiento = ((String) fvcto.get(i)).substring(6, 8);

			fechaVencimiento = diaVencimiento + "-" + mesVencimiento + "-" + annioVencimiento;
			// fifi
			if (i == 0) {
				saldoAmortizacion = ((String) samortizacion.get(i));

				montoPrestamo = Float.parseFloat(saldoNormalPrestamo);
				saldoAmortizacion_Numero = Float.parseFloat(saldoAmortizacion);
				// List saldoDeuda1 = ssaldo.get(i);
				// saldoDeuda[i] = ssaldo

			} else {
				saldoAmortizacion = ((String) samortizacion.get(i));

				saldoAmortizacion_Numero = Float.parseFloat(saldoAmortizacion);
				saldoDeuda[i] = saldoDeuda[i - 1] - saldoAmortizacion_Numero;

			}
			// ssaldo
			// parteFloatSaldoDeuda = ((float)saldoDeuda[i])/100;

			// parteFloatSaldoDeuda = ((float)ssaldo[i])/100;

			sAmortizacion = ((String) samortizacion.get(i));
			sIntereses = ((String) sintereses.get(i));
			sDesgravamen = ((String) sdesgravamen.get(i));
			sSaldo = ((String) ssaldo.get(i));
			sCuota = ((String) sdcuota.get(i));

			saldoAmortizacion = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sAmortizacion, 2));
			saldoAmortizacionParaSuma = Funciones.tramaToBigDecimal(sAmortizacion, 2);
			saldoAmortizacionParaSumaFloat = saldoAmortizacionParaSuma.floatValue();

			saldoIntereses = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sIntereses, 2));
			saldoInteresesParaSuma = Funciones.tramaToBigDecimal(sIntereses, 2);
			saldoInteresesParaSumaFloat = saldoInteresesParaSuma.floatValue();

			saldoDesgravamen = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sDesgravamen, 2));
			saldoDesgravamenParaSuma = Funciones.tramaToBigDecimal(sDesgravamen, 2);
			saldoDesgravamenParaSumaFloat = saldoDesgravamenParaSuma.floatValue();

			saldoSaldo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sSaldo, 2));
			saldoSaldoParaSuma = Funciones.tramaToBigDecimal(sSaldo, 2);
			saldoSaldoParaSumaFloat = saldoSaldoParaSuma.floatValue();

			saldoCuota = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sCuota, 2));
			saldoCuotaParaSuma = Funciones.tramaToBigDecimal(sCuota, 2);
			saldoCuotaParaSumaFloat = saldoCuotaParaSuma.floatValue();

			cell = new PdfPCell(
					new Phrase("" + String.format("%02d", i + 1) + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("" + fechaVencimiento + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			if (saldoAmortizacion.length() == 4 || saldoAmortizacion.length() == 5) {

				if (saldoAmortizacion.equals("0.00")) {
					saldoAmortizacion = "    " + saldoAmortizacion;
				} else {
					saldoAmortizacion = "  " + saldoAmortizacion;
				}

			} else {
				saldoAmortizacion = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sAmortizacion, 2));
			}

			cell = new PdfPCell(
					new Phrase("" + saldoAmortizacion + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			if (saldoIntereses.length() == 4) {

				saldoIntereses = "     " + saldoIntereses;

			} else if (saldoIntereses.length() == 5) {

				saldoIntereses = "   " + saldoIntereses;

			} else {

				saldoIntereses = " " + Funciones.formatearMonto(Funciones.tramaToBigDecimal(sIntereses, 2));
			}

			cell = new PdfPCell(new Phrase("" + saldoIntereses + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("" + saldoDesgravamen + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			if (saldoCuota.length() == 4 || saldoCuota.length() == 5) {

				if (saldoCuota.equals("0.00")) {
					saldoCuota = "    " + saldoCuota;
				} else {
					saldoCuota = "  " + saldoCuota;
				}

			} else {
				saldoCuota = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sCuota, 2));
			}

			cell = new PdfPCell(new Phrase("" + saldoCuota + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			/*
			 * 
			 * String stringSaldoDeuda = String.valueOf(Funciones.formatearMonto111
			 * (parteFloatSaldoDeuda));
			 * 
			 * if(stringSaldoDeuda.length() == 4 || stringSaldoDeuda.length() == 5 ||
			 * stringSaldoDeuda.length() == 6){
			 * 
			 * if(stringSaldoDeuda.equals("0.00")){ cell = new PdfPCell(new Phrase
			 * ("       "+saldoSaldo+"",FontFactory.getFont(FontFactory.HELVETICA , 10)));
			 * cell.setBorder(Rectangle.NO_BORDER);
			 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
			 * table.addCell(cell); }else{ cell = new PdfPCell(new
			 * Phrase("   "+saldoSaldo+"",FontFactory.getFont(FontFactory .HELVETICA, 10)));
			 * cell.setBorder(Rectangle.NO_BORDER);
			 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
			 * table.addCell(cell); }
			 * 
			 * }else{ parteFloatSaldoDeuda = ((float)saldoDeuda[i])/100; //saldoSaldo //cell
			 * = new PdfPCell(new Phrase(""+Funciones.formatearMonto111
			 * (parteFloatSaldoDeuda)+"",FontFactory .getFont(FontFactory.HELVETICA, 10)));
			 * 
			 * cell = new PdfPCell(new Phrase(""+(saldoSaldo)+"",FontFactory.getFont
			 * (FontFactory.HELVETICA, 10))); cell.setBorder(Rectangle.NO_BORDER);
			 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(1);
			 * table.addCell(cell); }
			 */

			cell = new PdfPCell(new Phrase("   " + saldoSaldo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("" + acuota.get(i) + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			// float saldoAmort = Float.parseFloat(saldoAmortizacion);
			// float saldoInter = Float.parseFloat(saldoIntereses);
			// float saldoDesgrav = Float.parseFloat(saldoDesgravamen);
			// float saldoCuot = Float.parseFloat(saldoCuota);

			saldAmorti = saldAmorti + saldoAmortizacionParaSumaFloat;
			saldInter = saldInter + saldoInteresesParaSumaFloat;
			saldDesgrav = saldDesgrav + saldoDesgravamenParaSumaFloat;
			saldCuot = saldCuot + saldoCuotaParaSumaFloat;

			// saldAmorti = saldAmorti ;
			// saldInter = saldInter ;
			// saldDesgrav = saldDesgrav ;
			// saldCuot = saldCuot;

		}

		/*
		 * cell = new PdfPCell(new Phrase("16/18",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(
				"      --------------------------------------------------------------------------------------------------------------------------"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("     TOTALES", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + Funciones.formatearMonto111(saldAmorti) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + Funciones.formatearMonto111(saldInter) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + Funciones.formatearMonto111(saldDesgrav) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("" + Funciones.formatearMonto111(saldCuot) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"      --------------------------------------------------------------------------------------------------------------------------"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(
		 * "...........................................          ..........................................           ..................................................................."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "    FIRMA DEL TITULAR                FIRMA DEL GARANTE                      FIRMA REPRESENTANTE BN"
		 * , FontFactory.getFont(FontFactory.HELVETICA, 11)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		return table;

	}

	public static PdfPTable creaPDFGenera(String prestamo, String usuario, String fecha, String hora) {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		// we add a cell with colspan 3

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Préstamo", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + prestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Usuario", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": " + usuario.toUpperCase() + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Fecha", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + fecha + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Hora", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + hora + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable prueba() {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;

		cell = new PdfPCell(new Phrase("PRUEBA", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		return table;

	}

	// clausulafuncion general
	public static PdfPTable clausulasG() {

		String documento = "En este documento están establecidas las cláusulas generales que se aplicarán a todo tipo de contrato (\"contrato\") de préstamo personal (\"préstamo\"), que usted (\"usted\") tenga o pudiera tener con nosotros banco de la nación (\"banco de la nación o banco\")."
				+ "Por ello, es muy importante que lea detenidamente este documento. Si tiene alguna duda, por favor consulte con el funcionario del banco. Cada una de las cláusulas generales se presenta bajo el formato de pregunta y respuesta, por ello las cláusulas que usted y el banco han pactado y aceptado cumplir son las siguientes:";

		PdfPTable table = new PdfPTable(6);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);
		table.setLockedWidth(true);
		table.getDefaultCell().setBorder(PdfPCell.BOX);
		table.getDefaultCell().setBorderColor(BaseColor.BLACK);
		table.getDefaultCell().setBorderWidth(PdfPCell.BOX);

		PdfPCell cell;

		// the cell object

		cell = new PdfPCell(new Phrase("CLÁUSULAS GENERALES APLICABLES A LOS PRÉSTAMOS",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(documento, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("1. ¿Qué son las cláusulas generales? ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(documento, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable clausulasGPageFinal() {
		String texto = "Las instrucciones que pudiera impartirle. Estas grabaciones serán mantenidas en reserva y utilizadas para aclarar cualquier "
				+ "discrepancia y/o litigio que pudiera presentarse al respecto. Asimismo, usted autoriza al banco a grabar cualquier tipo de "
				+ "conversación, solicitud, autorización, instrucción, adquisición y en general cualquier otro tipo de orden o manifestación de "
				+ "voluntad y/o consentimiento relacionado con el préstamo y los servicios adicionales asociados a ella, comprometiéndose "
				+ "a mantener absoluta reserva de las mismas.";

		String textoB = "b) Tributos: todos los tributos (impuestos) que graven el otorgamiento del préstamo y, en general, todos los servicios que le "
				+ "brinde el banco según el contrato y deban ser pagados, serán asumidos por usted.\n"
				+ "c) Representante: su representante y/o apoderado podrá efectuar en su representación operaciones relacionadas a pagos a "
				+ "las cuotas del préstamo o en caso de pagos anticipados o adelanto de cuotas, para este caso deberá considerarse lo "
				+ "señalado en la cláusula general N° 8, para lo cual deberá presentar una carta con su firma legalizada.\n"
				+ "Para realizar otro tipo de operaciones y/o servicios e incluso para solicitar información deberá acreditar su representación "
				+ "mediante poder de acuerdo a las normas legales vigentes, para lo cual deberá presentarse la documentación "
				+ "correspondiente, dicha documentación será evaluada por el banco no siendo éste último responsable en caso de rechazo "
				+ "por carecer de facultades suficientes o por no cumplir los requisitos de ley.\n"
				+ "d) Requerimiento de información adicional: usted reconoce que el banco podrá requerirle entre otros, información sobre su "
				+ "situación personal, financiera y crediticia, la misma que usted se obliga a mantener permanentemente actualizada durante "
				+ "la vigencia de éste contrato, especialmente en lo que se refiere a su nacionalidad, lugar de residencia, composición "
				+ "accionaria o situación fiscal, comprometiéndose también a comunicar a el banco cualquier cambio que se produzca al "
				+ "respecto. Usted se compromete a atender dichos requerimientos de información, entregando información veraz y oportuna "
				+ "con carácter de declaración jurada.\n"
				+ "En caso que surja alguna disputa o controversia entre usted y el banco sobre la validez, la interpretación o la ejecución del "
				+ "contrato, usted y el banco se someterán a la competencia de los jueces correspondientes del distrito judicial que corresponde "
				+ "al lugar en el cual se ha celebrado el presente contrato.\n"
				+ "Todos los costos y costas, incluidos los gastos, que ocasione la cobranza judicial, que disponga la autoridad judicial "
				+ "competente, del préstamo serán pagados íntegramente por usted y/o por el fiador.";

		String textoFecha = "FECHA:_____________";
		String textoClausula1 = "F.OP-452-A-V06-GPIF";
		String textoClausula2 = " Cláusulas generales aprobadas mediante Resolución ";
		String textoClausula3 = "SBS N° 00993-2022 Pág.09 de 09";

		PdfPTable table = new PdfPTable(4);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);
		// table.setT(PageSize.A4.getWidth()-60);

		table.setLockedWidth(true);
		table.getDefaultCell().setBorder(PdfPCell.BOX);
		table.getDefaultCell().setBorderColor(BaseColor.BLACK);
		table.getDefaultCell().setBorderWidth(PdfPCell.BOX);

		PdfPCell cell;

		// the cell object

		cell = new PdfPCell(new Phrase(texto, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setLeading(10f, 1.2f);
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(textoB, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setLeading(10f, 1.2f);
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(textoFecha, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setLeading(10f, 1.2f);
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SSSSSSSSSS", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setLeading(18f, 1.2f);
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SSSSSS", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setLeading(18f, 1.2f);
		cell.setBorder(Rectangle.BOX);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SSSSSS", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setLeading(18f, 1.2f);
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SSSSSS", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.BOX);
		cell.setLeading(18f, 1.2f);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(textoClausula1, FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(textoClausula2, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(textoClausula3, FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(1);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable creaPDFCronograma(String aGarante1, String direccGarante, String tceaPrestamo,
			String telefonoCliente1, String fechaDesembolso, String aCliente, String dniCliente, String tlfCliente,
			String direccCliente, String aGarante, String dniGarante, String deudaTotal, String saldoNormalPrestamo,
			String nroPrestamo, String tasa, String tcea, String seguroCP, String ncuotas, List fvcto,
			List samortizacion, List sintereses, List sdesgravamen, List sdcuota, List acuota) {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		// we add a cell with colspan 3

		cell = new PdfPCell(new Phrase("FECHA DE DESEMBOLSO:     " + fechaDesembolso + "",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("CRONOGRAMA DE PAGO", FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + aCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("D.O.I", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + dniCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("TELÉFONO", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telefonoCliente1 + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DIRECCIÓN CLIENTE", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + direccCliente + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("GARANTE", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + aGarante1, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("MONTO PRESTADO", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": S/**** " + deudaTotal + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SG.CPRO", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": S/* " + seguroCP + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("NRO. DE PRÉSTAMO", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nroPrestamo + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("TEA", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tasa + " %", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("TCEA", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tceaPrestamo + "%", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DIRECCIÓN GARANTE", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + direccGarante, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"      --------------------------------------------------------------------------------------------------------------------------"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("NC", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("F.VENCMTO", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("AMORTIZAC.", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("INTERESES", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEG.DESGR.", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CUOTA", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SALDO", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SIT", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"      --------------------------------------------------------------------------------------------------------------------------"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		int numCuotas = 0;

		numCuotas = Integer.parseInt(ncuotas);

		String fechaVencimiento = "";
		String diaVencimiento = "";
		String mesVencimiento = "";
		String annioVencimiento = "";

		// String saldoAmortizacion = "";

		// float montoPrestamo = 0;
		BigDecimal montoPrestamo = new BigDecimal(0);
		// float saldoAmortizacion_Numero = 0;
		BigDecimal saldoAmortizacion_Numero = new BigDecimal(0);
		// float[] saldoDeuda = new float[numCuotas];
		List<BigDecimal> saldoDeuda = new ArrayList<BigDecimal>();

		int parteEnteraSaldoDeuda = 0;
		// float parteFloatSaldoDeuda = 0;
		BigDecimal parteFloatSaldoDeuda = new BigDecimal(0);

		String sAmortizacion = "";
		String sIntereses = "";
		String sDesgravamen = "";
		String sCuota = "";

		String saldoAmortizacion = "";
		BigDecimal saldoAmortizacionParaSuma = BigDecimal.ZERO;
		String saldoIntereses = "";
		BigDecimal saldoInteresesParaSuma = BigDecimal.ZERO;
		String saldoDesgravamen = "";
		BigDecimal saldoDesgravamenParaSuma = BigDecimal.ZERO;
		String saldoCuota = "";
		BigDecimal saldoCuotaParaSuma = BigDecimal.ZERO;

		// float saldoAmortizacionParaSumaFloat = 0;
		// float saldoInteresesParaSumaFloat = 0;
		// float saldoDesgravamenParaSumaFloat = 0;
		// float saldoCuotaParaSumaFloat = 0;

		// float saldAmorti = 0;
		BigDecimal saldAmorti = BigDecimal.ZERO;
		// float saldInter = 0;
		BigDecimal saldInter = BigDecimal.ZERO;
		// float saldDesgrav = 0;
		BigDecimal saldDesgrav = BigDecimal.ZERO;
		// float saldCuot = 0;
		BigDecimal saldCuot = BigDecimal.ZERO;

		for (int i = 0; i < numCuotas; i++) {

			annioVencimiento = ((String) fvcto.get(i)).substring(0, 4);
			mesVencimiento = ((String) fvcto.get(i)).substring(4, 6);
			diaVencimiento = ((String) fvcto.get(i)).substring(6, 8);

			fechaVencimiento = diaVencimiento + "-" + mesVencimiento + "-" + annioVencimiento;

			if (i == 0) {

				saldoAmortizacion = ((String) samortizacion.get(i));

				// montoPrestamo = Float.parseFloat(saldoNormalPrestamo);
				montoPrestamo = new BigDecimal(saldoNormalPrestamo);
				// saldoAmortizacion_Numero =
				// Float.parseFloat(saldoAmortizacion);
				saldoAmortizacion_Numero = new BigDecimal(saldoAmortizacion);
				// saldoDeuda[i] = montoPrestamo - saldoAmortizacion_Numero;
				saldoDeuda.add(montoPrestamo.subtract(saldoAmortizacion_Numero));

			} else {

				saldoAmortizacion = ((String) samortizacion.get(i));

				// saldoAmortizacion_Numero =
				// Float.parseFloat(saldoAmortizacion);
				saldoAmortizacion_Numero = new BigDecimal(saldoAmortizacion);
				// saldoDeuda[i] = saldoDeuda[i - 1] - saldoAmortizacion_Numero;
				saldoDeuda.add(saldoDeuda.get(i - 1).subtract(saldoAmortizacion_Numero));
			}

			// parteFloatSaldoDeuda = ((float) saldoDeuda[i]) / 100;
			parteFloatSaldoDeuda = saldoDeuda.get(i).divide(new BigDecimal(100), 2, RoundingMode.HALF_UP);

			sAmortizacion = ((String) samortizacion.get(i));
			sIntereses = ((String) sintereses.get(i));
			sDesgravamen = ((String) sdesgravamen.get(i));
			sCuota = ((String) sdcuota.get(i));

			saldoAmortizacion = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sAmortizacion, 2));
			saldoAmortizacionParaSuma = Funciones.tramaToBigDecimal(sAmortizacion, 2);
			// saldoAmortizacionParaSumaFloat =
			// saldoAmortizacionParaSuma.floatValue();

			saldoIntereses = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sIntereses, 2));
			saldoInteresesParaSuma = Funciones.tramaToBigDecimal(sIntereses, 2);
			// saldoInteresesParaSumaFloat =
			// saldoInteresesParaSuma.floatValue();

			saldoDesgravamen = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sDesgravamen, 2));
			saldoDesgravamenParaSuma = Funciones.tramaToBigDecimal(sDesgravamen, 2);
			// saldoDesgravamenParaSumaFloat =
			// saldoDesgravamenParaSuma.floatValue();

			saldoCuota = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sCuota, 2));
			saldoCuotaParaSuma = Funciones.tramaToBigDecimal(sCuota, 2);
			// saldoCuotaParaSumaFloat = saldoCuotaParaSuma.floatValue();

			cell = new PdfPCell(
					new Phrase("" + String.format("%02d", i + 1) + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("" + fechaVencimiento + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			if (saldoAmortizacion.length() == 4 || saldoAmortizacion.length() == 5) {

				if (saldoAmortizacion.equals("0.00")) {
					saldoAmortizacion = "    " + saldoAmortizacion;
				} else {
					saldoAmortizacion = "  " + saldoAmortizacion;
				}

			} else {
				saldoAmortizacion = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sAmortizacion, 2));
			}

			cell = new PdfPCell(
					new Phrase("" + saldoAmortizacion + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			if (saldoIntereses.length() == 4) {

				saldoIntereses = "     " + saldoIntereses;

			} else if (saldoIntereses.length() == 5) {

				saldoIntereses = "   " + saldoIntereses;

			} else {

				saldoIntereses = " " + Funciones.formatearMonto(Funciones.tramaToBigDecimal(sIntereses, 2));
			}

			cell = new PdfPCell(new Phrase("" + saldoIntereses + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("" + saldoDesgravamen + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			if (saldoCuota.length() == 4 || saldoCuota.length() == 5) {

				if (saldoCuota.equals("0.00")) {
					saldoCuota = "    " + saldoCuota;
				} else {
					saldoCuota = "  " + saldoCuota;
				}

			} else {
				saldoCuota = Funciones.formatearMonto(Funciones.tramaToBigDecimal(sCuota, 2));
			}

			cell = new PdfPCell(new Phrase("" + saldoCuota + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			// String stringSaldoDeuda =
			// String.valueOf(Funciones.formatearMonto111(parteFloatSaldoDeuda));
			String stringSaldoDeuda = parteFloatSaldoDeuda.setScale(2).toString();

			if (stringSaldoDeuda.length() == 4 || stringSaldoDeuda.length() == 5 || stringSaldoDeuda.length() == 6) {

				if (stringSaldoDeuda.equals("0.00")) {
					// cell = new PdfPCell(new Phrase(" " +
					// Funciones.formatearMonto111(parteFloatSaldoDeuda) + "",
					// FontFactory.getFont(FontFactory.HELVETICA, 10)));
					cell = new PdfPCell(
							new Phrase("       " + Funciones.formatearMonto(parteFloatSaldoDeuda.setScale(2)) + "",
									FontFactory.getFont(FontFactory.HELVETICA, 10)));
					cell.setBorder(Rectangle.NO_BORDER);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell.setColspan(1);
					table.addCell(cell);
				} else {
					// cell = new PdfPCell(new Phrase(" " +
					// Funciones.formatearMonto111(parteFloatSaldoDeuda) + "",
					// FontFactory.getFont(FontFactory.HELVETICA, 10)));
					cell = new PdfPCell(
							new Phrase("   " + Funciones.formatearMonto(parteFloatSaldoDeuda.setScale(2)) + "",
									FontFactory.getFont(FontFactory.HELVETICA, 10)));
					cell.setBorder(Rectangle.NO_BORDER);
					cell.setHorizontalAlignment(Element.ALIGN_CENTER);
					cell.setColspan(1);
					table.addCell(cell);
				}

			} else {
				// parteFloatSaldoDeuda = ((float) saldoDeuda[i]) / 100;
				parteFloatSaldoDeuda = saldoDeuda.get(i).divide(new BigDecimal(100), 2, RoundingMode.HALF_UP);

				// cell = new PdfPCell(new Phrase("" +
				// Funciones.formatearMonto111(parteFloatSaldoDeuda) + "",
				// FontFactory.getFont(FontFactory.HELVETICA, 10)));
				cell = new PdfPCell(new Phrase("" + Funciones.formatearMonto(parteFloatSaldoDeuda.setScale(2)) + "",
						FontFactory.getFont(FontFactory.HELVETICA, 10)));
				cell.setBorder(Rectangle.NO_BORDER);
				cell.setHorizontalAlignment(Element.ALIGN_CENTER);
				cell.setColspan(1);
				table.addCell(cell);
			}

			cell = new PdfPCell(new Phrase("" + acuota.get(i) + "", FontFactory.getFont(FontFactory.HELVETICA, 10)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.setColspan(1);
			table.addCell(cell);

			// float saldoAmort = Float.parseFloat(saldoAmortizacion);
			// float saldoInter = Float.parseFloat(saldoIntereses);
			// float saldoDesgrav = Float.parseFloat(saldoDesgravamen);
			// float saldoCuot = Float.parseFloat(saldoCuota);

			// saldAmorti = saldAmorti + saldoAmortizacionParaSumaFloat;
			saldAmorti = saldAmorti.add(saldoAmortizacionParaSuma);
			// saldInter = saldInter + saldoInteresesParaSumaFloat;
			saldInter = saldInter.add(saldoInteresesParaSuma);
			// saldDesgrav = saldDesgrav + saldoDesgravamenParaSumaFloat;
			saldDesgrav = saldDesgrav.add(saldoDesgravamenParaSuma);
			// saldCuot = saldCuot + saldoCuotaParaSumaFloat;
			saldCuot = saldCuot.add(saldoCuotaParaSuma);

			// saldAmorti = saldAmorti ;
			// saldInter = saldInter ;
			// saldDesgrav = saldDesgrav ;
			// saldCuot = saldCuot;

		}

		/*
		 * cell = new PdfPCell(new Phrase("16/18",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(
				"      --------------------------------------------------------------------------------------------------------------------------"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("     TOTALES", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		// cell = new PdfPCell(new Phrase("" +
		// Funciones.formatearMonto111(saldAmorti) + "",
		// FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell = new PdfPCell(new Phrase("" + Funciones.formatearMonto(saldAmorti.setScale(2)) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		// cell = new PdfPCell(new Phrase("" +
		// Funciones.formatearMonto111(saldInter) + "",
		// FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell = new PdfPCell(new Phrase("" + Funciones.formatearMonto(saldInter.setScale(2)) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		// cell = new PdfPCell(new Phrase("" +
		// Funciones.formatearMonto111(saldDesgrav) + "",
		// FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell = new PdfPCell(new Phrase("" + Funciones.formatearMonto(saldDesgrav.setScale(2)) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		// cell = new PdfPCell(new Phrase("" +
		// Funciones.formatearMonto111(saldCuot) + "",
		// FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell = new PdfPCell(new Phrase("" + Funciones.formatearMonto(saldCuot.setScale(2)) + "",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell( new Phrase(
		 * "      --------------------------------------------------------------------------------------------------------------------------"
		 * )); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase("NOTA.-", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Intereses y primas de seguros referenciales, que se cobraran, actualizadas a la fecha de pago de la cuota. Si se atras más de 120 días"
						+ " en el pago de una cuota o si su garante del crédito ha pagado tres (03) cuotas consecutivas y/o alternas,"
						+ " Ud. (titular del crédito) solo podrá acceder a un nuevo préstamo siempre que transcurran más de dos (02) años de"
						+ " haber cancelado su préstamo. Los pagos pueden ser efectuados en cualquier ventanilla del Banco.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(7);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"     ________________________________                       ________________________________",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("FIRMA DE EL CLIENTE                                              FIRMA DEL GARANTE",
						FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable creaPDFPolizaCertificadoSeguroCuotaPPre(String certificado, Image logoPositiva,
			String secpoliza, String acliente, String finivigencia, String ftervigencia, String tipodoc, String sexo,
			String fenac, String nacionalidad, String estcivil, String telefonoCliente1, String celularCliente1,
			String ctrabajo, String direccion, String dis, String correoCliente, String nprestamo, String oficina,
			String codvendedor, String montoSolicitadoPrestamo, String numeroCuotasPrestamo, String tasaPrestamo,
			String tceaPrestam, String prima) throws DocumentException {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 30);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		// we add a cell with colspan 3
		Phrase datePhrase;

		// float[] medidaCeldas = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

		// table.setWidths(medidaCeldas);

		// cell = new PdfPCell(new Phrase (" "));
		// cell.setBorder(Rectangle.NO_BORDER);
		// cell.setColspan(2);
		// table.addCell(cell);

		// cell = new PdfPCell(new Phrase (" "));
		// cell.setBorder(Rectangle.NO_BORDER);
		// cell.setBorderWidthTop(0.1f);
		// cell.setColspan(3);
		// table.addCell(cell);

		// pagina1

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro.Solicitud-Certificado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro.Certificado        ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + certificado, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nombre del Asegurado   ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Documento de Identidad", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + fenac, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Dirección Particular      ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Correo Electrónico  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + correoCliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telefonoCliente1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Beneficiario", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				": Banco de la Nación, salvo la cobertura de Pensión Segura en la cual el beneficiario    es el asegurado.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Préstamo    ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Monto de Préstamo   ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": S/ " + montoSolicitadoPrestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Cuotas      ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		int numCuotasPrestamo = 0;

		numCuotasPrestamo = Integer.parseInt(numeroCuotasPrestamo);

		cell = new PdfPCell(
				new Phrase(": " + numCuotasPrestamo + " Meses", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tasa Comercial", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   (Aplicada sobre el préstamo)", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": 0.9840 %", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Tasa Comercial Más IGV    ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": 1.1610 %", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Prima", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": S/ " + prima, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Forma de Pago  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Pago único por adelantado y por toda la vigencia del préstamo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha Inicio de vigencia  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha Fin de vigencia  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ftervigencia + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		// espacio
		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);
		return table;

	}

	public static PdfPTable creaPDFPolizaCertificadoSeguroCuotaPPre(String certificado, Image logoPositiva,
			String secpoliza, String acliente, String finivigencia, String ftervigencia, String tipodoc, String sexo,
			String fenac, String nacionalidad, String estcivil, String telefonoCliente1, String celularCliente1,
			String ctrabajo, String direccion, String dis, String correoCliente, String nprestamo, String oficina,
			String codvendedor, String montoSolicitadoPrestamo, String numeroCuotasPrestamo, String tasaPrestamo,
			String tceaPrestam, String prima, int aleato) throws DocumentException {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 30);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		// we add a cell with colspan 3
		Phrase datePhrase;

		// float[] medidaCeldas = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

		// table.setWidths(medidaCeldas);

		// cell = new PdfPCell(new Phrase (" "));
		// cell.setBorder(Rectangle.NO_BORDER);
		// cell.setColspan(2);
		// table.addCell(cell);

		// cell = new PdfPCell(new Phrase (" "));
		// cell.setBorder(Rectangle.NO_BORDER);
		// cell.setBorderWidthTop(0.1f);
		// cell.setColspan(3);
		// table.addCell(cell);

		// pagina1

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro.Solicitud-Certificado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro.Certificado        ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + certificado, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nombre del Asegurado   ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Documento de Identidad", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + fenac, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Dirección Particular      ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Correo Electrónico  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + correoCliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telefonoCliente1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Beneficiario", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				": Banco de la Nación, salvo la cobertura de Pensión Segura en la cual el beneficiario    es el asegurado.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Préstamo    ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Monto de Préstamo   ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": S/ " + montoSolicitadoPrestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Cuotas      ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		int numCuotasPrestamo = 0;

		numCuotasPrestamo = Integer.parseInt(numeroCuotasPrestamo);

		cell = new PdfPCell(
				new Phrase(": " + numCuotasPrestamo + " Meses", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tasa Comercial", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   (Aplicada sobre el préstamo)", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": 0.9840 %", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Tasa Comercial Más IGV    ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": 1.1610 %", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Prima", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": S/ " + prima, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Forma de Pago  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Pago único por adelantado y por toda la vigencia del préstamo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha Inicio de vigencia  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha Fin de vigencia  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ftervigencia + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		// espacio

		return table;

	}

	public static PdfPTable creaPDFPolizaCertificadoSeguroCuotaP(String certificado, Image logoPositiva,
			String secpoliza, String acliente, String finivigencia, String ftervigencia, String tipodoc, String sexo,
			String fenac, String nacionalidad, String estcivil, String telefonoCliente1, String celularCliente1,
			String ctrabajo, String direccion, String dis, String correoCliente, String nprestamo, String oficina,
			String codvendedor, String montoSolicitadoPrestamo, String numeroCuotasPrestamo, String tasaPrestamo,
			String tceaPrestam, String prima) throws DocumentException {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 30);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		// we add a cell with colspan 3
		Phrase datePhrase;

		// float[] medidaCeldas = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

		// table.setWidths(medidaCeldas);

		// cell = new PdfPCell(new Phrase (" "));
		// cell.setBorder(Rectangle.NO_BORDER);
		// cell.setColspan(2);
		// table.addCell(cell);

		// cell = new PdfPCell(new Phrase (" "));
		// cell.setBorder(Rectangle.NO_BORDER);
		// cell.setBorderWidthTop(0.1f);
		// cell.setColspan(3);
		// table.addCell(cell);

		// pagina1
		/*
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setColspan(8); table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setColspan(8); table.addCell(cell);
		 */

		cell = new PdfPCell(logoPositiva, true);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setColspan(2);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Póliza: 5713683", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Código de Registro SBS: RG0415710243", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(4);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("          SOLICITUD - CERTIFICADO DE SEGURO",
				FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("          SEGURO DE CUOTA PROTEGIDA",
				FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		// segunda
		cell = new PdfPCell(
				new Phrase("   Nro.Solicitud-Certificado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + secpoliza, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro.Certificado        ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + certificado, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nombre del Asegurado   ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + acliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Documento de Identidad", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + tipodoc, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + fenac, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Dirección Particular      ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Correo Electrónico  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + correoCliente, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telefonoCliente1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Beneficiario", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				": Banco de la Nación, salvo la cobertura de Pensión Segura en la cual el beneficiario    es el asegurado.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Préstamo    ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nprestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Monto de Préstamo   ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": S/ " + montoSolicitadoPrestamo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Cuotas      ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		int numCuotasPrestamo = 0;

		numCuotasPrestamo = Integer.parseInt(numeroCuotasPrestamo);

		cell = new PdfPCell(
				new Phrase(": " + numCuotasPrestamo + " Meses", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tasa Comercial", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   (Aplicada sobre el préstamo)", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": 0.9840 %", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Tasa Comercial Más IGV    ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": 1.1610 %", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Prima", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": S/ " + prima, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Forma de Pago  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Pago único por adelantado y por toda la vigencia del préstamo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha Inicio de vigencia  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + finivigencia + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Fecha Fin de vigencia  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ftervigencia + "", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("1. Datos del contrante", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Contratante: ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("BANCO DE LA NACIÓN", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("RUC: ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("20100030595", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Dirección: ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Av. JAVIER PRADO ESTE 2499 - SAN BORJA - LIMA- LIMA",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Teléfono: ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("01) 519-2000", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("Dirección de Correo Electrónico: ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("www.bn.com.pe", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("Relación del Asegurado con el Contratante: Cliente del Contratante con Préstamo Vigente",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell = new PdfPCell(datePhrase);
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2. Tratamiento de datos personales",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("El ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk("autoriza de forma expresa a ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"el tratamiento de los datos personales proporcionados en la contratación del presente seguro, así como el uso de los mismos para fines comerciales, tales como el envío de publicidad y promociones de diferentes productos o servicios; autorización que se extiende en el marco de lo dispuesto en la Ley Nº 29733 y su Reglamento, aprobado por Decreto Supremo Nº 003-2013-JUS, que regula el tratamiento de datos personales y la posibilidad de que ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("La Positiva", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"  transfiera los mismos a sus empresas vinculadas y/o terceros con los que ésta mantenga una relación contractual.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("El ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"declara que, antes de suscribir esta solicitud-certificado de seguro ha tomado conocimiento de todas y cada una de las condiciones del presente documento, a cuyas estipulaciones queda sometido el presente contrato.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("El Asegurado declara que, antes de suscribir esta
		// solicitud-certificado de seguro ha tomado conocimiento de todas y cada una de
		// las condiciones del presente documento, a cuyas estipulaciones queda sometido
		// el presente contrato",
		// FontFactory.getFont(FontFactory.HELVETICA,9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable creaPDFPolizaFirma22(String certificado, Image logoPositiva, String secpoliza,
			String acliente, String finivigencia, String ftervigencia, String tipodoc, String sexo, String fenac,
			String nacionalidad, String estcivil, String telefonoCliente1, String celularCliente1, String ctrabajo,
			String direccion, String dis, String correoCliente, String nprestamo, String oficina, String codvendedor,
			String montoSolicitadoPrestamo, String numeroCuotasPrestamo, String tasaPrestamo, String tceaPrestam,
			String prima) throws DocumentException {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 30);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		// we add a cell with colspan 3
		Phrase datePhrase;

		// float[] medidaCeldas = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

		// table.setWidths(medidaCeldas);

		// cell = new PdfPCell(new Phrase (" "));
		// cell.setBorder(Rectangle.NO_BORDER);
		// cell.setColspan(2);
		// table.addCell(cell);

		// cell = new PdfPCell(new Phrase (" "));
		// cell.setBorder(Rectangle.NO_BORDER);
		// cell.setBorderWidthTop(0.1f);
		// cell.setColspan(3);
		// table.addCell(cell);

		// pagina1

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("_________________________"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("_________________________"));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"                                             La Positiva                                                                                                                  Asegurado",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 7))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 7))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 1/9 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("3.Riesgos cubiertos", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Coberturas principales", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Detalle de coberturas", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Desempleo involuntario", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Incapacidad temporal", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Hospitalización por accidente", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Suma asegurada", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Hasta 8 cuotas del préstamo de una sola vez o el saldo insoluto, el que sea menor.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Hasta 8 cuotas del préstamo personal.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Hasta 6 cuotas del préstamo personal.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Forma de pago de la indemnización",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("De una sola vez hasta 8 cuotas del préstamo o el saldo insoluto, el que sea menor.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("1 cuota por cada 30 días calendarios de incapacidad temporal.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Primera cuota pagada después de 3 días calendarios de Hospitalización y luego se pagará 1 cuota por cada 10 días calendarios de Hospitalización.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Deducibles", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La primera cuota después de la determinación del Desempleo = 1 cuota.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La primera cuota después del diagnóstico de Incapacidad Temporal = 1 cuota.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Los primeros 3 días calendarios de hospitalización.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Antigüedad laboral", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("6 meses.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Periodo de carencia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("30 días calendarios.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("30 días calendarios.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Periodo activo mínimo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("180 días calendarios.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("180 días calendarios.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Número de eventos al año", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2 eventos.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2 eventos.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Indefinido.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Edad mínima para inicio de cobertura",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("18 años.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("18 años.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("18 años.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Edad máxima de inicio de cobertura",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("69 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("69 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("84 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Edad límite de permanencia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("69 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("69 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("84 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Coberturas Adicionales", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Detalle de coberturas", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Primer diagnóstico de enfermedades graves",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez permanente total por accidente",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Pensión Segura (Robo de efectivo retirado por ventanilla)",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Suma asegurada", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Si la enfermedad es diagnosticada los dos primeros años del préstamo: Hasta 8 cuotas del préstamo personal.Si la enfermedad es diagnosticada después del segundo año del préstamo: Saldo insoluto del préstamo",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Hasta 8 cuotas del préstamo personal.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Máximo hasta S/ 500.00 de la pensión retirada. Periodo de tiempo cubierto: 2 horas desde que se efectuó el retiro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Forma de pago de la indemnización",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Si la enfermedad es diagnosticada los dos primeros años del préstamo: El pago de las 8 cuotas del préstamo se da en una sola vez.Si la enfermedad es diagnosticada después del segundo año del préstamo: El pago del saldo insoluto del préstamo se da en una sola vez.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Se pagarán las cuotas una por mes.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Reembolso de la suma asegurada.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Deducibles", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("30 días calendarios de sobrevivencia.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Antigüedad laboral", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Periodo de carencia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("90 días calendarios.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Periodo activo mínimo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Número de eventos al año", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("1 evento por todo el periodo del préstamo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("1 evento por todo el periodo del préstamo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Máximo 2 siniestros por año.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Edad mínima para inicio de cobertura",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("18 años.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("18 años.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("60 años.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Edad máxima de inicio de cobertura",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("69 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("84 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("84 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Edad límite de permanencia ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("69 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("84 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("84 años y 364 días.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Las coberturas otorgadas por la póliza son excluyentes entre sí.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 7))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 7))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 2/9 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		// Pagina 3

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("4. Beneficiario", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"1.Para coberturas de desempleo involuntario, Incapacidad Temporal, Hospitalización, Hospitalización por Accidente, primer Diagnóstico de Enfermedades Graves e Invalidez Permanente Total por Accidente: El  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Contratante.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("2.Para las coberturas de Pensión Segura: El ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Asegurado.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("5. Vigencia: Por todo el plazo del crédito",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("1.Fecha de Inicio: Fecha de otorgamiento del préstamo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"2.	Fecha de Término: Fecha pactada como fin del cronograma del préstamo o de la fecha en que el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("cumpla la edad máxima de permanencia, lo que ocurra primero.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("6.	Prima (Tasa aplicada sobre el préstamo)",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Prima comercial: 0.984%", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Prima comercial más IGV (*) 1.161%", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Cargo por Comercialización: 0.573%", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("(*) Monto total pagado por el  ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("7.	Lugar y forma de pago de la prima",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("El pago de la prima se realizará en las oficinas del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Contratante ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk(" en la fecha de desembolso del Préstamo.", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("8. Descripción del interés asegurado",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Cubrir las cuotas pendientes de pago en caso de ocurrencia de un siniestro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("9. Descripción de las principales coberturas",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("9.1	Cobertura y causales de Desempleo Involuntario (Aplicable a trabajadores dependientes)",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"pagará al Beneficiario una indemnización hasta el monto máximo de la Suma Asegurada, de acuerdo a lo establecido en la presente Solicitud-Certificado de Seguro, en el evento que el  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"se vea afectado por una situación de Desempleo Involuntario y siempre y cuando cumpla con la Antigüedad Laboral establecida en la presente Solicitud-Certificado de Seguro.Las causales de Desempleo Involuntario cubiertas por esta Póliza se detallan a continuación, de acuerdo el sector o ley laboral aplicable al Trabajador Dependiente:",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"    9.1.1  Trabajadores del sector privado, regidos bajo la Ley de Productividad y Competitividad Laboral, Texto único Ordenado",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("             Decreto Legislativo 728.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"      a) Artículo N°30 - Actos de Hostilidad del empleador equiparables con despido no imputables al trabajador. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("      b) Artículo N°46 - Relacionado a las siguientes causales objetivas:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        •Caso fortuito o fuerza mayor.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        •Motivos económicos, tecnológicos, estructurales o análogos.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        •Disolución y liquidación de la empresa o quiebra.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        •Reestructuración patrimonial sujeta al D.L.845.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"      c) Mutuo disenso, siempre que exista una indemnización por los años de servicio y los montos indemnizatorios que la ley prevé  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("       en el caso de Desempleo Involuntario no atribuible al trabajador.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("    9.1.2	 Trabajadores de la Administración Pública bajo las leyes vigentes a la fecha.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"       a) Cese, por causales no atribuibles a la conducta ni capacidad de trabajo del empleado o funcionario público ni por término  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("       natural del plazo previsto del contrato de trabajo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"    9.1.3	 Trabajadores del Sector Educativo - Personal Docente, regulados por la Ley del Profesorado.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"       a)Suspensión absoluta o cese por causales no atribuibles a la conducta ni capacidad de trabajo del docente o personal",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("       administrativo regido bajo esta Ley.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("    9.1.4	 Miembros de las Fuerzas Armadas y Policiales",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"        a) Causal de retiro temporal o absoluto contemplada en sus respectivas Leyes Orgánicas, Estatutos y Reglamentos de ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"       Personal pero única y exclusivamente en la medida que la causal de cesantía invocada cumpla con los siguientes requisitos:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"         • Que el retiro o baja se deba a causa no imputable a la voluntad o a la conducta del miembro de las Fuerzas Armadas o ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"         • Que no implique para el integrante retirado o dado de baja el pago de una pensión o jubilación por dicho concepto.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   9.1.5	 Invitación al Retiro por renovación administrativa.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"           El pago de la indemnización se dará en la forma establecida en la presente Solicitud-Certificado de Seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("      Habrá lugar a una nueva aplicación de la cobertura de Desempleo Involuntario, si el",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase
				.add(new Phrase(new Chunk(" reincide en un estado de", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"         Desempleo Involuntario y siempre y cuando haya transcurrido el Periodo Activo Mínimo señalado en la presente ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"         Solicitud-Certificado de Seguro, que se computa desde el cese del último estado de Desempleo Involuntario.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"9.2  Cobertura por Incapacidad Temporal (Aplicable a trabajadores dependientes, independientes y jubilados)",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				" pagará al Beneficiario una indemnización hasta el monto máximo de la Suma Asegurada y en la forma de pago establecido en el numeral 3 de la presente Solicitud-Certificado de Seguro, en el evento que el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" se vea afectado por una situación de Incapacidad Temporal.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 8)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 8))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 3/9 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		// pagina 4

		datePhrase = new Phrase(
				new Chunk("Habrá lugar a una nueva aplicación de la cobertura de Incapacidad Temporal, si el ",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("  Asegurado  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"reincide en un estado de Incapacidad Temporal y siempre y cuando haya transcurrido el Periodo Activo Mínimo señalado en las Condiciones Particulares o Certificado de Seguro, que se computa desde el cese del último estado de Incapacidad Temporal y siempre que esta nueva Incapacidad Temporal sea por una causa distinta y no originada por la Enfermedad o Accidente que originó la Incapacidad Temporal ya indemnizada. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"9.3  Cobertura de hospitalización por accidente (Aplicable a trabajadores dependientes, independientes y jubilados)",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				" pagará una indemnización al Beneficiario por hospitalización debido a un accidente, hasta la Suma Asegurada establecida en el numeral 3 de la presente Solicitud-Certificado de Seguro.  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("9.4	 Cobertura de primer diagnóstico de enfermedades graves",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				" pagará al Beneficiario la Suma Asegurada señalada en el numeral 3 de la presente Solicitud-Certificado de Seguro, en caso se le diagnosticara por primera vez al ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Asegurado", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" alguna de las Enfermedades Graves que se detallan a continuación:",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("      9.4.1 ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(
				new Phrase(new Chunk("Cáncer", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"              El diagnóstico clínico debe ser fundamentado en la historia clínica y confirmado por un diagnóstico  histopatológico de  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"              biopsia que certifique positivamente la presencia de un cáncer. Será requisito la presentación de un informe  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"              histopatológico por escrito para la confirmación del  diagnóstico en todos los casos. Un diagnóstico de cáncer",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"              solamente será considerado como maligno después de un estudio de la arquitectura histopatológica  o patrón ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("              del tumor,tejito  o espécimen sospechoso.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("     9.4.2", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(
				new Chunk("Infarto al miocardio", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("			            El diagnóstico debe estar basado en las siguientes situaciones:",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"             -Un historial del típico dolor de pecho, indicativo de una enfermedad cardiaca isquémica.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("             -Cambios nuevos y relevantes en el electrocardiograma EGG.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("             -Aumento de las enzimas cardiacas por sobre los valores normales.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("             -Estudio radioscópico del músculo cardíaco.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("      9.4.3", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Accidente cerebro vascular",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"             El diagnóstico debe ser inequívoco y deberá registrar un déficit neurológico ya sea reversible o irreversible.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("      9.4.4", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Insuficiencia renal crónica",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"             El diagnóstico radica en una urografía excretoria, ecografía renal, dosaje de urea, creatinina",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("             y creatina, hemograma y de ser necesario un examen de resonancia magnética. ",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("      9.4.5", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Enfermedad a las coronarias que requiera cirugía",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"            Se refiere a la enfermedad que requiera de cirugía de dos o más arterias coronarias con el fin de corregir su  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"            estrechamiento, estenosis o bloqueo, por medio de una revascularización by-pass, realizada posteriormente a ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"            los síntomas de angina de pecho. Se excluye de esta definición, la angioplastía de globo, técnicas con láser ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("            u otras técnicas invasivas que no requieran cirugía.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("9.5	 Cobertura de invalidez permanente total por accidente",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				" pagará al Beneficiario una indemnización hasta el monto máximo de la Suma Asegurada, de acuerdo a lo establecido en el numeral 3 de la presente Solicitud-Certificado de Seguro, en el evento que el  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("  Asegurado  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk("se vea afectado por una situación de Invalidez permanente total por accidente. ",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("9.6   Cobertura de pensión segura",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(" pagará al ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("  Asegurado  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" una indemnización hasta el monto máximo de la Suma Asegurada, de acuerdo a lo establecido en el numeral 3 de la presente Solicitud-Certificado de Seguro, por el robo del dinero retirado de la ventanilla del Contratante y que se produzca dentro del periodo de tiempo cubierto especificado en el numeral 3 de la presente Solicitud-Certificado de Seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("10. Exclusiones ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"La compañía no cubre los siniestros relacionados con o a consecuencia directa o indirecta, parcial o totalmente:\n\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk("Para la cobertura de Desempleo Involuntario\n\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(
				new Chunk("Para Empleados del sector Privado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase
				.add(new Phrase(new Chunk("a) Causas justas de despido relacionadas con la capacidad del trabajador\n",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase
				.add(new Phrase(new Chunk("b) Causas justas de despido relacionadas con la conducta del trabajador.\n",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"c) Cuando el siniestro se produzca por alguna causal de cesantía distinta a las previstas en el numeral 9.1 de la presente Solicitud-Certificado.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"d) Accidente de trabajo para los trabajadores de empresas que realizan las actividades descritas en el Anexo 5 del\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Decreto Supremo N° 009-97 SA, Reglamento de la Ley de Modernización de la Seguridad Social en Salud y/o normas modificatorias o sustitutorias.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(
				new Chunk("e) Por vencimiento del plazo previsto en el Contrato de Trabajo Sujeto a Modalidad.\n",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("Para Empleados del sector Privado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("f) Por renuncia voluntaria.\n", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk("g) Por jubilación.\n\n", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"Para empleados vinculados laboralmente y bajo régimen de subordinación y dependencia a la Administración Pública, bajo las leyes vigentes:\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("a) Término de la relación del Empleo Público:\n ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("• Fallecimiento\n", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("• Renuncia\n", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));

		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 7))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 7))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 4/9 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		// PAGINA 05

		cell = new PdfPCell(new Phrase("• Jubilación", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("• Participación activa del Asegurado en actos delictivos,conmoción civil o terroristas.",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"b) Faltas de carácter disciplinarias.\nc) La condena penal privativa de la libertad por delito doloso cometido por un servidor público.\nd) Causas justificadas para el cese definitivo de un servidor público:\n•  Límite de 70 años de edad.\n•  Pérdida de la nacionalidad\n•  Incapacidad permanente física o mental.\n•  Ineficiencia o ineptitud comprobadas para el desempeño del cargo.\ne) Por término del plazo convenido en el contrato de trabajo.\n\nPara empleados del Sector Educativo - Personal Docente,regulados por la Ley del Profesorado\na) Cese por las siguientes causas:\n•  Renuncia.\n•  Abandono injustificado del cargo.\n•  Incapacidad física o mental debidamente comprobada.\n•  Límite de edad.\n• Aplicación de sanción disciplinaria.\n• Fallecimiento.\n• Voluntariamente por tiempo de servicios 25 años para mujeres y 30 para varones, incluyendo los estudios de formación profesional\n\nMiembros de las Fuerzas Armadas y Policiales.\na) Sanción disciplinaria.\nb) Fallecimiento.\nc) Solicitud del propio miembro de la Fuerzas Armadas o Policiales.\n\n ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(
				new Phrase(new Chunk("Para la cobertura de Incapacidad temporal y hospitalización por accidente\n\n",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				"• Enfermedades pre-existentes al inicio de la cobertura de este seguro, sus consecuencias y enfermedades relacionadas.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("• Accidentes ocurridos antes de la fecha de inicio de vigencia.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("• Enfermedades psíquicas o mentales.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("• Embarazo.\n", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"• La incapacidad temporal debida a la misma enfermedad o accidente por la cual el Asegurado ha recibido una indemnización por esta misma Póliza.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"• Intento de suicidio, autolesión, lesiones autoinferidas, ya sean en estado de cordura o demencia.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"• Uso, ingesta o adicción a las drogas, estupefacientes o narcóticos, fármacos o bebidas alcohólicas, así como también los accidentes ocurridos cuando el Asegurado se encuentra bajo la influencia del alcohol y/o drogas (sin importar su grado de presencia en la sangre) o en estado de sonambulismo.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"• Enfermedades, dolencias, accidentes o cualquier tratamiento a consecuencia o derivada de la práctica de deportes notoriamente peligrosos: Parapente, puenting, paracaidismo, Ala Delta, trecking, montañismo, bicicleta de montaña, Motocross, automovilismo, alpinismo, boxeo, equitación y similares\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"• Tratamiento médico realizado por personas no autorizadas para ejercer la medicina, o por médicos que no se encuentren habilitados en el Colegio Médico del Perú, así como en Instituciones Médicas o Clínicas que no cuenten con la licencia de funcionamiento y la autorización de las entidades competentes.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("• Tratamientos de medicina no convencional o aprobadas por la OMS.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"• Tratamiento o intervenciones quirúrgicas de carácter estéticos, con excepción de las que se produzcan a consecuencia de accidente ocurrido durante la vigencia de la Póliza.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("_______________________________________________________",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));

		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("• Guerra civil o internacional, declarada o no.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(
				new Phrase(new Chunk("• Radiación nuclear.\n\n", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("Para la cobertura de primer diagnóstico de enfermedades graves\n\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				"a) Intento de suicidio o autolesión, lesiones autoinferidas, ya sea en estado de cordura o demencia.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"b) Consumo frecuente de bebidas alcohólicas, adicción al alcohol, alcoholismo, así como el consumo de drogas,estupefacientes, barbitúricos, sustancias alucinógenas y otras análogas.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"c) Síndrome Inmunológico Deficiencia Adquirida (SIDA), así como todas las enfermedades causadas o relacionadas al virus VIH positivo, incluyendo la enfermedad de Sarcoma de Kaposi, Síndrome Complejo relativo al SIDA (SCRS),linfomas o cualquier neoplasia vinculada con el VIH, SCRS o SIDA\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("d) Respecto a la cobertura de Cáncer Primario, están excluidos:\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"• Los melanomas superficiales (SSM) cuyo índice de Breslow es inferior a 0,70 mm con un índice de Clark de nivel I.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("• Los tumores “vaso-celulares” de la piel.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"• Cualquier tumor denominado “in –situ” o no invasor (que no haya sobrepasado los límites de tejido original), salvo el cáncer de mama in-situ en su forma lobular, que está cubierto.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("• Los tumores malignos asociados al VIH.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"• Los tumores de la próstata excepto si grado de Gleason>6o que sea un nivel clínica T2N0M0\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("• Leucemia linfocitica crónica excepto si alcanzo el nivel A de la prueba de Bidet.\n",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("• El cáncer de piel, a excepción del melanoma maligno.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("e) Respecto de las enfermedades de las coronarias que requieran cirugía, están excluidos:\n",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("• La angioplastia de globo.\n", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk("• Técnicas con láser.\n", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("• Otras técnicas invasivas que no requieran cirugía.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"f) Detonación nuclear, reacción, radiación nuclear o contaminación radioactiva; independientemente de la forma en que se haya ocasionado; así como la emisión de radiaciones ionizantes o contaminación por radioactividad de cualquier combustible nuclear o de cualquier desperdicio proveniente de la combustión de dicho combustible.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"g) Enfermedades pre existentes que hayan sido conocidas o diagnosticadas con anterioridad a la fecha de inicio de la cobertura, o a la fecha de ingreso del Asegurado a la Póliza, así como el diagnóstico de enfermedades durante el Periodo de Carencia\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("h) Veneno, inhalación de gases o vapores venenosos.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"i) Intoxicación o encontrarse el Asegurado o en estado de ebriedad, o bajo los efectos de cualquier narcótico a menos que hubiese sido administrado por prescripción médica. Estos estados deberán ser calificados por la autoridad competente.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("j) Hernias y sus consecuencias.\n\n", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("Para la cobertura de invalidez permanente total por accidente\n\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				"a) Cualquier accidente de circulación vehicular no reportado a las autoridades competentes.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"b) Accidentes que se produzcan en la práctica profesional de cualquier deporte y la práctica no profesional de deportes de actividad de riesgo: carreras de automóvil, motocicletas,caminata de montaña, práctica de ciclismo, concursos o prácticas hípicas, equitación, rodeo, rugby, boxeo, esquí acuático, kayac, canotaje, prácticas de surf, paracaidismo, ala delta, parapente, puenting, caza, toreo, escalada, pesca submarina, deportes a caballo y artes marciales.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"c) Accidentes que se produzcan cuando el Asegurado se encuentre en estado de ebriedad o embriaguez y/o de consumo\n ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("_______________________________________________________",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));

		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 7))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 7))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 5/9 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"de drogas y/o estado de sonambulismo y siempre que dicho estado del Asegurado haya sido causa del accidente o haya contribuido en el accidente. Se considerará estado de embriaguez si el dosaje etílico practicado al Asegurado arroja 0.50 gr/lt o más al momento del accidente. Para los efectos de determinar el grado de intoxicación alcohólica del Asegurado al momento del accidente, las partes convienen en establecer que este se determinará por el examen etílico correspondiente y que el grado de metabolización del alcohol en la sangre es de 0.15 gr/lt por hora transcurrida desde el momento del accidente hasta el instante mismo en que se practique la prueba, conforme a la fórmula utilizada por la Policía Nacional del Perú.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"d) Radiaciones ionizantes o contaminación por radioactividad de cualquier combustible nuclear o de cualquier desperdicio proveniente de la combustión de dicho combustible.\n ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"e) Participación activa del Asegurado en actos delictivos, incluyendo participación en peleas, riñas, salvo aquellos casos en los que se ha determinado que medió defensa legítima del Asegurado.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"f) Las propiedades radioactivas, tóxicas, explosivas, o de cualquier conjunto nuclear o componente nuclear del mismo.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"g) Inhalación de gases, intoxicación o envenenamiento sistemático de cualquier naturaleza.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("h) Hernias y sus consecuencias.\n", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"i) Fenómenos de la naturaleza: terremotos, meteoritos, tsunami, maremotos, erupción volcánica, inundaciones, huaycos, avalanchas, deslizamientos, tornado, vendaval, huracán, ciclón, granizo y rayos.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"j) Cualquier enfermedad o lesión corporal o mental y las consecuencias de tratamientos médicos o quirúrgicos que no sean motivados por accidentes amparados por la póliza.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"k) Tratamientos o procedimientos médicos o cirugías con fines estéticos, cirugías plásticas o reconstructivas.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("l) Intento de suicidio y/o lesiones autoinflingidas.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("m) Lesiones preexistentes a la fecha de la celebración del Contrato de Seguros.\n",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("n) Cualquier procedimiento médico sometido de manera\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("_______________________________________________________\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));

		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				" voluntaria por el Asegurado y realizado por una persona no licenciada para el ejercicio médico y en la cual el Asegurado conoce o pudo conocer de las circunstancias de la situación irregular de la persona que practica el acto médico.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		// datePhrase.add(new Phrase(new
		// Chunk("l) Intento de suicidio y/o lesiones autoinflingidas.\n",
		// FontFactory.getFont(FontFactory.HELVETICA_BOLD,9))));
		// datePhrase.add(new Phrase(new
		// Chunk("m) Lesiones preexistentes a la fecha de la celebración del Contrato de
		// Seguros.\n",
		// FontFactory.getFont(FontFactory.HELVETICA_BOLD,9))));
		datePhrase
				.add(new Phrase(new Chunk("o) Accidente provocado dolosamente por el Contratante y/o Beneficiario.\n\n",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("Para la cobertura de Pensión Segura\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk("a) Robo de cualquier objeto distinto al dinero retirado por ventanilla.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"b) Cuando el robo se efectúe en circunstancias en que el Asegurado actúa de manera voluntaria con terceros y estos terceros resulten partícipes del robo.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"c) Exceder el número de eventos establecido en el numeral 3 del presente Certificado de Seguro.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"d) Los siniestros ocurridos fuera del periodo de tiempo establecido en el numeral 3 de la presente Solicitud - Certificado de Seguro.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"e) Cuando cualquier pariente del Asegurado, por consanguinidad o afinidad, hasta el cuarto grado en línea recta y colateral inclusive participen del siniestro como autores o cómplices.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"f) Cuando funcionarios, agentes, representantes, directores o empleados del Asegurado participen del robo como autores o cómplices.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("g) Cuando el robo sea a consecuencia de la negligencia del Asegurado.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"h) El robo producido durante y luego de la ocurrencia de un terremoto, meteorito, maremoto, erupción volcánica, tornado, vendaval, huracán o ciclón, granizo o inundación, radiaciones ionizantes o contaminación por radioactividad de cualquier combustible nuclear o de cualquier desperdicio proveniente de su combinación.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"i) El robo producido durante y a consecuencia de una guerra, guerra civil, rebelión, sedición o motín, tumulto popular, conmoción civil, vandalismo, guerrilla, terrorismo, huelga o lock out.\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("_______________________________________________________\n",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));

		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("11. Bases del contrato", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Resolución del contrato de seguro",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Antes del vencimiento del plazo estipulado en la póliza, tanto ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" como el  ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Contratante ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" podrán resolver el presente contrato de seguro, mediante comunicación escrita que cursará con no menos de treinta (30) días calendario de anticipación a su contraparte aquel que invoque la resolución.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Causales de nulidad del contrato de seguro",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("a)	Reticencia y/o declaración inexacta de circunstancias conocidas por el ",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Contratante ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" y/o ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				", que hubiesen impedido la celebración del contrato de seguro o modificado sus condiciones si",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" La Positiva   ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" hubiese sido informado del verdadero estado del riesgo, siempre que medie dolo o culpa inexcusable del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Contratante ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" y/o ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Asegurado. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(". En este supuesto, ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" La Positiva   ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" tendrá derecho a retener el integro de la prima del primer año de duración del contrato a título indemnizatorio.  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" La Positiva   ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" Positiva dispone de un plazo de 30 días para invocar la nulidad, plazo que debe computarse desde que conoce la reticencia o declaración inexacta.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("b)	Si hubo intención manifiesta del ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" o el ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Contratante ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk(" al momento de la contratación, de enriquecerse a costa del presente contrato de seguro.",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"c) Cuando no exista interés asegurable al tiempo del perfeccionamiento del contrato o al inicio de sus efectos.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"d)	Cuando al tiempo de la celebración del contrato se habría producido el siniestro o habría desaparecido la posibilidad que se produzca. En cualquiera de los casos previstos en presente numeral, el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"no gozará de cobertura bajo la presente póliza y en consecuencia, no podrá reclamar cualquier beneficio, cobertura, gasto y/o indemnización relacionada con la misma.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("•	Derecho de arrepentimiento", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Siempre que el marco regulatorio permita la comercialización del presente producto fuera de los locales comerciales de ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" La Positiva,  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk(" o de quienes se encuentren autorizados a operar como corredores de seguros, el ",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"podrá resolver el presente contrato de seguro, sin expresión de causa ni penalidad alguna, dentro de los quince (15) días calendario, contado desde que el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" recibe el presente Certificado de seguro. Este derecho se puede ejercer a través del canal de comercialización o en las oficinas donde se contrató. En caso el",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" ejerza su derecho de arrepentimiento luego de pagada la prima o parte de la misma, la empresa procederá a la devolución total de esta.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 7))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 7))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 6/9 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("•	Disposiciones Aplicables en el caso de oferta a través de comercializadores ",
						FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Siempre que el marco regulatorio permita la comercialización del presente producto a través de comercializadores, se aplican las siguientes disposiciones: ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•	La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase
				.add(new Phrase(new Chunk("es responsable frente al ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Contratante ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" y/o ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("Asegurado", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk(" de la cobertura contratada;", FontFactory.getFont(FontFactory.HELVETICA, 9))));

		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•	La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"es responsable de todos los errores u omisiones en que incurra el comercializador, sin perjuicio de las responsabilidades y obligaciones que le corresponden. En caso de bancaseguros se aplicará lo previsto en la Res. SBS Nº 8181-2012 y sus normas modificatorias.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"•	Las comunicaciones cursadas por los contratantes, asegurados o beneficiarios al comercializador sobre aspectos relacionados con el seguro contratado, tendrán los mismos efectos que si hubieran sido presentadas a ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("La Positiva.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"•	Los pagos efectuados por los contratantes del seguro o terceros encargados del pago, al comercializador, se consideran abonados a ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("La Positiva.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("•	Modificaciones de la Póliza", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("El ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Contratante ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" y/o  ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"tienen derecho de ser informados respecto de las modificaciones de las condiciones contractuales propuestas por las empresas, durante la vigencia del contrato. Sólo el contratante tiene derecho de aceptar o no dichas modificaciones.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"•	Los asegurados que cancelen su préstamos o amplíen los mismos, tendrán derecho a solicitar la prima no utilizada por lo meses no transcurridos.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"•	El Banco de la Nación, como Contratante podrá activar la póliza en los casos de siniestros.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"•	Los Asegurados que cancelen anticipadamente o amplíen sus préstamos tendrán derecho a mantener la cobertura por el periodo inicialmente pactado, en cuyo caso el beneficiario de todas las coberturas pasará a ser el mismo asegurado, sin perjuicio de su derecho de solicitar la cancelación del contrato de seguro y la devolución de la prima a prorrata por el periodo no utilizado.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("12.	Procedimiento para la Solicitud de Cobertura",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Ocurrido el siniestro, el ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" deberá dar aviso del mismo directamente a ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("o a través del ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Contratante ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("presentando los siguientes documentos:", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("12.1 Para la cobertura de desempleo involuntario ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("12.1.1.Trabajadores del sector privado, público y educación",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("a)	Formulario de declaración de siniestro proporcionado por  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("La Positiva.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("b)	Copia del DNI o documento de identidad del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Asegurado.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"c) Copia legalizada de la carta o resolución de cese emitida por la empresa o institución respectiva, o en su defecto constatación policial por despido de facto o hecho, o en defecto de las anteriores, el certificado que emita el Ministerio de Trabajo para dichos efectos.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("d)	Constancia y/o Certificado de Trabajo que acredite antigüedad laboral.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("e)	Declaración jurada del ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("declarando encontrarse en situación de desempleo, según formato proporcionado por ",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("La Positiva.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("12.1.2.	Miembros de las fuerzas armadas y policiales",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("a)	Formulario de declaración de siniestro proporcionado por  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("La Positiva.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("b) Copia del carnet de identidad de su institución.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" c)	Resolución de cese o documento expedido por el Ministerio de Defensa o Ministerio del Interior, según corresponda.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(" d)	Liquidación de beneficios por cese (o documento similar expedido por su institución).",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("e)	Declaración Jurada del ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("declarando encontrarse en situación de Desempleo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"12.1.3. En caso el Contratante, en su calidad de beneficiario, decidiese activar la póliza como consecuencia de un desempleo involuntario, los documentos arriba mencionados quedan limitados a:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" a) Resolución de cese de trabajadores emitido por la institución respectiva. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(" b) Estado de cuenta del préstamo en el Banco de la Nación del trabajador despedido.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("12.2.	Para la cobertura de incapacidad temporal",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Para el pago de la primera cuota deberá presentar:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("a)	Formulario de declaración de siniestro proporcionado por ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("La Positiva.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("b)	Copia del DNI o documento de identidad del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Asegurado.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"c) Constancia de ingresos del trabajador dependiente o independiente (copia de planilla de sueldos del último mes o certificado de 4ta o 3era categoría para independientes o recibo último de honorarios o factura por servicios prestados. Los jubilados deberán presentar constancia de boletas de pago).",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("d) Certificado médico que acredite la situación de Incapacidad Temporal que debe indicar:",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Causas de la incapacidad.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Diagnóstico definitivo.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("•	Tratamiento realizado y pronóstico.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Días de descanso.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Número de historia médica y clínica u hospital donde recibió la atención.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Médico tratante.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Fechas de atención.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Con la solicitud de la presente cobertura el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("autoriza a ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" a Solicitar la revisión de la Historia Clínica. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Para el pago de cada una de las siguientes cuotas deberá presentar:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("a)	Formulario de declaración de siniestro proporcionado por ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("La Positiva", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("b) Certificado médico que acredite la situación de Incapacidad Temporal que debe indicar:",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 7))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 7))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 7/9 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Causas de la incapacidad.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Diagnóstico definitivo", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("•	Tratamiento realizado y pronóstico.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Días de descanso.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Número de historia médica y clínica u hospital donde recibió la atención.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Médico tratante.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Fechas de atención.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("12.3.	Para la cobertura de hospitalización por accidente",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Para el pago de cada una de las cuotas deberá presentar",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("a)	Formulario de declaración de siniestro proporcionado por ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" La Positiva. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("b)	Copia del DNI o documento de identidad del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"c) Copia del comprobante de pago de la clínica u hospital donde recibió la atención médica por el accidente",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("d) Copia de la Epicrisis o historia de la hospitalización.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("e)  Informe médico en el que se detalle:", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  •Diagnóstico definitivo.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  •Tratamiento realizado.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  •Días de Hospitalización.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  •Número de historia médica y clínica u hospital donde recibió la atención.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  •Médico tratante.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  •Fecha de atención.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("12.4.	Para la cobertura de primer diagnóstico de enfermedades graves",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("El ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" deberá presentar:", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("a)	Formulario de declaración de siniestro proporcionado por ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" La Positiva.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("b)	Copia del Documento de Identidad del ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Asegurado.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"c)	Informe médico en el que se detalle el diagnóstico presuntivo, diagnóstico definitivo, fecha de inicio de la enfermedad, tratamientos, evolución, estado actual del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Asegurado.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("d)	Copia de todos los examenes y pruebas médicas del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Asegurado.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("relacionados con la enfermedad. ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"e) Adicionalmente a lo antes referido, para los siguientes casos deberá de considerarse lo siguiente: ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("    e.1) Infarto al miocardio", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("    -	Electrocardiograma positivo para infarto miocárdico.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("    -	Enzimas cardíacas positivas para infarto miocárdico.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"    -	Ecocardiograma, holter, cateterismo cardíaco, pruebas de perfusión miocárdica u otros (a solicitud de La Positiva). ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"    - Ecocardiograma, holter, cateterismo cardíaco, pruebas de perfusión miocárdica u otros (a solicitud de ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" ). ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("    e.2) Accidente cerebro vascular (ACV)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"      -Documento(s) que sustente(n) la hospitalización cuyo registro indique una apoplejía cerebral dentro de un plazo de 24 horas antes de dicha hospitalización. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("    e.3) Cáncer", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"      -Original del exámen histopatológico o Anátomo patológico original firmado y sellado por el médico patólogo y tratante.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("12.5.	Para la cobertura de invalidez permanente total por accidente:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(" El ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" deberá presentar:", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(" a) Formulario de declaración de siniestro proporcionado por ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" La Positiva.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(" b) Copia simple del documento de identidad del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" c) Original y/o copia certificada del dictamen de invalidez permanente total de la comisión médica evaluadora de incapacidades emitida por ESSALUD o la COMAFP (Comisión médica de AFP) o COMEC (Comisión Médica de SBS) o en su defecto por la Junta Médica de los hospitales nacionales bajo la gestión del MINSA o por el Instituto de Rehabilitación.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("d) Original y/o copia legalizada del Atestado Policial, de haberse realizado.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"e) Original y/o copia legalizada del resultado de examen toxicológico y dosaje etílico u otro examen que corresponda en su defecto.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("12.6.	Para la cobertura de pensión segura",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(" El ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" deberá presentar:", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(" a) Formulario de declaración de siniestro proporcionado por ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" La Positiva.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" b) Copia de la denuncia ante las autoridades policiales competentes dentro de las 4 horas posteriores al siniestro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" c) Documento emitido por la entidad del sistema financiero, en la que acredite la fecha, hora y monto del retiro de dinero.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("d)	Copia del documento de identidad del ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("e)	Declaración Jurada del ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado, ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("sobre las circunstancias del siniestro. ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Para todas las coberturas mencionadas La Positiva podrá solicitar todos los documentos adicionales que considere necesarios para la evaluación y liquidación del siniestro, dentro del plazo de los primeros veinte (20) días de completada toda la documentación exigida, siempre que los mismos guarden relación con el siniestro.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 7))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 7))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 8/9 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		// pagina 9

		cell = new PdfPCell(new Phrase(
				"En caso de siniestro en el extranjero, los documentos deberán estar legalizados por el consulado peruano del país donde ocurrió el siniestro y validado por el Ministerio de Relaciones Exteriores del Perú; o de ser el caso debidamente apostillados. En caso los documentos estén en idioma extranjero, deberán presentarse con traducción oficial y visado por el Ministerio de Relaciones Exteriores.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM | Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("13.	Información adicional", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Plazos para dar aviso del siniestro",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" -Para la cobertura de desempleo involuntario, incapacidad temporal, hospitalización por accidente e invalidez permanente total por accidente:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Dentro de los 90 días calendarios de ocurrido el siniestro y antes de vencido el plazo de prescripción legalmente establecido.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("-", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Para la cobertura de primer diagnóstico de enfermedades graves:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				"Dentro de un plazo no mayor a 365 días calendarios contados desde la fecha de conocido el primer diagnóstico de alguna de las enfermedades objeto de la cobertura",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * datePhrase = new Phrase(new
		 * Chunk("- Para la cobertura de primer diagnóstico de enfermedades graves:" ,
		 * FontFactory.getFont(FontFactory.HELVETICA,9))); datePhrase.add(new Phrase(new
		 * Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		 * datePhrase.add(new Phrase(new Chunk(
		 * "tiene 30 días para proceder a efectuar el pago correspondiente de acuerdo a las coberturas contratadas."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9,Font.UNDERLINE))));
		 * datePhrase.add(new Phrase(new Chunk(
		 * "salvo casos debidamente acreditados en los que medie caso fortuito o fuerza mayor."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.LEFT|Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		/*
		 * datePhrase = new Phrase(new Chunk("-	Para la cobertura de pensión segura :",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD,9,Font.UNDERLINE)));
		 * datePhrase.add(new Phrase(new Chunk(
		 * "Dentro del plazo de 90 días calendarios de ocurrido el siniestro. No obstante "
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * " Asegurado deberá realizar la denuncia ante las autoridades policiales respectivas dentro de las 4 horas de ocurrido el robo,"
		 * , FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)))); datePhrase.add(new
		 * Phrase(new Chunk(
		 * "salvo casos debidamente acreditados en los que medie caso fortuito o fuerza mayor."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 9)))); cell = new
		 * PdfPCell(datePhrase); cell.setBorder(Rectangle.LEFT|Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */
		datePhrase = new Phrase(new Chunk("-", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("Para la cobertura de pensión segura :",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		datePhrase.add(
				new Phrase(new Chunk("Dentro del plazo de 90 días calendarios de ocurrido el siniestro. No obstante ",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" Asegurado deberá realizar la denuncia ante las autoridades policiales respectivas dentro de las 4 horas de ocurrido el robo,",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("salvo casos debidamente acreditados en los que medie caso fortuito o fuerza mayor.",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("•	Plazos para el pago de siniestros",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Dentro de los treinta (30) días siguientes a la fecha de haber recibido la documentación e información completa exigida en la póliza y/o certificado de seguro para el proceso de liquidación del siniestro, ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"deberá pronunciarse sobre el consentimiento o rechazo del siniestro. Si la empresa no se pronunciara dentro del plazo de 30 días o se pronunciara a favor, el siniestro queda consentido. Una vez consentido",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"tiene 30 días para proceder a efectuar el pago correspondiente de acuerdo a las coberturas contratadas.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Las condiciones de la presente Solicitud-Certificado de Seguro prevalecen sobre las Condiciones Generales de la póliza de Seguro de Desempleo e Incapacidad No. 5713683 y publicadas en http://www.lapositiva.com.pe/bn/cuotaprotegida.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•	Todas las comunicaciones, incluyendo las solicitudes de cobertura cursadas por el",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("a el ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Contratante ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"por aspectos relacionados con el contrato de seguros o con las coberturas otorgadas, tienen el mismo efecto que si se hubieran dirigido a ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("La Positiva.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("• Todos los pagos realizados por el ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("a el ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Contratante", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk(" se consideran abonados a ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" La Positiva.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"•	Igualmente, podrá solicitar copia la presente Solicitud-Certificado de Seguro, previo pago del costo de emisión vigente al momento de solicitar dicha copia. El cliente es responsable de conservar el original de la presente Solicitud-Certificado de Seguro el cual podrá ser solicitado por ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" La Positiva  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("para cualquier trámite.", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"•	El Asegurado tiene derecho a solicitar copia de la póliza del seguro de grupo o colectivo de La Positiva, incluyendo las  condiciones generales, particulares, especiales y cláusulas adicionales que le sean aplicables, la que será entregada por La Positiva en un plazo de quince (15) días calendario contados desde la fecha de recepción de la solicitud.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•	Medios y plazo establecidos para el aviso del siniestro: ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"A través de Línea Positiva llamando al 211-0211 desde Lima o al 74-9000 desde provincias, dentro de los plazos indicados en este mismo numeral para cada cobertura.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•	Lugares autorizados por la empresa para solicitar la cobertura del seguro :",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk("En las oficinas de ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" Seguros a nivel nacional, cuyas direcciones se encuentran en nuestra página web: www.lapositiva.com.pe y/o en las oficinas del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("Contratante.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("•	Medios habilitados por la empresa para presentar reclamos: La Positiva ",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"recibirá los reclamos en su “Área de Servicio al Cliente” llamando al 211-0-211 desde Lima o al 74-9000 desde provincias, o en cualquiera de sus oficinas a nivel nacional (relación de direcciones en la web: www.lapositiva.com.pe), así como a través de la misma página web de ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"•	Instancias habilitadas para presentar reclamos y/o denuncias: El Asegurado también podrá realizar cualquier reclamo sobre los alcances de este seguro en la “Defensoría del Asegurado”, llamando al 421 0614 o visitándola en Calle Amador Merino Reyna N.° 307, Piso 9 – San Isidro, o a través de www.defaseg.com.pe, Superintendencia, INDECOPI, entre otros, según corresponda.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"•	El presente producto presenta obligaciones a cargo del usuario cuyo incumplimiento podría afectar el pago de la indemnización o prestaciones a las que se tendría derecho.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•	Dentro de la vigencia del contrato de seguro, el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" se encuentra obligado a informar a la empresa los hechos o circunstancias que agraven el riesgo asegurado.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("•	El ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" autoriza a", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"la remisión de toda la información vinculada a la póliza de seguro que ha adquirido, a la dirección electrónica consignada en este documento.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("14.	Beneficios adicionales", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Asistencia hogar ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Monto máximo   (En soles)", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Maximo de Eventos ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Envío y pago de cerrajero por emergencia. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" S/ 150 por evento", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Envío y pago de gasfitero por emergencia. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" S/ 150 por evento", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Envío y pago de electricista por emergencia. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" S/ 150 por evento", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("	4 eventos ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Envío y pago de vidriero por emergencia. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" S/ 150 por evento", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Referencia de técnicos en su localidad para mantenimientos en general.  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Sin limite ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Sin limite ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 1)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Asistencia médica ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Monto máximo (En soles)", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Maximo de Eventos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Orientación medica telefónica – 24 horas.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Sin límite.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Sin límite.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Traslado médico terrestre (ambulancia por accidente o enfermedad grave).",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 300.00 por evento.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2 eventos. ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Envío de médico general a domicilio por emergencia.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" CO-PAGO S/ 35.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Sin límite.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Control del niño sano.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Sin límite.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(" 1 evento / hijo (Máximo 2 hijos).", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Referencia de hospitales o clinicas de su localidad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Conexión.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Conexión ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Los beneficios adicionales son servicios prestados por la empresa American Assist Perú S.A. (AAP) con RUC No. 20506760721.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("La Positiva ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(
				new Phrase(new Chunk(" es responsable frente al  ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Contratante ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" y/o el ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" Asegurado ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("de la idoneidad del servicio prestado por la Compañía de Asistencia.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 7))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 7))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 9/9 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		return table;

	}

	// --------------------parte condiciones generales seguro de
	// cuota---------------------------------------------------
	public static PdfPTable creaPDFPolizaCondicionesGenerales() {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 30);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		// we add a cell with colspan 3
		Phrase datePhrase;

		cell = new PdfPCell(new Phrase("          CONDICIONES GENERALES ",
				FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("          ASISTENCIA CUOTA PROTEGIDA ",
				FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("1.	INTRODUCCIÓN ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("AMERICAN ASSIST PERU ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk("(AAP) con su programa ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(
				new Chunk(" “ASISTENCIA CUOTA PROTEGIDA” ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk(", le brinda Asistencia hogar y asistencia médica, ante cualquier eventualidad llamar al ",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" 6164502 (Lima) 0-800-00563 (Provincia)",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" las 24 horas del día, los 365 días del año. A los",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADOS ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" del ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase
				.add(new Phrase(new Chunk(" BANCO DE LA NACIÓN ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" con tan solo una llamada, AAP dispondrá de todos aquellos recursos necesarios para la inmediata atención de cualquier problema, sujetándose para ello a las condiciones particulares siguientes: ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2. GLOSARIO DE TÉRMINOS", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Siempre que se utilicen letras mayúsculas en las presentes condiciones generales, los términos definidos a continuación tendrán el significado que aquí se les atribuye: ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("A)  BANCO DE LA NACIÓN: BN", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("B) AMERICAN ASSIST PERU: AAP", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("C)	BENEFICIARIO: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(" Titular del Negocio.", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("D)	SERVICIO(S): ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"Los servicios de asistencia contemplados en las condiciones particulares a los que se refieren en el presente documento.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("E)	SITUACIÓN DE ASISTENCIA:", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(
				new Chunk(" Todo hecho o accidente ocurrido a un ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" en los términos, con las características y las limitaciones establecidas en el presente documento, que den derecho a la prestación de los servicios previstos en el mismo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("F)	PLAN DE ASISTENCIA: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(" Cobertura que otorga ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" a los ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADOS ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				", así como la forma en que tales prestaciones se otorgarán. Incluye copagos, exclusiones a la cobertura y otros.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("G)	EL TERCERO: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(
				new Chunk(": Proveedor de los servicios de ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk(" y a quien éste ha autorizado o solicitado la prestación de los mismos a favor del ",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADOS ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("H)	EL PERSONAL :", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				" Profesionales o personal auxiliar, técnico, administrativo y cualquier otro que realiza sus funciones o ejerce su profesión en las instalaciones de ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk(" o el Tercero, ya sea en relación de dependencia o bajo cualquier modalidad contractual con",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("I)	UNIDADES MÉDICAS DE EMERGENCIA: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(
				new Phrase(new Chunk(" Unidades móviles utilizadas para brindar asistencia médica o transporte al ",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk(", según su Plan de Asistencia.", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("J)	ACCIDENTE: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				" Todo acontecimiento extraordinario, imprevisible, irresistible y violento que provoque, de manera evidente daños materiales a un",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"durante la vigencia del presente documento, considerado dentro de las 24 primeras horas de ocurrida la emergencia.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("K)	NUEVOS SOLES: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk("La moneda en curso legal en la República del Perú.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("L)	PAÍS DE RESIDENCIA: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk("La República del Perú.", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("M)	REPRESENTANTE: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk("Cualquier persona, sea o no acompañante del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("que realice alguna gestión para la prestación de los servicios.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("N)	TERRITORIALIDAD: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(
				new Chunk("El presente servicio se prestará a en la ciudad de Lima según la siguiente relación:",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Lima Metropolitana y Callao:", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Por el Norte: Hasta la Variante de Ancón. ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Por el Sur: Hasta Villa el Salvador", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Por el Este: Hasta Chosica. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Por el Oeste: Hasta la Punta.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Así como en las ciudades del Perú donde BANCO DE LA NACIÓN tenga presencia.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("O)	EMERGENCIA: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"se denomina emergencia a toda situación o afección que por presentarse en forma súbita, brusca o accidental o como complicación de una afección preexistente previamente controlada, que comprometa seriamente la vida o el normal funcionamiento de cualquier órgano o sistema del cuerpo de una persona si no recibe atención inmediata. El servicio contará con la asistencia médica necesaria durante el traslado.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("P)	URGENCIA: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"Padecimiento o afección menor que no pone en riesgo inminente la vida o el normal funcionamiento de cualquier órgano o sistema del cuerpo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("3.  SERVICIOS DE ASISTENCIA EN EL HOGAR",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Este servicio consiste en la ayuda material inmediata con el fin de limitar y controlar los daños materiales, presentados en la vivienda del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("AFILIADO", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				", a consecuencia de un evento fortuito, de acuerdo con los términos y condiciones consignadas a continuación:",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"  Se considera en este acápite a una situación accidental y fortuita que deteriore el inmueble o parte del mismo (fuga de agua), que no permita su utilización cotidiana (un corto circuito), que ponga en riesgo la seguridad del mismo y sus habitantes (una cerradura exterior inservible, un cristal exterior roto), o haga inhabitable la vivienda a consecuencia de un evento. “Queda establecido que los Servicios de Asistencia en el hogar solamente serán brindados en la República del Perú” y por un monto de S/150 soles por eventos y 4 Eventos al año en total, de los cuales podrán ser cualquiera de los siguientes:",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("3.1	SERVICIO DE CERRAJERÍA:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Cuando a consecuencia de cualquier hecho accidental, como pérdida, extravío o robo de las llaves, inutilización de la cerradura por intento de hurto u otra causa que impida la apertura del inmueble vivienda y que ponga en riesgo la seguridad del mismo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("AA PERU ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk("a solicitud del ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"enviará a la mayor brevedad posible un técnico especializado que realizará la asistencia de emergencia necesaria para restablecer el acceso al inmueble y el correcto cierre de la puerta del mismo.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("3.2	SERVIVIO DE GASFITERÍA:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Cuando a consecuencia de una avería súbita e imprevista en las instalaciones fijas de abastecimiento y/o sanitarias ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 8)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 8))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 1/4 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("inmueble del ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" se presente alguna rotura, fuga de agua o avería que imposibilite el suministro o evacuación de agua, ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AA PERU ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"enviará un técnico especializado, que realizará la asistencia de emergencia necesaria para restablecer el servicio, siempre y cuando el estado de las redes lo permitan.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("3.3	 SERVICIO DE ELECTRICIDAD:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Cuando a consecuencia de una avería súbita e imprevista en las instalaciones eléctricas propias en el interior del inmueble del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"(casa, departamento de uso habitacional), se produzca una falta de energía eléctrica en forma total o parcial (cortocircuito), ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AA PERU ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"enviará a un técnico especializado que realizará lo necesario para restablecer el suministro de energía eléctrica, siempre y cuando el estado de las redes lo permitan. Además, reparación o cambio de tableros eléctricos, llaves de cuchillas, interruptores, o fusibles dañados por corto circuito o sobrecarga, únicamente en áreas que pertenezcan a la instalación eléctrica del inmueble domicilio del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("3.4	 SERVICIO DE VIDRIERÍA:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Cuando a consecuencia de un hecho súbito (de repente) e imprevisto se produzca la rotura de alguno de los vidrios o puertas de las ventanas que formen parte de las fachadas exteriores del inmueble de",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"que dé a la calle y que pongan en riesgo la seguridad del mismo, sus ocupantes, o de terceros",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AA PERU ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"enviará a la mayor brevedad posible un técnico que realizará la asistencia de emergencia, siempre y cuando las condiciones por motivos de la hora y del día lo permitan",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(" 4.  SERVICIOS DE ASISTENCIA MÉDICA", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" 4.1  CONSULTA MÉDICA TELEFÓNICA:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk(" Si durante la vigencia del Programa, el ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" requiere de una Consulta Médica Telefónica ante cualquier molestia que sufriera (situaciones que no sean Emergencia),",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"gestionará y coordinará el enlace telefónico con un médico especialista en medicina general para poder absolver la consulta requerida. El monto máximo por cobertura y el número de ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase
				.add(new Phrase(new Chunk("EVENTOS SIN LÍMITES.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" 4.2	 TRASLADO MÉDICO TERRESTRE (AMBULANCIA):",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("En caso de que el ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" sufra una enfermedad grave o accidente automovilístico que le provoque lesiones o traumatismos tales que requieran su hospitalización, ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AA PERU ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"gestionará y cubrirá el costo del traslado en ambulancia terrestre, siempre y cuando exista la infraestructura privada que lo permita. En caso de no existirla, ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AA PERU ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"coordinará el traslado por medio de los servicios médicos públicos en la localidad con un límite máximo de: ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(" S/300.00 POR EVENTO Y 2 EVENTOS POR AÑO POR ACCIDENTE Y/O POR ENFERMEDAD GRAVE). ",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("4.3	 ENVIO Y COORDINACIÓN DE MÉDICO GENERAL A DOMICILIO POR EMERGENCIA:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("En caso de que el ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" requiera de un médico para que lo revise en su negocio",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AA PERU ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"coordinará el envío de un médico especialista en medicina general para que evalúe al paciente y le realice un diagnóstico.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CO- PAGO DE S/ 35.00 SOLES Y SIN LIMITE DE EVENTOS AL AÑO.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("4.4	 CONTROL DEL NIÑO SANO",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				" enviará un pediatra o un médico en medicina general para evaluar y controlar al niño, sin que esté presente ningún tipo de dolencia, solo es un control el cual se hará sin límite de costo y máximo 2 hijos al año, en caso de requerir un evento más este se realizará con un co- pago de S/ 35.00 soles.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(" 5.	REFERENCIA DE MEDICOS ESPECIALISTAS, CLINICAS Y HOSPITALES (A NIVEL NACIONAL)",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(" Cuando el ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" necesite ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("ASISTENCIA MÉDICA ESPECIALISTAS, CLÍNICAS Y HOSPITALES ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk("en Lima o a nivel nacional, ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" LA EMPRESA ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"le proporcionará información de médicos especialistas como odontólogos, cardiólogos, pediatras, ginecólogos, dermatólogos, etc. Queda entendido que no se emitirá diagnóstico, pero a solicitud del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"y a cargo del mismo se pondrán los medios necesarios para la obtención de un diagnóstico, ya sea organizando una visita personal de un médico, concertando una cita con un médico, o en un centro hospitalario. En cualquier caso, los honorarios del médico que atienda al ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk("y cualesquiera otros gastos médicos en que se incurra, serán pagados por el ",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("con sus propios recursos y bajo su propio riesgo de las consecuencias que se deriven.",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("En las demás localidades del Perú, ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" LA EMPRESA ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk(" hará lo posible por ayudar al ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk("a contactar un médico o centro médico con la mayor celeridad. En este caso, el",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" también deberá pagar con sus propios recursos los honorarios médicos y los gastos en que incurra al recibir asistencia médica.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("LA EMPRESA ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"no asumirá responsabilidad alguna en relación con la atención prestada o falta de la misma por parte de los médicos o centros médicos contactados. El servicio aquí establecido se brindará ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(
				new Phrase(new Chunk(" SIN LÍMITE DE EVENTOS.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("6. EXCLUSIONES GENERALES A LOS SERVICIOS",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"No será objeto de cualquiera de los servicios, las situaciones de asistencia que se hayan generado por las siguientes causas:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"A)	El servicio se limita a la solución del problema y/o la reparación del daño y/o a la avería de manera temporal. En la medida que la misma avería lo permita será definitiva.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"B)	Los servicios prestados serán realizados únicamente en la territorialidad establecida en el presente documento.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("C)  La mala fe del ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk(" comprobada por el personal de ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 8)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 8))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 2/4 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"D)  Hechos y/o daños derivados de fenómenos de la naturaleza de carácter extraordinario tales como lluvia, huaycos, inundaciones, terremoto, erupciones volcánicas, tempestades ciclónicas, derrumbes, caídas de cuerpos extraños y cualquier otro evento de la naturaleza. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"E)  Hechos y/o daños del hombre derivados de terrorismo, huelga, motín, conmoción civil, daño malicioso, vandalismo, alboroto o tumulto; robo, hurto o cualquier otro delito contra el patrimonio.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("F) Hechos o actuaciones de las Fuerzas Armadas, fuerzas del orden o cuerpos de seguridad.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"G) En los casos en que no exista la infraestructura pública o privada en el lugar correspondiente para poder prestar los servicios o se presenten causas de fuerza mayor o caso fortuito que no permitan las condiciones adecuadas para la prestación de los servicios dentro de los límites de tiempo que dichas condiciones lo permitan.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("H)   Cuando por orden de autoridad competente se impida la ejecución de los servicios.",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("I)	Los derivados de la energía nuclear radioactiva.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"J)	Cualquier falla o daño pre-existente en los componentes e instalaciones en el Negocio del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				".Para tal efecto, se considera falla pre-existente, la que ya exista y sea demostrable antes de la fecha de inicio de vigencia del Servicio.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"K)	Cuando por cualquier orden de desherraje, allanamiento, cateo, aseguramiento, registros, fiscalización, medida cautelar y/o de rescate emanada de autoridad competente con, se fuerce o destruya cualquier elemento de acceso como puertas, ventanas, cerraduras en el Negocio de ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"L)    Recubrimientos de acabados de pisos, paredes techos como enchapes, azulejos, mosaicos, mármol, granito, tapiz, alfombra, pintura, madera, drywall, yeso, cielo raso, papel de colgadura, materiales de barro, entre otros.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("M)	Cuando el ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk("oculte información o no proporcione información veraz y oportuna al personal de ",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase
				.add(new Phrase(new Chunk("designado que por su naturaleza no permita atender debidamente el servicio.",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("N)  Los servicios o gastos contratados o incurridos directamente por el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				", sin haber sido previamente autorizados por AAP. Esta exclusión está dispensada, en caso el",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" demuestre fehacientemente que, por situación de fuerza mayor, no era posible comunicarse con",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" En estos casos el reembolso correspondiente no podrá exceder en ningún caso la suma de condiciones pactadas en las condiciones particulares.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"O)	 Enfermedades o lesiones derivadas de padecimientos crónicos, enfermedades pre-existentes y de las diagnosticadas con anterioridad a la iniciación del viaje, siempre y cuando el viaje no sea mayor a 60 (Sesenta) días.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"P)	 La ingestión de drogas, sustancias tóxicas, narcóticos o medicamentos sin prescripción médica.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Q)	Enfermedades mentales.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("R)	La adquisición y uso de prótesis o anteojos.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S)	El embarazo.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("T)	Prácticas deportivas en competencia.", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"LÍMITES, RESTRICCIONES Y EXCLUSIONES PARTICULARES A LOS SERVICIOS DE CERRAJERÍA, GASFITERÍA, DE ELÉCTRICIDAD Y DE VIDRIERIA:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" Exclusiones al servicio de Cerrajería:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" Quedan excluidas de la presente cobertura la reparación y/o reposición de cerraduras y/o puertas de acceso a los ambientes internos del inmueble a través de puertas interiores, así como también la apertura, cambio, reposición, o reparación de cerraduras de guardarropas, alacenas y/o similares. Además, se encuentra excluido el cambio de las cerraduras de puertas exteriores de acceso al inmueble.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Exclusiones al servicio de Gasfitería:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Quedan excluidas de la presente cobertura la reparación y/o reposición de averías propias de mezcladoras, cisternas, depósitos, calentadores junto con sus acoples, tanques hidroneumáticos, bombas hidráulicas, radiadores, aparatos de aire acondicionado, lavadoras, secadoras, y cualquier aparato doméstico conectado a las tuberías de agua, y en general de cualquier elemento ajeno a las conducciones de agua propias del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" DOMICILIO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				", así como el arreglo de canales, cañerías y bajantes, limpieza general de trampas de grasa, reparación de goteras debido a una mala impermeabilización o protección de la cubierta o paredes exteriores del inmueble, limpieza general de pozos sépticos.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Asimismo, quedan excluidas cualquier tipo de reparaciones de averías que se deriven de humedad o filtraciones o que deba ser efectuada en aérea comunes o en instalaciones de propiedad de las empresas que provea el Servicio Público de Agua Potable y Alcantarillado en el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" DOMICILIO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" del ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Exclusiones al servicio de Electricidad",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Quedan excluidas de la presente cobertura la reparación y/o reposición de averías propias de:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"a)	Enchufes o interruptores, elementos de iluminación tales como lámparas, bombillos o fluorescentes, balastros.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"b)	Electrodomésticos tales como: televisores, hornos, calentadores de agua, lavadora, secadoras, refrigeradoras y en general cualquier aparato que funcione por suministro eléctrico.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"c)	Cualquier tipo de reparación en áreas comunes o en instalaciones propiedad de las Empresas de distribución y/o suministra eléctrica que provea el servicio de energía eléctrica en el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" DOMICILIO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" del ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Exclusiones del servicio de Vidriería:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Quedan excluidas de la presente cobertura cualquier reparación y/o reposición de cualquier clase de espejos y cualquier tipo de vidrios que, a pesar de ser parte de la edificación, no formen parte de cualquier fachada exterior de la vivienda. Asimismo, quedan excluidas las roturas de vidrios por causa de  fenómenos naturales",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"No obstante las exclusiones detalladas en los servicios de cerrajería, gasfitería, de electricidad y de vidriería sí comprenden los trabajos de albañilería indicados a continuación, siempre y cuando tengan como única finalidad la de facilitar la ejecución de los servicios de cerrajería, gasfitería, de electricidad y/o de vidrieria:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"a)	Demoliciones, aperturas de zanjas para descubrir tuberías de agua, drenajes o electricidad;",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("b)	Relleno de zanjas en cemento, para  paredes, pisos y placas;",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 7))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 7))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 3/4 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"c)	Desmantelamiento y/o colocación de muebles de baño, lavaderos y lavaplatos, cuando se presente un cambio de emergencia por fractura o desprendimiento por accidente.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("En caso sea necesario efectuar dichos trabajos de albañilería, ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("AA PERU ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" no se encontrará obligada a colocar, reponer y/o restituir los pisos, diseños y/o acabados que se encontraban al momento de producirse la ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" EMERGENCIA.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("7.	PROCEDIMIENTO EN CASO DE SERVICIOS DE ASISTENCIA",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("A efectos de solicitar alguno de los servicios contemplados en el presente documento, el ",
						FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("deberá proceder de la siguiente forma:  ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("a)	Comunicarse con ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AA PERU ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("al número de emergencias que es 6164502 (Lima) 0-800-00563 (Provincia)",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("b)	Suministrarle al funcionario de ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("que atienda la llamada respectiva, todos los datos necesarios para identificarlo como ",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				", así como los demás datos que sean necesarios con el fin de poder prestar el servicio solicitado, tales como la ubicación exacta del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("; un número telefónico en el cual localizarlo; descripción por el  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" del problema que sufre, el tipo de ayuda que precise; y, de ser el caso, el número de placa del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" VEHÍCULO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("en relación con el cual se solicite un servicio.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("c)	Una vez cumplidos todos los requisitos indicados anteriormente, ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AA PERU ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" le prestará al ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"los servicios solicitados a los cuales tenga derecho de conformidad con los términos, condiciones y limitaciones del presente documento. La atención de la solicitud de los servicios son de manera inmediata.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("d) En cualquier caso, el personal de ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" prestará los servicios contemplados en este contrato únicamente a las personas que figuren como ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("dentro de la base de datos del programa de ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(
				new Chunk("“ ASISTENCIA CUOTA PROTEGIDA ” ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" administrada por ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("AAP. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" De este modo, ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("AAP. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("asume la responsabilidad de mantener totalmente actualizada la lista de AFILIADOS activos.",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));

		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("e)	En caso de que el ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"no cumpla adecuadamente con los requisitos indicados anteriormente, AAP no asumirá responsabilidad ni gasto alguno relacionado con la no prestación de los servicios a que se refiere el presente contrato.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("f)	En los casos de absoluta y comprobada urgencia del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"para cumplir con el procedimiento anteriormente señalado, de manera excepcional y únicamente en relación con el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" SERVICIO DE TRASLADO MÉDICO TERRESTRE",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(", el ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase
				.add(new Phrase(new Chunk(" podrá acudir directamente ante terceros a solicitar el indicado servicio.",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("g)	En tal caso, ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" restituirá al ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" los gastos incurridos hasta por un límite de USD $150 por evento y hasta 2 (DOS) eventos por año. A efectos de que el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" tenga derecho al reembolso mencionado, deberá cumplir con el procedimiento establecido en los párrafos anteriores dentro de un plazo máximo de veinticuatro horas (24) contadas a partir del momento en que se haya concretado el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" SERVICIO DE TRASLADO MÉDICO TERRESTRE.",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("En caso de que el ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("no cumpla adecuadamente con los requisitos indicados anteriormente, ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"no asumirá responsabilidad ni gasto alguno relacionado con la no prestación de los servicios a que se refiere el presente contrato.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("8.	GARANTÍA SOBRE EL SERVICIO DE ASISTENCIA EJECUTADO",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Los Servicios realizados bajo los alcances del presente contrato, tienen garantía durante dos meses, siempre que éstos hayan sido suministrados por ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AAP.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("9.	PERSONAL ESPECIALIZADO", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"El personal que presta dichos Servicios de Asistencia está altamente especializado tanto profesional como psicológicamente, para hacer frente a cualquier clase de eventualidad que puede surgir al ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("AFILIADO.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("10.	CONTROL DE CALIDAD DEL SERVICIO", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("La actividad que realiza ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" en el área de control de calidad y evaluación de los servicios es fundamental para conocer los niveles de eficiencia y satisfacción de sus clientes. Por ello, 24 horas después de haber prestado los servicios, ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(" se pondrá en contacto directo con cada uno de los ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADOS ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" atendidos, para así poder evaluar el grado de satisfacción de éstos con relación a la prestación de los Servicios.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("11.	CANCELACIONES, CONSULTAS, QUEJAS Y RECLAMOS",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(" Si el ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"requiera realizar la cancelación del servicio de asistencia, consultas, presentar una queja y/o reclamo, podrá hacerlo a través de una llamada telefónica a los números telefónicos 6164502 (Lima) 0-800-00563 (Provincia), quien canalizará la atención a ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"en el horario de lunes a viernes de 9:00 am a 6:00 pm o en su defecto enviar un correo electrónico al buzón atencionalcliente@americanassist.com.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(" Asimismo, ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AAP  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				" tendrá plena facultad de cancelar y/o desafiliar del servicio de Asistencia a determinados clientes por razones debidamente justificadas, para lo cual bastará comunicar por escrito al ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("  AFILIADO  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(
				new Chunk("con 15 días calendarios de anticipación.", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("12.	SUBROGACIÓN", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Se deja expresamente establecido que, de conformidad con lo previsto en el artículo 1219 del Código Civil,  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("se encuentra facultada a subrogarse en el lugar del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"para efectuar el cobro de las indemnizaciones y/o otra clase de reparaciones que le correspondan a éste último, hasta por el límite del costo de los Servicios prestados por ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk("al ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AFILIADO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("13.	PRESTACIÓN DE LOS SERVICIOS", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("Queda entendido que ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk(" AAP  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(
				new Phrase(new Chunk(" podrá prestar los Servicios en forma directa o mediante terceros con quienes ",
						FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(" AAP ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"contrate, bajo su responsabilidad, de acuerdo con lo establecido en el artículo 1766 del Código Civil.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La Positiva Seguros y Reaseguros",
				FontFactory.getFont(FontFactory.HELVETICA, 7, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú RUC:20100210909 Telf:(51-1) 211-0000 ",
				FontFactory.getFont(FontFactory.HELVETICA, 7)));
		datePhrase.add(new Phrase(new Chunk("www.", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8))));
		datePhrase.add(new Phrase(new Chunk("lapositiva.com.pe", FontFactory.getFont(FontFactory.HELVETICA, 8))));
		cell = new PdfPCell(datePhrase);
		// cell = new PdfPCell(new
		// Phrase("Av. Javier Prado Este y Fco. Masias N°370, San Isidro,Lima- Perú
		// RUC:20100210909 Telf:(51-1) 211-0000 www.lapositiva.com.pe",
		// FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CLIENTE 4/4 ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase(" ",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		return table;

	}

	public java.lang.String getServiceSimmAdress() {

		ParamSimm paramSimm = BnContextParametro.getParamServiceSimm();
		String urlSimm = paramSimm.getParamSimmUrl();
		// System.out.println("urlSimm:"+urlSimm);
		return urlSimm;
	}

	public java.lang.String getServiceGuardarTarjetaAdress() {

		ParamSimm paramSimm = BnContextParametro.getParamServiceSimm();
		String guardarTarjeta = paramSimm.getParamGuardarTarjeta();
		// System.out.println("guardarTarjeta: "+guardarTarjeta);
		return guardarTarjeta;
	}

	public java.lang.String getServiceConsultaTarjetadress() {

		ParamSimm paramSimm = BnContextParametro.getParamServiceSimm();
		String consultaTarjeta = paramSimm.getParamConsultaTarjerta();
		// System.out.println("consultaTarjeta:"+consultaTarjeta);
		return consultaTarjeta;
	}

	@RequestMapping(value = "exPoliza", method = RequestMethod.POST)
	public void exPoliza(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String path = "";

		// System.out.println("eors_individual");
		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String valor1 = request.getParameter("numero");
		String envio = request.getParameter("enviar");
		String es_platinum = " ";

		BufferedOutputStream bos = null;
		RequestMensajeHost host = new RequestMensajeHost();

		BnPoliza solicitud = null;
		String tipo1 = valor1.substring(0, 4);
		String tipo = "";
		if (tipo1.equalsIgnoreCase("5450")) {
			tipo = "1";
		}
		if (tipo1.equalsIgnoreCase("5227")) {
			tipo = "2";
		}

		if (tipo1.equalsIgnoreCase("5216")) {
			tipo = "3";
		}

		String num = valor1.substring(4);
		solicitud = host.getPoliza(tipo, num, "pjmo");
		request.setAttribute("creditos", solicitud);

		try {
			String archivo = "Poliza de Seguro";
			Map parameters = new HashMap();
			parameters.put("Cuenta1", valor1);

			JasperReport jasperReport = null;
			String type = "pdf";

			Collection<?> list;
			String exportFile = "prueba";

			type = (type == null) ? "html" : type;

			String totpagina = "2";
			Integer tot_adicionales = 0;

			if (type.equals("pdf")) {

				Document document = new Document();

				ByteArrayOutputStream baos = new ByteArrayOutputStream();

				bos = new BufferedOutputStream(baos);
				try {

					PdfWriter.getInstance(document, baos);
				} catch (DocumentException e) {

				}
				document.open();

				try {

					ConsultaImagen daoPoliza1_1 = null;
					byte[] imageBytePoliza1_1 = null;

					daoPoliza1_1 = new ConsultaImagen();
					String solicituParte1_1 = "0030";
					imageBytePoliza1_1 = daoPoliza1_1.consultarPolizaParte1(solicituParte1_1);
					Image polizaParte1 = Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza1_1));

					polizaParte1.setBorder(Image.BOX);
					polizaParte1.setBorderWidth(5);
					polizaParte1.setBorderColor(BaseColor.WHITE);
					polizaParte1.scaleToFit(550, 300);

					document.add(imagePoliza1(polizaParte1));

					document.add(creaPDFPolizaTarjeta((solicitud.getREFEREN()).trim(), solicitud.getTLFCASA(),
							solicitud.getFCH_SOLICITA(), solicitud.getNPOLIZA(), solicitud.getSDESGRAVA(),
							solicitud.getCOD_AGE(), solicitud.getCODCTR_EVA(), solicitud.getNOMBRTIT(),
							solicitud.getAPELLTIT(), solicitud.getNUMDOC(), solicitud.getFCH_NAC(), solicitud.getSEXO(),
							solicitud.getMAIL(), solicitud.getESTCV(), solicitud.getTLFCELL(),
							solicitud.getCODVIA_ENT(), solicitud.getNOMVIA_ENT(), solicitud.getNUMVIA(),
							solicitud.getUBG_CLI_DEP(), solicitud.getUBG_CLI_DIS(), solicitud.getUBG_CLI_PRO()));

					ConsultaImagen daoCondiciones12 = null;
					byte[] imageBytePoliza12 = null;

					daoCondiciones12 = new ConsultaImagen();
					String condiciones12 = "0031";
					imageBytePoliza12 = daoCondiciones12.consultarPolizaParte2(condiciones12);
					Image poliza1_2 = Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza12));

					poliza1_2.setBorder(Image.BOX);
					poliza1_2.setBorderWidth(5);
					poliza1_2.setBorderColor(BaseColor.WHITE);
					poliza1_2.scaleToFit(550, 200);

					document.add(poliza1_2);

					ConsultaImagen daoCondiciones2 = null;
					byte[] imageBytePoliza2 = null;

					daoCondiciones2 = new ConsultaImagen();
					String condiciones2 = "0032";
					imageBytePoliza2 = daoCondiciones2.consultarPolizaParte2(condiciones2);
					Image poliza2 = Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza2));

					poliza2.setBorder(Image.BOX);
					poliza2.setBorderWidth(5);
					poliza2.setBorderColor(BaseColor.WHITE);
					poliza2.scaleToFit(550, 800);

					document.add(poliza2);

					ConsultaImagen daoCondiciones3 = null;
					byte[] imageBytePoliza3 = null;

					daoCondiciones3 = new ConsultaImagen();
					String condiciones3 = "0033";
					imageBytePoliza3 = daoCondiciones3.consultarPolizaParte2(condiciones3);
					Image poliza3 = Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza3));

					poliza3.setBorder(Image.BOX);
					poliza3.setBorderWidth(5);
					poliza3.setBorderColor(BaseColor.WHITE);
					poliza3.scaleToFit(550, 800);

					document.add(poliza3);

					ConsultaImagen daoCondiciones4 = null;
					byte[] imageBytePoliza4 = null;

					daoCondiciones4 = new ConsultaImagen();
					String condiciones4 = "0034";
					imageBytePoliza4 = daoCondiciones4.consultarPolizaParte2(condiciones4);
					Image poliza4 = Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza4));

					poliza4.setBorder(Image.BOX);
					poliza4.setBorderWidth(5);
					poliza4.setBorderColor(BaseColor.WHITE);
					poliza4.scaleToFit(550, 800);

					document.add(poliza4);

					ConsultaImagen daoCondiciones5 = null;
					byte[] imageBytePoliza5 = null;

					daoCondiciones5 = new ConsultaImagen();
					String condiciones5 = "0035";
					imageBytePoliza5 = daoCondiciones5.consultarPolizaParte2(condiciones5);
					Image poliza5 = Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza5));

					poliza5.setBorder(Image.BOX);
					poliza5.setBorderWidth(5);
					poliza5.setBorderColor(BaseColor.WHITE);
					poliza5.scaleToFit(550, 800);

					document.add(poliza5);

					ConsultaImagen daoCondiciones6 = null;
					byte[] imageBytePoliza6 = null;

					daoCondiciones6 = new ConsultaImagen();
					String condiciones6 = "0036";
					imageBytePoliza6 = daoCondiciones6.consultarPolizaParte2(condiciones6);
					Image poliza6 = Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza6));

					poliza6.setBorder(Image.BOX);
					poliza6.setBorderWidth(5);
					poliza6.setBorderColor(BaseColor.WHITE);
					poliza6.scaleToFit(550, 800);

					document.add(poliza6);

					ConsultaImagen daoCondiciones7 = null;
					byte[] imageBytePoliza7 = null;

					daoCondiciones7 = new ConsultaImagen();
					String condiciones7 = "0037";
					imageBytePoliza7 = daoCondiciones7.consultarPolizaParte2(condiciones7);
					Image poliza7 = Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza7));

					poliza7.setBorder(Image.BOX);
					poliza7.setBorderWidth(5);
					poliza7.setBorderColor(BaseColor.WHITE);
					poliza7.scaleToFit(550, 800);

					document.add(poliza7);

					ConsultaImagen daoCondiciones8 = null;
					byte[] imageBytePoliza8 = null;

					daoCondiciones8 = new ConsultaImagen();
					String condiciones8 = "0038";
					imageBytePoliza8 = daoCondiciones8.consultarPolizaParte2(condiciones8);
					Image poliza8 = Image.getInstance(Util.reducirCalidadImagen(imageBytePoliza8));

					poliza8.setBorder(Image.BOX);
					poliza8.setBorderWidth(5);
					poliza8.setBorderColor(BaseColor.WHITE);
					poliza8.scaleToFit(550, 800);

					document.add(poliza8);

				} catch (DocumentException e) {

				}

				document.close();

				// setting some response headers
				response.setHeader("Expires", "0");
				response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
				response.setHeader("Pragma", "public");
				// setting the content type
				response.setContentType("application/pdf");
				response.addHeader("Content-Disposition",
						"attachment; filename=" + "POLIZA_DE_TARJETA_DE_CREDITO_" + valor1 + ".pdf");

				// the contentlength
				response.setContentLength(baos.size());
				// write ByteArrayOutputStream to the ServletOutputStream
				ServletOutputStream os = response.getOutputStream();
				baos.writeTo(os);

			}
		} catch (Exception io) {
			io.printStackTrace();
		}
		// System.out.println("Compiling report…");

	}

	// Consulta request hiro
	public String SolicitudPrueba() {
		String resultado = "";

		return resultado;
	}

	// Instruccion
	@RequestMapping(value = "exSolicitud", method = RequestMethod.POST)
	public String exportarSolicitud(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String path = "";

		// System.out.println("eors_individual");
		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String valor1 = request.getParameter("numero");
		String envio = request.getParameter("enviar");
		String es_platinum = " ";

		BufferedOutputStream bos = null;
		RequestMensajeHost host = new RequestMensajeHost();

		String tipo = request.getParameter("tipo");
		String numero = request.getParameter("numero");

		// System.out.println("PRUEBA");
		// System.out.println("tipo" +tipo);
		// System.out.println("numero"+ numero);

		// RequestMensajeHost host = new RequestMensajeHost();

		BnSolicitud solicitud = null;

		// solicitud =
		// host.getSolicitud(numero,datosSesion.getCodigoHost().toUpperCase());
		// [16/07/21 16:13:29:673 COT] 00000082 SystemOut O tipo08531972
		// [16/07/21 16:13:29:673 COT] 00000082 SystemOut O
		// numero5227720099930512
		int tipNum = tipo.length();

		String bin = numero.substring(0, 4);
		String tarjeta2 = numero.substring(4);
		String tipoTar = "";
		if (bin.equals("5450")) {
			tipoTar = "1";
		}

		if (bin.equals("5227")) {
			tipoTar = "2";
		}

		if (bin.equals("5216")) {
			tipoTar = "3";
		}

		solicitud = host.getSolicitud(tipoTar, tarjeta2, "pjmo");

		// ////////////////////

		try {
			String archivo = "Solicitud";
			Map parameters = new HashMap();
			parameters.put("Cuenta1", valor1);

			JasperReport jasperReport = null;
			String type = "pdf";

			Collection<?> list;
			String exportFile = "prueba";

			type = (type == null) ? "html" : type;

			String totpagina = "2";
			Integer tot_adicionales = 0;
			if ((solicitud.getIND_ARRAY().trim().equals("")) || (solicitud.getIND_ARRAY().trim().equals("00"))) {
				totpagina = "2";
			} else {
				tot_adicionales = Integer.parseInt(solicitud.getIND_ARRAY());
				if (Integer.parseInt(solicitud.getIND_ARRAY()) > 2) {
					totpagina = "3";
				}
			}
			if (solicitud.getTIPTARJETA().trim().equals("PLATINUM")) {
				es_platinum = "SI";
			} else {
				es_platinum = "NO";
			}

			if (type.equals("pdf")) {

				Document document = new Document();

				ByteArrayOutputStream baos = new ByteArrayOutputStream();

				bos = new BufferedOutputStream(baos);
				try {

					PdfWriter.getInstance(document, baos);
				} catch (DocumentException e) {

				}
				document.open();

				// System.out.println("solicitud izipay");

				// System.out.println("Datos de Solicitud"+"/n"+solicitud);

				// --------------------------------------------------------------------
				// 03. Construcción del body json.

				// 03. Construcción del body json.
				/*
				 * ConfiguracionTarjetaRequestTemp configuracionTarjetaRequestTemp = new
				 * ConfiguracionTarjetaRequestTemp();
				 * 
				 * //hiro String[] country ="PE,CL,RF,DG,FF".split(","); GuardarTarjetaRequest
				 * guardarTarjetaRequest = new GuardarTarjetaRequest();
				 * 
				 * ComprasInternet comprasInternet = new ComprasInternet(); ComprasExtranjero
				 * comprasExtranjero=new ComprasExtranjero(); Notificacion notificacion=new
				 * Notificacion(); CashDispositionSettings disposicionEfectivo= new
				 * CashDispositionSettings();
				 * 
				 * 
				 * 
				 * guardarTarjetaRequest.setTypeCard("2");//DEFAULT
				 * guardarTarjetaRequest.setTypeClient("T");//si o si es titular SIEMPRE DEFAULT
				 * guardarTarjetaRequest.setNumberCard(numero.trim());
				 * guardarTarjetaRequest.setTypeDocument(solicitud.getTIPDOC());
				 * guardarTarjetaRequest .setNumberDocument(solicitud.getNUMDOC());
				 * guardarTarjetaRequest.setEmail(solicitud.getMAIL());
				 * guardarTarjetaRequest.setOperatorType("1");
				 * 
				 * guardarTarjetaRequest.setCellNumber(solicitud.getTLFCELL().
				 * substring(1,(solicitud.getTLFCELL().length() )));
				 * 
				 * 
				 * 
				 * comprasInternet.setStatus(solicitud.getMVIRTUAL(). equalsIgnoreCase("S")? "1"
				 * :"0" ); comprasInternet.setTypeMoney("S");
				 * comprasInternet.setTypeAmount(" ");
				 * comprasInternet.setMeansNotification("1"); comprasInternet.setAmount("0");
				 * 
				 * 
				 * //comprasExtranjero.setStatus(solicitud.getOEXTERIO(). equalsIgnoreCase("S")?
				 * "1" :"0" );//0 comprasExtranjero.setStatus("0");//Pues va ir por defecto
				 * comprasExtranjero.setTypeMoney("S"); comprasExtranjero.setAmount("0");
				 * comprasExtranjero.setTypeAmount(" ");
				 * comprasExtranjero.setDateDeparture(null);
				 * comprasExtranjero.setDateReturn(null);
				 * 
				 * comprasExtranjero.setCountry(null);
				 * 
				 * 
				 * 
				 * notificacion.setStatus(solicitud.getNOTIFICA().equalsIgnoreCase ("S")? "1"
				 * :"0" );//0 //tambien va ir por defecto en 0 notificacion.setTypeMoney("S");
				 * notificacion.setAmount("0");//MONTO MINIMO notificacion.setTypeAmount(" ");
				 * notificacion.setMeansNotification("2");
				 * 
				 * 
				 * disposicionEfectivo.setStatus(solicitud.getDISPOS(). equalsIgnoreCase("S")?
				 * "1" :"0" );//0 disposicionEfectivo.setTypeMoney("S");
				 * disposicionEfectivo.setTypeAmount(" "); disposicionEfectivo.setAmount("0");
				 * 
				 * 
				 * 
				 * guardarTarjetaRequest.setCashDispositionSettings( disposicionEfectivo);
				 * guardarTarjetaRequest.setShoppingAbroadSettings (comprasExtranjero);
				 * guardarTarjetaRequest.setShoppingInternetSettings (comprasInternet);
				 * guardarTarjetaRequest.setNotificationSettings(notificacion);
				 * 
				 * 
				 * 
				 * 
				 * GuardarTarjetaResponse respuesta=new GuardarTarjetaResponse(); String
				 * resultado="";
				 * 
				 * 
				 * try {
				 * 
				 * ObjectMapper objectMapper = new ObjectMapper(); String jsonRequest =
				 * objectMapper.writeValueAsString(guardarTarjetaRequest); String result="";
				 * 
				 * // System.out.println("Request enviado"); // System.out.println(jsonRequest);
				 * 
				 * 
				 * 
				 * String url = getServiceGuardarTarjetaAdress(); HttpURLConnection
				 * postConnection = (HttpURLConnection) new URL(url).openConnection();
				 * 
				 * 
				 * // Parámetros de timeout postConnection.setConnectTimeout(5 * 1000);
				 * postConnection.setRequestMethod("POST");
				 * 
				 * // Seteo de headers. postConnection.setRequestProperty("Application",
				 * "MODC"); postConnection.setRequestProperty("Channel", "WEB");
				 * postConnection.setRequestProperty("Content-Type", "application/json");
				 * postConnection.setRequestProperty("ChannelCode", "1");
				 * postConnection.setDoOutput(true);
				 * 
				 * // Llamada y envío de json body OutputStream os =
				 * postConnection.getOutputStream(); os.write(jsonRequest.getBytes());
				 * os.flush(); os.close();
				 * 
				 * // Exception // En caso el status code sea != 200 int statusCode =
				 * postConnection.getResponseCode();
				 * 
				 * if (statusCode != 200) { // Retorna al log con todos sus valores //renornar
				 * mensaje de error // System.out.println("Error de servicio " + statusCode); }
				 * 
				 * 
				 * // JSON respuesta BufferedReader buffReader = new BufferedReader(new
				 * InputStreamReader(postConnection.getInputStream())); String inputLine;
				 * StringBuilder strBuilder = new StringBuilder();
				 * 
				 * while ((inputLine = buffReader.readLine()) != null) {
				 * strBuilder.append(inputLine); }
				 * 
				 * buffReader.close();
				 * 
				 * result = strBuilder.toString();
				 * 
				 * // Convertir el objeto JSON ObjectMapper mapper = new ObjectMapper();
				 * LinkedHashMap<?, ?> clientResponse = mapper.readValue(result,
				 * LinkedHashMap.class);
				 * 
				 * String codResult = (String) clientResponse.get("codResult");
				 * resultado=codResult;
				 * 
				 * // solicitud.setRESPUESTA(codResult); //
				 * request.setAttribute("respuesta",codResult);
				 * 
				 * if(!"0000".equals(codResult)){ respuesta.setCodResult(codResult);
				 * respuesta.setMsg("Error en el servicio");
				 * respuesta.setMsgError("Error al guardar en el servicio"); //
				 * System.out.println(respuesta); //throw new Exception("Error");
				 * 
				 * }
				 * 
				 * // System.out.println("Codigo de respuesta");
				 * //System.out.println(codResult); request.setAttribute("respuesta",codResult);
				 * 
				 * 
				 * } catch (Exception e) {
				 * 
				 * solicitud.setRESPUESTA(resultado);
				 * request.setAttribute("respuesta",resultado); //
				 * respuesta.setCodResult(resultado); respuesta.setMsg("Error en el servicio");
				 * respuesta.setMsgError("Error al guardar en el servicio"); //
				 * System.out.println(respuesta); e.printStackTrace();
				 * 
				 * //throw e;
				 * 
				 * }
				 * 
				 * 
				 * 
				 * 
				 * 
				 * String result;
				 * 
				 * try {
				 * 
				 * 
				 * } catch (Exception e) {
				 * 
				 * // System.out.println("confirmarConfiguracionTarjeta "+e.getMessage ());
				 * 
				 * }
				 */

				// ///

				try {
					// document.add(creaTituloDoc1(valor1,
					// datosSesion.getCodigoHost().toUpperCase(),
					// cuentas1.getNOMAPE(),
					// cuentas1.getFREFINAN(),cuentas1.getFCANCEL(),cuentas1.getNDNI(),cuentas1.getEMAIL(),cuentas1.getDIRECCION(),
					// cuentas1.getNUMPOLIZA(), cuentas1.getPERIODO()));

					if (solicitud.getNOB_VIA_TIT().trim().equals("OTROS")) {
						solicitud.setNOB_VIA_TIT("");
					}
					if (solicitud.getNOB_VIA_LAB().trim().equals("OTROS")) {
						solicitud.setNOB_VIA_LAB("");
					}

					document.add(creaTituloDoc(solicitud.getCORRELATIVO(), solicitud.getTIPTARJETA(),
							solicitud.getFCH_SOLICITA(), "1", totpagina));
					document.add(creaDatosTitular(solicitud.getCODVIA_LAB(),
							solicitud.getNOMBRTIT().trim().replace("#", "Ñ") + " "
									+ solicitud.getAPELLTIT().trim().replace("#", "Ñ"),
							solicitud.getTIPDOC(), solicitud.getNUMDOC(), solicitud.getFCH_NAC(), solicitud.getSEXO(),
							solicitud.getESTCV(), "Empleado", solicitud.getTLFCASA(), solicitud.getTLFCELL(),
							solicitud.getTIPVIV(), solicitud.getDEPENDI(),
							solicitud.getNOB_VIA_TIT().trim() + ' ' + solicitud.getNOMVIA().trim().replace("#", "Ñ")
									+ ' ' + solicitud.getNUMVIA().trim().replace("#", "Ñ"),
							solicitud.getUBG_CLI_DIS(), solicitud.getUBG_CLI_PRO().replace("#", "Ñ"),
							solicitud.getUBG_CLI_DEP().replace("#", "Ñ"), solicitud.getREFEREN().replace("#", "Ñ"),
							solicitud.getLCORRES(), solicitud.getMAIL(), solicitud.getREFERENPER().replace("#", "Ñ"),
							solicitud.getTLFREF()));
					document.add(creaDatosLaborales(solicitud.getCODVIA_LAB(), " ",
							solicitud.getEMPLAB_TIT().replace("#", "Ñ"), solicitud.getSECTOR(),
							solicitud.getCONDLABORA(), "Empleado", solicitud.getFCHING(), solicitud.getSLD_CLI(),
							solicitud.getTLFLAB() + '-' + solicitud.getANEXOLABOR(),
							solicitud.getNOMVIA_LAB().trim() + ' ' + solicitud.getNOMVIA_LAB().trim().replace("#", "Ñ")
									+ ' ' + solicitud.getNUMVIA_LAB().trim(),
							solicitud.getUBG_DOM_LAB_DIS().replace("#", "Ñ"),
							solicitud.getUBG_DOM_LAB_PRO().replace("#", "Ñ"),
							solicitud.getUBG_DOM_LAB_DEP().replace("#", "Ñ")));
					// DESGRAVAMEN "Pago Minimo ", solicitud.getCTAAHORRO(),
					// solicitud.getSDESGRAVA(), solicitud.getENDOSO(),
					// VERIFICAR QUE ESTA LLEGANDO EN BLANCO
					document.add(creaDatosTarjetaCredito(solicitud.getMAIL(), solicitud.getTIPTARJETA(),
							solicitud.getCCLOFAC_CTA(), solicitud.getLINCRE_CTA(), "Moneda Nacional (S/.)",
							"Pago Minimo ", solicitud.getCTAAHORRO(), solicitud.getSDESGRAVA(), solicitud.getENDOSO(),
							solicitud.getMVIRTUAL(), solicitud.getNROTARJDEB(), solicitud.getDISPOS(),
							solicitud.getOEXTERIO(), solicitud.getNOTIFICA(), solicitud.getCELL_SMS(),
							solicitud.getNOMVIA_ENT().trim().replace("#", "Ñ") + ' ' + solicitud.getNUMVIA_ENT().trim(),
							solicitud.getREFEREN_ENT().trim().replace("#", "Ñ"),
							solicitud.getUBG_ZON_ENT_DEP().replace("#", "Ñ"),
							solicitud.getUBG_ZON_ENT_PRO().replace("#", "Ñ"),
							solicitud.getUBG_ZON_ENT_DIS().replace("#", "Ñ"), solicitud.getPERSONA_AUTOR(),
							solicitud.getTDOCUM_AUTOR(), solicitud.getNDOCUM_AUTOR(), solicitud.getNOMBRE_GRABAR(),
							es_platinum));
					document.add(Chunk.NEXTPAGE);
					document.add(creaTituloDoc(solicitud.getCORRELATIVO(), solicitud.getTIPTARJETA(),
							solicitud.getFCH_SOLICITA(), "2", totpagina));

					document.add(creaDatosTarjetasAdicionales(solicitud.getMAIL_ADI_01(), solicitud.getMAIL_ADI_02(),
							solicitud.getMAIL_ADI_03(), solicitud.getMAIL_ADI_04(), solicitud.getTIPOCARDADI_01(),
							solicitud.getLINECARDADI_01(), " ", " ", solicitud.getDISPOS_ADI_01(),
							solicitud.getNOMBR_ADI_01().trim().replace("#", "Ñ") + ' '
									+ solicitud.getAPELL_ADI_01().trim().replace("#", "Ñ"),
							solicitud.getTIPDOC_ADI_01(), solicitud.getNUMDOC_ADI_01(), solicitud.getFCHNAC_ADI_01(),
							solicitud.getSEXO_ADI_01(), solicitud.getTIPOCARDADI_02(), solicitud.getLINECARDADI_02(),
							" ", " ", solicitud.getDISPOS_ADI_02(),
							solicitud.getNOMBR_ADI_02().trim().replace("#", "Ñ") + ' '
									+ solicitud.getAPELL_ADI_02().trim().replace("#", "Ñ"),
							solicitud.getTIPDOC_ADI_02(), solicitud.getNUMDOC_ADI_02(), solicitud.getFCHNAC_ADI_02(),
							solicitud.getSEXO_ADI_02(), solicitud.getFECHAOPER_ADI_01(),
							solicitud.getFECHAOPER_ADI_02(), solicitud.getDISPOS_ADI_01(),
							solicitud.getNOTIFICA_ADI_01(), solicitud.getOEXTERIO_ADI_01(),
							solicitud.getMVIRTUAL_ADI_01(), solicitud.getTLF_CEL_ADI_01(), solicitud.getDISPOS_ADI_02(),
							solicitud.getNOTIFICA_ADI_02(), solicitud.getOEXTERIO_ADI_02(),
							solicitud.getMVIRTUAL_ADI_02(), solicitud.getTLF_CEL_ADI_02()));

					if (tot_adicionales > 2) {
						document.add(creaDatosTarjetasAdic(solicitud.getMAIL_ADI_03(), solicitud.getTIPOCARDADI_03(),
								solicitud.getLINECARDADI_03(), " ", " ", solicitud.getDISPOS_ADI_03(),
								solicitud.getNOMBR_ADI_03().trim().replace("#", "Ñ") + ' '
										+ solicitud.getAPELL_ADI_03().trim().replace("#", "Ñ"),
								solicitud.getTIPDOC_ADI_03(), solicitud.getNUMDOC_ADI_03(),
								solicitud.getFCHNAC_ADI_03(), solicitud.getSEXO_ADI_03(),
								solicitud.getFECHAOPER_ADI_03(), solicitud.getDISPOS_ADI_03(),
								solicitud.getNOTIFICA_ADI_03(), solicitud.getOEXTERIO_ADI_03(),
								solicitud.getMVIRTUAL_ADI_03(), solicitud.getTLF_CEL_ADI_03()));
					}
					if (tot_adicionales > 3) {
						document.add(creaDatosTarjetasAdic(solicitud.getMAIL_ADI_04(), solicitud.getTIPOCARDADI_04(),
								solicitud.getLINECARDADI_04(), " ", " ", solicitud.getDISPOS_ADI_04(),
								solicitud.getNOMBR_ADI_04().trim().replace("#", "Ñ") + ' '
										+ solicitud.getAPELL_ADI_04().trim().replace("#", "Ñ"),
								solicitud.getTIPDOC_ADI_04(), solicitud.getNUMDOC_ADI_04(),
								solicitud.getFCHNAC_ADI_04(), solicitud.getSEXO_ADI_04(),
								solicitud.getFECHAOPER_ADI_04(), solicitud.getDISPOS_ADI_04(),
								solicitud.getNOTIFICA_ADI_04(), solicitud.getOEXTERIO_ADI_04(),
								solicitud.getMVIRTUAL_ADI_04(), solicitud.getTLF_CEL_ADI_04()));

					}
					if (Integer.parseInt(totpagina) > 2) {
						document.add(creaLineaAutorizacion());
						document.add(Chunk.NEXTPAGE);
						document.add(creaTituloDoc(solicitud.getCORRELATIVO(), solicitud.getTIPTARJETA(),
								solicitud.getFCH_SOLICITA(), "3", totpagina));
						document.add(
								creaUsoInterno(solicitud.getNOM_TECNICO().replace("#", "Ñ"), solicitud.getCODCTR_EVA(),
										solicitud.getNTELEF_DEPEND(), solicitud.getNOM_FUNCIONARIO().replace("#", "Ñ"),
										solicitud.getCODFUNCION(), " ", solicitud.getNOM_AGENCIA().replace("#", "Ñ"),
										solicitud.getCOD_AGENCIA(), solicitud.getLINCRE_GLB(), " "));
						document.add(creaFirmas());
					} else {
						document.add(
								creaUsoInterno(solicitud.getNOM_TECNICO().replace("#", "Ñ"), solicitud.getCODCTR_EVA(),
										solicitud.getNTELEF_DEPEND(), solicitud.getNOM_FUNCIONARIO().replace("#", "Ñ"),
										solicitud.getCODFUNCION(), " ", solicitud.getNOM_AGENCIA().replace("#", "Ñ"),
										solicitud.getCOD_AGENCIA(), solicitud.getLINCRE_GLB(), " "));
						document.add(creaFirmas());
						document.add(creaLineaAutorizacion());
					}

				} catch (DocumentException e) {

				}

				document.close();

				byte[] ba = baos.toByteArray();
				Calendar fecha = new GregorianCalendar();

				int ano = fecha.get(Calendar.YEAR);
				int mes = (fecha.get(Calendar.MONTH)) + 1;
				int dia = fecha.get(Calendar.DAY_OF_MONTH);

				String anoo = String.valueOf(ano);
				String mess = String.valueOf(mes);
				String diaa = String.valueOf(dia);

				if (mess.length() == 1) {
					mess = "0" + mess;
				}
				if (diaa.length() == 1) {
					diaa = "0" + diaa;
				}
				String fechaEnv = diaa + "/" + mess + "/" + anoo;

				int hora = fecha.get(Calendar.HOUR_OF_DAY);
				int min = fecha.get(Calendar.MINUTE);
				int seg = fecha.get(Calendar.SECOND);

				String horaEnv = hora + ":" + min + ":" + seg;
				String horaLec = "";
				String fechaLec = "";
				String ipLec = "";
				String estado = "";
				String campo1 = "";
				String campo2 = "";

				CargarDocumento cargarTarjetaSolicitud = new CargarDocumento();
				String solicitudInsert = cargarTarjetaSolicitud.tarjetaSolicitud(solicitud.getNUMDOC(), "SOLICITUD", ba,
						solicitud.getMAIL(), fechaEnv, horaEnv, fechaLec, horaLec, ipLec, estado, campo1, campo2);

				// setting some response headers
				response.setHeader("Expires", "0");
				response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
				response.setHeader("Pragma", "public");
				// setting the content type
				response.setContentType("application/pdf");
				response.addHeader("Content-Disposition",
						"attachment; filename=" + "SOLICITUD_DE_TARJETA_DE_CREDITO_" + valor1 + ".pdf");

				// the contentlength
				response.setContentLength(baos.size());
				// write ByteArrayOutputStream to the ServletOutputStream
				ServletOutputStream os = response.getOutputStream();
				baos.writeTo(os);

			}
		} catch (Exception io) {
			io.printStackTrace();
		}
		// System.out.println("Compiling report…");

		String codResult1 = "0001";
		solicitud.setRESPUESTA(codResult1);
		request.setAttribute("respuesta", codResult1);
		return path;
	}

	private GuardarTarjetaResponse guardarAtributoTarjeta(GuardarTarjetaRequest request) {
		// logica de la consulta
		ObjectMapper objectMapper = new ObjectMapper();

		try {
			String jsonRequest = objectMapper.writeValueAsString(request);
			// System.out.println(jsonRequest);

		} catch (Exception e) {
			//
		}

		return null;
	}

	// hiro
	public void guardarConsulta() {

		// Construccion del body json

		GuardarTarjetaRequest configTarjetaRequest = new GuardarTarjetaRequest();

		ConfigPDisposicionEfectivo cashDispositionSettings = new ConfigPDisposicionEfectivo();
		ComprasInternet shoppingInternetSettings = new ComprasInternet();
		Notificacion notificationSettings = new Notificacion();
		ComprasExtranjero shoppingAbroadSettings = new ComprasExtranjero();

	}

	@RequestMapping(value = "verNotarial", method = RequestMethod.POST)
	public void verNotarial(HttpServletRequest request) throws Exception {
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		String Op = request.getParameter("Op");

		String tabla1 = "Registros";
		String adjNotarial = "Notarial";

	}

	@RequestMapping(value = "docPrestamoEx", method = RequestMethod.POST)
	public void docPrestamoEx(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception

	{
		String archivo = "Prestamo Multired";
		String nombreCriterio = "PRUEBA";
		String excelFilePath = "Reviews-export.xlsx";

		Connection conn = null;

		Statement statement = null;
		try {

			// String sql =
			// "SELECT rownum, F02_DESEMBOLSO,F02_TIPO,F02_EMAIL,F02_FECHA_CARGA FROM
			// BN_MODC.BNMODCF02_DOCPRESTAMO ORDER BY F02_FECHA_CARGA ASC";

			String sql = "SELECT rownum, F02_DESEMBOLSO,F02_TIPO,F02_EMAIL,F02_FECHA_CARGA FROM  (SELECT  F02_DESEMBOLSO, F02_TIPO, F02_DOCUMENTO, F02_EMAIL, F02_FECHA_ENVIO,F02_HORA_ENVIO, F02_FECHA_LECTURA,F02_HORA_LECTURA, "
					+ "F02_IP_PC_LECTURA, F02_ESTADO, F02_CAMPO1, F02_CAMPO2,F02_FECHA_CARGA FROM  BN_MODC.BNMODCF02_DOCPRESTAMO ORDER BY F02_FECHA_CARGA ASC)";

			conn = dss.connect();
			statement = conn.createStatement();
			ResultSet result = statement.executeQuery(sql);

			XSSFWorkbook workbook = new XSSFWorkbook();
			XSSFSheet sheet = workbook.createSheet("Reviews");

			writeHeaderLine(sheet);

			writeDataLines(result, workbook, sheet);

			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition", "attachment;filename=Prestamo.xlsx");

			ServletOutputStream out = response.getOutputStream();

			workbook.write(out);
			out.close();

			statement.close();

		} catch (SQLException e) {
			System.out.println("Datababse error:");
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("File IO error:");
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "docPrestamoExPR", method = RequestMethod.POST)
	public void docPrestamoExPR(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception

	{
		String archivo = "Prestamo Multired";
		String nombreCriterio = "PRUEBA";
		String excelFilePath = "Reviews-export.xlsx";

		Connection conn = null;

		Statement statement = null;
		try {

			String sql = "   SELECT rownum, F04_DESEMBOLSO,F04_TIPO,F04_USUARIO,F04_FECHA_CARGA FROM "
					+ " (SELECT  F04_DESEMBOLSO, F04_TIPO, F04_DOCUMENTO, F04_EMAIL,F04_USUARIO, F04_FECHA_ENVIO,F04_HORA_ENVIO, "
					+ "  F04_FECHA_LECTURA,F04_HORA_LECTURA, "
					+ "  F04_IP_PC_LECTURA, F04_ESTADO, F04_CAMPO1, F04_CAMPO2,F04_FECHA_CARGA FROM "
					+ "   BN_MODC.BNMODCF04_DOCPRESTAMOCRO ORDER BY F04_FECHA_CARGA ASC)";

			conn = dss.connect();
			statement = conn.createStatement();
			ResultSet result = statement.executeQuery(sql);

			XSSFWorkbook workbook = new XSSFWorkbook();
			XSSFSheet sheet = workbook.createSheet("Reviews");

			writeHeaderLineCro(sheet);

			writeDataLinesCro(result, workbook, sheet);

			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition", "attachment;filename=Prestamo_Multired.xlsx");

			ServletOutputStream out = response.getOutputStream();

			workbook.write(out);
			out.close();

			statement.close();

		} catch (SQLException e) {
			System.out.println("Datababse error:");
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("File IO error:");
			e.printStackTrace();
		}

	}

	@RequestMapping(value = "docTarjetaEx", method = RequestMethod.POST)
	public void docTarjetaEx(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception

	{

		Connection conn = null;

		Statement statement = null;
		try {

			// String sql =
			// "SELECT rownum, F03_DNI,F03_TIPO,F03_EMAIL,F03_FECHA_CARGA FROM
			// BN_MODC.BNMODCF03_DOCTARJETA ORDER BY F03_FECHA_CARGA ASC";

			String sql = "select rownum, F03_DNI,F03_TIPO,F03_EMAIL,F03_FECHA_CARGA from (SELECT F03_DNI, F03_TIPO, F03_DOCUMENTO, F03_EMAIL, F03_FECHA_ENVIO,F03_HORA_ENVIO, F03_FECHA_LECTURA,F03_HORA_LECTURA, "
					+ "F03_IP_PC_LECTURA, F03_ESTADO, F03_CAMPO1, F03_CAMPO2,F03_FECHA_CARGA,rownum FROM  BN_MODC.BNMODCF03_DOCTARJETA ORDER BY F03_FECHA_CARGA ASC)";

			conn = dss.connect();
			statement = conn.createStatement();
			ResultSet result = statement.executeQuery(sql);

			XSSFWorkbook workbook = new XSSFWorkbook();
			XSSFSheet sheet = workbook.createSheet("Reviews");

			writeHeaderLineTar(sheet);

			writeDataLinesTar(result, workbook, sheet);

			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition", "attachment;filename=Tarjeta.xlsx");

			ServletOutputStream out = response.getOutputStream();

			workbook.write(out);
			out.close();

			statement.close();

		} catch (SQLException e) {
			System.out.println("Datababse error:");
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("File IO error:");
			e.printStackTrace();
		}

	}

	private void writeDataLinesCro(ResultSet result, XSSFWorkbook workbook, XSSFSheet sheet) throws SQLException {
		int rowCount = 1;

		while (result.next()) {
			String num = result.getString(1);
			String desembolso = result.getString("F04_DESEMBOLSO");
			String producto = result.getString("F04_TIPO");
			String usuario = result.getString("F04_USUARIO");

			String Fecha = result.getString("F04_FECHA_CARGA");

			Row row = sheet.createRow(rowCount++);

			int columnCount = 0;

			Cell cell = row.createCell(columnCount++);
			cell.setCellValue(num);

			cell = row.createCell(columnCount++);
			cell.setCellValue(desembolso);

			cell = row.createCell(columnCount++);
			cell.setCellValue(producto);

			cell = row.createCell(columnCount++);
			cell.setCellValue(usuario);

			cell = row.createCell(columnCount++);
			cell.setCellValue(Fecha);

		}
	}

	private void writeDataLines(ResultSet result, XSSFWorkbook workbook, XSSFSheet sheet) throws SQLException {
		int rowCount = 1;

		while (result.next()) {
			String num = result.getString(1);
			String desembolso = result.getString("F02_DESEMBOLSO");
			String producto = result.getString("F02_TIPO");
			String correo = result.getString("F02_EMAIL");

			String Fecha = result.getString("F02_FECHA_CARGA");

			Row row = sheet.createRow(rowCount++);

			int columnCount = 0;

			Cell cell = row.createCell(columnCount++);
			cell.setCellValue(num);

			cell = row.createCell(columnCount++);
			cell.setCellValue(desembolso);

			cell = row.createCell(columnCount++);
			cell.setCellValue(producto);

			cell = row.createCell(columnCount++);
			cell.setCellValue(correo);

			cell = row.createCell(columnCount++);
			cell.setCellValue(Fecha);

		}
	}

	private void writeDataLinesTar(ResultSet result, XSSFWorkbook workbook, XSSFSheet sheet) throws SQLException {
		int rowCount = 1;

		while (result.next()) {
			String num = result.getString(1);
			String desembolso = result.getString("F03_DNI");
			String producto = result.getString("F03_TIPO");
			String correo = result.getString("F03_EMAIL");

			String Fecha = result.getString("F03_FECHA_CARGA");

			Row row = sheet.createRow(rowCount++);

			int columnCount = 0;

			Cell cell = row.createCell(columnCount++);
			cell.setCellValue(num);

			cell = row.createCell(columnCount++);
			cell.setCellValue(desembolso);

			cell = row.createCell(columnCount++);
			cell.setCellValue(producto);

			cell = row.createCell(columnCount++);
			cell.setCellValue(correo);

			cell = row.createCell(columnCount++);
			cell.setCellValue(Fecha);

		}
	}

	private void writeHeaderLineCro(XSSFSheet sheet) {

		Row headerRow = sheet.createRow(0);

		Cell headerCell = headerRow.createCell(0);
		headerCell.setCellValue("N°");

		headerCell = headerRow.createCell(1);
		headerCell.setCellValue("Desembolso");

		headerCell = headerRow.createCell(2);
		headerCell.setCellValue("Producto");

		headerCell = headerRow.createCell(3);
		headerCell.setCellValue("Usuario");

		headerCell = headerRow.createCell(4);
		headerCell.setCellValue("Fecha y Hora");

	}

	private void writeHeaderLine(XSSFSheet sheet) {

		Row headerRow = sheet.createRow(0);

		Cell headerCell = headerRow.createCell(0);
		headerCell.setCellValue("N°");

		headerCell = headerRow.createCell(1);
		headerCell.setCellValue("Desembolso");

		headerCell = headerRow.createCell(2);
		headerCell.setCellValue("Producto");

		headerCell = headerRow.createCell(3);
		headerCell.setCellValue("Correo");

		headerCell = headerRow.createCell(4);
		headerCell.setCellValue("Fecha y Hora");

	}

	private void writeHeaderLineTar(XSSFSheet sheet) {

		Row headerRow = sheet.createRow(0);

		Cell headerCell = headerRow.createCell(0);
		headerCell.setCellValue("N°");

		headerCell = headerRow.createCell(1);
		headerCell.setCellValue("Documento");

		headerCell = headerRow.createCell(2);
		headerCell.setCellValue("Producto");

		headerCell = headerRow.createCell(3);
		headerCell.setCellValue("Correo");

		headerCell = headerRow.createCell(4);
		headerCell.setCellValue("Fecha y Hora");

	}

	@RequestMapping(value = "docTarjeta", method = RequestMethod.POST)
	public void docTarjeta(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String path = "";

		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String desembolso = request.getParameter("numero");

		BufferedOutputStream bos = null;
		RequestMensajeHost host = new RequestMensajeHost();

		BnSolicitud solicitud = null;

		Connection conn = null;
		PreparedStatement pstmt = null;

		Statement stmt = null;
		InputStream input = null;
		FileOutputStream output = null;

		String tabla = "BN_MODC.BNMODCF03_DOCTARJETA";

		try {
			String sql = "SELECT F03_DOCUMENTO FROM   " + tabla + " WHERE F03_DNI = '" + desembolso + "'";
			conn = dss.connect();
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);

			if (rs.next()) {
				input = rs.getBinaryStream("F03_DOCUMENTO");

			}
			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition",
					"attachment;filename=Solicitud_Tarjeta_de_ Credito_" + desembolso + ".pdf");

			ServletOutputStream out = response.getOutputStream();

			byte[] outputByte = new byte[4096];
			// copy binary contect to output stream
			while (input.read(outputByte, 0, 4096) != -1) {
				out.write(outputByte, 0, 4096);
			}
			input.close();
			out.flush();
			out.close();

		} catch (Exception e) {
			System.err.println(e);
		} finally {
			try {
				if (input != null) {
					input.close();
				}
				if (output != null) {
					output.close();
				}
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
				System.err.println(e);
			}
		}

	}

	@RequestMapping(value = "verTarjetaT", method = RequestMethod.POST)
	public void verTarjetaT(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String desembolso = request.getParameter("desembolso");

		BufferedOutputStream bos = null;
		RequestMensajeHost host = new RequestMensajeHost();

		Connection conn = null;
		PreparedStatement pstmt = null;

		Statement stmt = null;
		InputStream input = null;
		FileOutputStream output = null;

		String tabla = "BN_MODC.BNMODCF03_DOCTARJETA";

		try {
			String sql = "SELECT F03_DOCUMENTO FROM   " + tabla + " WHERE F03_DNI = '" + desembolso + "'";
			conn = dss.connect();
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);

			if (rs.next()) {
				input = rs.getBinaryStream("F03_DOCUMENTO");

			}
			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition",
					"attachment;filename=Solicitud_de_Tarjeta_de_Credito" + desembolso + ".pdf");

			ServletOutputStream out = response.getOutputStream();

			byte[] outputByte = new byte[4096];
			// copy binary contect to output stream
			while (input.read(outputByte, 0, 4096) != -1) {
				out.write(outputByte, 0, 4096);
			}
			input.close();
			out.flush();
			out.close();

		} catch (Exception e) {
			System.err.println(e);
		} finally {
			try {
				if (input != null) {
					input.close();
				}
				if (output != null) {
					output.close();
				}
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
				System.err.println(e);
			}
		}

	}

	@RequestMapping(value = "verPrestamoT", method = RequestMethod.POST)
	public void verPrestamoT(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String desembolso = request.getParameter("desembolso");

		BufferedOutputStream bos = null;
		RequestMensajeHost host = new RequestMensajeHost();

		BnSolicitud solicitud = null;

		Connection conn = null;
		PreparedStatement pstmt = null;

		Statement stmt = null;
		InputStream input = null;
		FileOutputStream output = null;

		String tabla = "BN_MODC.BNMODCF02_DOCPRESTAMO";

		try {
			String sql = "SELECT F02_DOCUMENTO FROM   " + tabla + " WHERE F02_DESEMBOLSO = '" + desembolso + "'";
			conn = dss.connect();
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);

			if (rs.next()) {
				input = rs.getBinaryStream("F02_DOCUMENTO");

			}
			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition", "attachment;filename=Prestamo_Multired_" + desembolso + ".pdf");

			ServletOutputStream out = response.getOutputStream();

			byte[] outputByte = new byte[4096];
			// copy binary contect to output stream
			while (input.read(outputByte, 0, 4096) != -1) {
				out.write(outputByte, 0, 4096);
			}
			input.close();
			out.flush();
			out.close();

		} catch (Exception e) {
			System.err.println(e);
		} finally {
			try {
				if (input != null) {
					input.close();
				}
				if (output != null) {
					output.close();
				}
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
				System.err.println(e);
			}
		}

	}

	private static final String UPLOAD_DIRECTORY = "archivo";
	private static final int THRESHOLD_SIZE = 1024 * 1024 * 3; // 3MB
	private static final int MAX_FILE_SIZE = 1024 * 1024 * 40; // 40MB
	private static final int MAX_REQUEST_SIZE = 1024 * 1024 * 50; // 50MB

	String nombre, cuenta, estado, ruta, doc, nom;

	private void processFormField(FileItem item) {
		// String na = item.getFieldName();
		if (item.getFieldName().equals("txtNombre")) {
			nombre = item.getString();
		} else if (item.getFieldName().equals("txtCuenta")) {
			cuenta = item.getString();
		} else if (item.getFieldName().equals("txtEstado")) {
			estado = item.getString();

		}
	}

	@RequestMapping(value = "adjuntar", method = RequestMethod.POST)
	public String adjuntar(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";

		try {

			log.debug("@@@adjuntar", "1");

			String numero = request.getParameter("numero");

			MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
			MultipartFile multipartFile = multipartRequest.getFile("documento");

			if (multipartFile != null && multipartFile.getSize() != 0) {

				ConsultaDocumentoImpl consultaDocumentoImpl = new ConsultaDocumentoImpl();

				boolean result = consultaDocumentoImpl.actualizarFirmaImagen(multipartFile.getInputStream(), numero);

				if (result) {
					request.setAttribute("message", "Archivo actualizado correctamente.");
				} else {
					request.setAttribute("message", "Archivo no se actualizo.");
				}
			}

		} catch (Exception ex) {
			System.err.println("Ocurrio un error: " + ex.getMessage());

			request.setAttribute("message", ex.getMessage());

			log.error(ex, "Ocurrio un error: ", ex.getMessage());
		}

		path = View.returnJsp(model, "consulta/actualizar");

		return path;
	}

	// ---------------------------------------------------------DESCARGA
	// CONTENIDO PARAMETRO----------------------------------
	@RequestMapping(value = "verParametro", method = RequestMethod.POST)
	public void verParametro(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String desembolso = request.getParameter("desembolso");

		BufferedOutputStream bos = null;
		RequestMensajeHost host = new RequestMensajeHost();

		BnConsultaParametros parametros = null;

		Connection conn = null;
		PreparedStatement pstmt = null;

		Statement stmt = null;
		InputStream input = null;
		FileOutputStream output = null;

		String tipo = null;

		try {
			String sql = "select f01_valor_tabla,F01_DES_TABLA from bnmodcf01_parametros where f01_cod_tabla = '"
					+ desembolso + "'";
			conn = dss.connect();
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);

			if (rs.next()) {
				input = rs.getBinaryStream("F01_VALOR_TABLA");
				tipo = rs.getString("F01_DES_TABLA");

			}

			if (tipo.startsWith("pdf_")) {

				response.setContentType("application/pdf");
				response.addHeader("Content-Disposition", "attachment; filename=" + tipo + ".pdf");

				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				int bytesRead;
				byte[] buffer = new byte[8192];
				while ((bytesRead = input.read(buffer)) != -1) {
					baos.write(buffer, 0, bytesRead);
				}

				byte[] ba = baos.toByteArray();
				response.setHeader("Expires", "0");
				response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
				response.setHeader("Pragma", "public");
				// setting the content type
				response.setContentType("application/pdf");
				// the contentlength
				response.setContentLength(baos.size());
				// write ByteArrayOutputStream to the ServletOutputStream
				ServletOutputStream outputStream = response.getOutputStream();
				baos.writeTo(outputStream);
				outputStream.flush();
				outputStream.close();
			} else {

				response.setContentType("application/octet-stream");
				response.setHeader("Content-Disposition", "attachment;filename=Imagen" + desembolso + ".jpg");

				ServletOutputStream out = response.getOutputStream();

				byte[] outputByte = new byte[4096];
				// copy binary contect to output stream
				while (input.read(outputByte, 0, 4096) != -1) {
					out.write(outputByte, 0, 4096);
				}
				input.close();
				out.flush();
				out.close();

			}

		} catch (Exception e) {
			System.err.println(e);
		} finally {
			try {
				if (input != null) {
					input.close();
				}
				if (output != null) {
					output.close();
				}
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
				System.err.println(e);
			}
		}

	}

	// ---------------------------------------------------------FIN DESCARGA
	// CONTENIDO PARAMETRO----------------------------------

	@RequestMapping(value = "verPrestamoTPR", method = RequestMethod.POST)
	public void verPrestamoTPR(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String desembolso = request.getParameter("desembolso");

		BufferedOutputStream bos = null;
		RequestMensajeHost host = new RequestMensajeHost();

		BnSolicitud solicitud = null;

		Connection conn = null;
		PreparedStatement pstmt = null;

		Statement stmt = null;
		InputStream input = null;
		FileOutputStream output = null;

		String tabla = "BN_MODC.BNMODCF04_DOCPRESTAMOCRO";

		try {
			String sql = "SELECT F04_DOCUMENTO FROM   " + tabla + " WHERE F04_DESEMBOLSO = '" + desembolso + "'";
			conn = dss.connect();
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);

			if (rs.next()) {
				input = rs.getBinaryStream("F04_DOCUMENTO");

			}
			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition", "attachment;filename=Prestamo_Multired_" + desembolso + ".pdf");

			ServletOutputStream out = response.getOutputStream();

			byte[] outputByte = new byte[4096];
			// copy binary contect to output stream
			while (input.read(outputByte, 0, 4096) != -1) {
				out.write(outputByte, 0, 4096);
			}
			input.close();
			out.flush();
			out.close();

		} catch (Exception e) {
			System.err.println(e);
		} finally {
			try {
				if (input != null) {
					input.close();
				}
				if (output != null) {
					output.close();
				}
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
				System.err.println(e);
			}
		}

	}

	@RequestMapping(value = "docPrestamo", method = RequestMethod.POST)
	public void docPrestamo(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String path = "";

		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String desembolso = request.getParameter("numero");

		BufferedOutputStream bos = null;
		RequestMensajeHost host = new RequestMensajeHost();

		BnSolicitud solicitud = null;

		Connection conn = null;
		PreparedStatement pstmt = null;

		Statement stmt = null;
		InputStream input = null;
		FileOutputStream output = null;

		String tabla = "BN_MODC.BNMODCF02_DOCPRESTAMO";

		try {
			String sql = "SELECT F02_DOCUMENTO FROM   " + tabla + " WHERE F02_DESEMBOLSO = '" + desembolso + "'";
			conn = dss.connect();
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);

			if (rs.next()) {
				input = rs.getBinaryStream("F02_DOCUMENTO");

			}
			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition", "attachment;filename=Prestamo_Multired_" + desembolso + ".pdf");

			ServletOutputStream out = response.getOutputStream();

			byte[] outputByte = new byte[4096];
			// copy binary contect to output stream
			while (input.read(outputByte, 0, 4096) != -1) {
				out.write(outputByte, 0, 4096);
			}
			input.close();
			out.flush();
			out.close();

		} catch (Exception e) {
			System.err.println(e);
		} finally {
			try {
				if (input != null) {
					input.close();
				}
				if (output != null) {
					output.close();
				}
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
				System.err.println(e);
			}
		}

	}

	@RequestMapping(value = "docPrestamoPR", method = RequestMethod.POST)
	public void docPrestamoPR(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String path = "";

		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String desembolso = request.getParameter("numero");

		BufferedOutputStream bos = null;
		RequestMensajeHost host = new RequestMensajeHost();

		BnSolicitud solicitud = null;

		Connection conn = null;
		PreparedStatement pstmt = null;

		Statement stmt = null;
		InputStream input = null;
		FileOutputStream output = null;

		String tabla = "BN_MODC.BNMODCF04_DOCPRESTAMOCRO";

		try {
			String sql = "SELECT F04_DOCUMENTO FROM   " + tabla + " WHERE F04_DESEMBOLSO = '" + desembolso + "'";
			conn = dss.connect();
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);

			if (rs.next()) {
				input = rs.getBinaryStream("F04_DOCUMENTO");

			}
			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition", "attachment;filename=Prestamo_Multired_" + desembolso + ".pdf");

			ServletOutputStream out = response.getOutputStream();

			byte[] outputByte = new byte[4096];
			// copy binary contect to output stream
			while (input.read(outputByte, 0, 4096) != -1) {
				out.write(outputByte, 0, 4096);
			}
			input.close();
			out.flush();
			out.close();

		} catch (Exception e) {
			System.err.println(e);
		} finally {
			try {
				if (input != null) {
					input.close();
				}
				if (output != null) {
					output.close();
				}
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
				System.err.println(e);
			}
		}

	}

	// Enviar prestamo por correo

	@RequestMapping("exPrestamoEnviar")
	public String exPrestamoEnviar(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";

		String ruta = request.getSession().getServletContext().getRealPath("").toString();

		String desembolso = request.getParameter("numero");

		BufferedOutputStream bos = null;

		Connection conn = null;
		PreparedStatement pstmt = null;

		Statement stmt = null;
		InputStream input = null;
		String fecha = "";
		String correoTitular = "";
		String correoGarante = "";
		String nombres = "";
		String age = "";
		FileOutputStream output = null;

		String tabla = "BN_MODC.BNMODCF02_DOCPRESTAMO";

		try {
			String sql = "SELECT F02_DOCUMENTO, F02_FECHA_CARGA, F02_EMAIL, F02_CAMPO2, NOMBRES, AGENCIA FROM  BN_MODC.BNMODCF02_DOCPRESTAMO where rowid in(select max(rowid) from "
					+ " bnmodcf02_docprestamo WHERE F02_DESEMBOLSO = '" + desembolso + "')";

			conn = dss.connect();
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);

			if (rs.next()) {
				input = rs.getBinaryStream("F02_DOCUMENTO");
				fecha = rs.getString("F02_FECHA_CARGA");
				correoTitular = rs.getString("F02_EMAIL");
				correoGarante = rs.getString("F02_CAMPO2");
				nombres = rs.getString("NOMBRES");
				age = rs.getString("AGENCIA");

			}

			// System.out.println("fecha "+fecha);
			// System.out.println("titular "+correoTitular);
			// System.out.println("nombres "+nombres);
			// System.out.println("age "+age);

			ByteArrayOutputStream buffer = new ByteArrayOutputStream();
			int nRead;
			byte[] data = new byte[1024];
			while ((nRead = input.read(data, 0, data.length)) != -1) {
				buffer.write(data, 0, nRead);
			}

			buffer.flush();
			byte[] ba = buffer.toByteArray();

			// solo manda correo al titular
			// if(correoGarante == null){

			ServiceMessageProxy serviceMessage = new ServiceMessageProxy();

			String urlSimm = getServiceSimmAdress();
			// Seteo url del Cliente Simm
			serviceMessage._getDescriptor().setEndpoint(urlSimm);

			RequestMessage requestMessage = new RequestMessage();
			ReqListMessage rm = new ReqListMessage();
			ReqListMessage[] reqListMessage;
			reqListMessage = new ReqListMessage[1];

			Adjunto adjunto = new Adjunto();
			adjunto.setFlagAdjunto(1);

			adjunto.setDocAdjunto(ba);

			DatosCorreo datosCorreo = new DatosCorreo();
			datosCorreo.setAsunto(Constante.ASUNTO_PRESTAMO + "-" + desembolso);
			// datosCorreo.setCorreoDestinatario(correoTitular);

			DatosParametro datosParametro = new DatosParametro();
			datosParametro.setParametro1(nombres);
			datosParametro.setParametro5(age);

			if (correoGarante == null) {

				datosCorreo.setCorreoDestinatario(correoTitular);

			} else {

				datosCorreo.setCorreoDestinatario(correoTitular);

				datosCorreo.setCorreoCopia(correoGarante);

			}

			datosParametro.setParametro1(nombres);
			datosParametro.setParametro5(age);
			rm.setAdjunto(adjunto);
			rm.setDatosCorreo(datosCorreo);
			rm.setDatosParametro(datosParametro);
			reqListMessage[0] = rm;
			requestMessage.setCodRequermiento(Constante.REQUE_PRESTAMO);

			ArrayOfTns1ReqListMessage array = new ArrayOfTns1ReqListMessage();
			List<ReqListMessage> arrayList = new ArrayList<ReqListMessage>();
			arrayList.add(rm);
			array.setItem(arrayList);
			requestMessage.setReqListMessage(array);

			try {
				serviceMessage.sendMessageAsync(requestMessage);

				ResponseMessage respuesta = new ResponseMessage();

				respuesta.getCodRetorno();

			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("no se pudo enviar el mensaje");
				System.out.println(e.getMessage());
				// log.error(e, "122", e.getMessage());

			}

			// }

			Calendar fecha1 = new GregorianCalendar();

			int ano = fecha1.get(Calendar.YEAR);
			int mes = (fecha1.get(Calendar.MONTH)) + 1;
			int dia = fecha1.get(Calendar.DAY_OF_MONTH);

			String anoo = String.valueOf(ano);
			String mess = String.valueOf(mes);
			String diaa = String.valueOf(dia);

			if (mess.length() == 1) {
				mess = "0" + mess;
			}
			if (diaa.length() == 1) {
				diaa = "0" + diaa;
			}
			String fechaEnv = diaa + "/" + mess + "/" + anoo;

			int hora = fecha1.get(Calendar.HOUR_OF_DAY);
			int min = fecha1.get(Calendar.MINUTE);
			int seg = fecha1.get(Calendar.SECOND);

			String horaEnv = hora + ":" + min + ":" + seg;
			String horaLec = "";
			String fechaLec = "";
			String ipLec = "";
			String estado = "";
			String campo1 = "";
			String campo2 = "";

			// Actualiza tabla de prestamos
			CargarDocumento cargarPrestamo = new CargarDocumento();
			String prestamoActualiza = cargarPrestamo.prestamoActualiza(fechaEnv, horaEnv, desembolso);

			if (prestamoActualiza.equalsIgnoreCase("ACTUALIZADO")) {
				request.setAttribute("msje", "Error 30");
				path = View.returnJsp(model, "consulta/consultaPM");
				return path;
			}

		} catch (Exception e) {
			System.err.println(e);
		} finally {
			try {
				if (input != null) {
					input.close();
				}
				if (output != null) {
					output.close();
				}
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
				System.err.println(e);
			}
		}

		//

		return path;

	}

	@RequestMapping("enviar2")
	public String enviar2(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";

		System.out.println("eors_individual");
		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		// HttpSession session=request.getSession(false);
		// DatosSesion datosSesion = new DatosSesion();
		// datosSesion = (DatosSesion)
		// request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String valor1 = request.getParameter("numero");
		String envio = request.getParameter("enviar");
		String es_platinum = " ";

		BufferedOutputStream bos = null;
		RequestMensajeHost host = new RequestMensajeHost();

		BnSolicitud solicitud = null;

		solicitud = host.getSolicitud(valor1, "pjmo");
		request.setAttribute("creditos", solicitud);
		CargarDocumento cargarTarjetaSolicitud = new CargarDocumento();

		String solicitudConsult = cargarTarjetaSolicitud.tarjetaSolicitudConsulta((solicitud.getNUMDOC()).trim());

		if (solicitudConsult.equalsIgnoreCase((solicitud.getNUMDOC()).trim())) {

			request.setAttribute("msje1", "Error 21");
			path = View.returnJsp(model, "tarjeta/solicitud");

		} else {

			try {
				String archivo = "Solicitud";
				Map parameters = new HashMap();
				parameters.put("Cuenta1", valor1);

				JasperReport jasperReport = null;
				String type = "pdf";

				Collection<?> list;
				String exportFile = "prueba";

				type = (type == null) ? "html" : type;

				String totpagina = "2";
				Integer tot_adicionales = 0;
				if ((solicitud.getIND_ARRAY().trim().equals("")) || (solicitud.getIND_ARRAY().trim().equals("00"))) {
					totpagina = "2";
				} else {
					tot_adicionales = Integer.parseInt(solicitud.getIND_ARRAY());
					if (Integer.parseInt(solicitud.getIND_ARRAY()) > 2) {
						totpagina = "3";
					}
				}
				if (solicitud.getTIPTARJETA().trim().equals("PLATINUM")) {
					es_platinum = "SI";
				} else {
					es_platinum = "NO";
				}

				if (type.equals("pdf")) {

					Document document = new Document();

					ByteArrayOutputStream baos = new ByteArrayOutputStream();

					bos = new BufferedOutputStream(baos);
					try {

						PdfWriter.getInstance(document, baos);
					} catch (DocumentException e) {

					}
					document.open();

					try {
						// document.add(creaTituloDoc1(valor1,
						// datosSesion.getCodigoHost().toUpperCase(),
						// cuentas1.getNOMAPE(),
						// cuentas1.getFREFINAN(),cuentas1.getFCANCEL(),cuentas1.getNDNI(),cuentas1.getEMAIL(),cuentas1.getDIRECCION(),
						// cuentas1.getNUMPOLIZA(), cuentas1.getPERIODO()));

						if (solicitud.getNOB_VIA_TIT().trim().equals("OTROS")) {
							solicitud.setNOB_VIA_TIT("");
						}
						if (solicitud.getNOB_VIA_LAB().trim().equals("OTROS")) {
							solicitud.setNOB_VIA_LAB("");
						}

						document.add(creaTituloDoc(solicitud.getCORRELATIVO(), solicitud.getTIPTARJETA(),
								solicitud.getFCH_SOLICITA(), "1", totpagina));
						document.add(creaDatosTitular(solicitud.getCODVIA_LAB(),
								solicitud.getNOMBRTIT().trim().replace("#", "Ñ") + " "
										+ solicitud.getAPELLTIT().trim().replace("#", "Ñ"),
								solicitud.getTIPDOC(), solicitud.getNUMDOC(), solicitud.getFCH_NAC(),
								solicitud.getSEXO(), solicitud.getESTCV(), "Empleado", solicitud.getTLFCASA(),
								solicitud.getTLFCELL(), solicitud.getTIPVIV(), solicitud.getDEPENDI(),
								solicitud.getNOB_VIA_TIT().trim() + ' ' + solicitud.getNOMVIA().trim().replace("#", "Ñ")
										+ ' ' + solicitud.getNUMVIA().trim().replace("#", "Ñ"),
								solicitud.getUBG_CLI_DIS(), solicitud.getUBG_CLI_PRO().replace("#", "Ñ"),
								solicitud.getUBG_CLI_DEP().replace("#", "Ñ"), solicitud.getREFEREN().replace("#", "Ñ"),
								solicitud.getLCORRES(), solicitud.getMAIL(),
								solicitud.getREFERENPER().replace("#", "Ñ"), solicitud.getTLFREF()));
						document.add(creaDatosLaborales(solicitud.getCODVIA_LAB(), " ",
								solicitud.getEMPLAB_TIT().replace("#", "Ñ"), solicitud.getSECTOR(),
								solicitud.getCONDLABORA(), "Empleado", solicitud.getFCHING(), solicitud.getSLD_CLI(),
								solicitud.getTLFLAB() + '-' + solicitud.getANEXOLABOR(),
								solicitud.getNOMVIA_LAB().trim() + ' '
										+ solicitud.getNOMVIA_LAB().trim().replace("#", "Ñ") + ' '
										+ solicitud.getNUMVIA_LAB().trim(),
								solicitud.getUBG_DOM_LAB_DIS().replace("#", "Ñ"),
								solicitud.getUBG_DOM_LAB_PRO().replace("#", "Ñ"),
								solicitud.getUBG_DOM_LAB_DEP().replace("#", "Ñ")));
						// DESGRAVAMEN "Pago Minimo ", solicitud.getCTAAHORRO(),
						// solicitud.getSDESGRAVA(), solicitud.getENDOSO(),
						// VERIFICAR QUE ESTA LLEGANDO EN BLANCO
						document.add(creaDatosTarjetaCredito(solicitud.getMAIL(), solicitud.getTIPTARJETA(),
								solicitud.getCCLOFAC_CTA(), solicitud.getLINCRE_CTA(), "Moneda Nacional (S/.)",
								"Pago Minimo ", solicitud.getCTAAHORRO(), solicitud.getSDESGRAVA(),
								solicitud.getENDOSO(), solicitud.getMVIRTUAL(), solicitud.getNROTARJDEB(),
								solicitud.getDISPOS(), solicitud.getOEXTERIO(), solicitud.getNOTIFICA(),
								solicitud.getCELL_SMS(),
								solicitud.getNOMVIA_ENT().trim().replace("#", "Ñ") + ' '
										+ solicitud.getNUMVIA_ENT().trim(),
								solicitud.getREFEREN_ENT().trim().replace("#", "Ñ"),
								solicitud.getUBG_ZON_ENT_DEP().replace("#", "Ñ"),
								solicitud.getUBG_ZON_ENT_PRO().replace("#", "Ñ"),
								solicitud.getUBG_ZON_ENT_DIS().replace("#", "Ñ"), solicitud.getPERSONA_AUTOR(),
								solicitud.getTDOCUM_AUTOR(), solicitud.getNDOCUM_AUTOR(), solicitud.getNOMBRE_GRABAR(),
								es_platinum));
						document.add(Chunk.NEXTPAGE);
						document.add(creaTituloDoc(solicitud.getCORRELATIVO(), solicitud.getTIPTARJETA(),
								solicitud.getFCH_SOLICITA(), "2", totpagina));
						document.add(creaDatosTarjetasAdicionales(solicitud.getMAIL_ADI_01(),
								solicitud.getMAIL_ADI_02(), solicitud.getMAIL_ADI_03(), solicitud.getMAIL_ADI_04(),
								solicitud.getTIPOCARDADI_01(), solicitud.getLINECARDADI_01(), " ", " ",
								solicitud.getDISPOS_ADI_01(),
								solicitud.getNOMBR_ADI_01().trim().replace("#", "Ñ") + ' '
										+ solicitud.getAPELL_ADI_01().trim().replace("#", "Ñ"),
								solicitud.getTIPDOC_ADI_01(), solicitud.getNUMDOC_ADI_01(),
								solicitud.getFCHNAC_ADI_01(), solicitud.getSEXO_ADI_01(), solicitud.getTIPOCARDADI_02(),
								solicitud.getLINECARDADI_02(), " ", " ", solicitud.getDISPOS_ADI_02(),
								solicitud.getNOMBR_ADI_02().trim().replace("#", "Ñ") + ' '
										+ solicitud.getAPELL_ADI_02().trim().replace("#", "Ñ"),
								solicitud.getTIPDOC_ADI_02(), solicitud.getNUMDOC_ADI_02(),
								solicitud.getFCHNAC_ADI_02(), solicitud.getSEXO_ADI_02(),
								solicitud.getFECHAOPER_ADI_01(), solicitud.getFECHAOPER_ADI_02(),

								solicitud.getDISPOS_ADI_01(), solicitud.getNOTIFICA_ADI_01(),
								solicitud.getOEXTERIO_ADI_01(), solicitud.getMVIRTUAL_ADI_01(),
								solicitud.getTLF_CEL_ADI_01(),

								solicitud.getDISPOS_ADI_02(), solicitud.getNOTIFICA_ADI_02(),
								solicitud.getOEXTERIO_ADI_02(), solicitud.getMVIRTUAL_ADI_02(),
								solicitud.getTLF_CEL_ADI_02()));

						if (tot_adicionales > 2) {
							document.add(
									creaDatosTarjetasAdic(solicitud.getMAIL_ADI_03(), solicitud.getTIPOCARDADI_03(),
											solicitud.getLINECARDADI_03(), " ", " ", solicitud.getDISPOS_ADI_03(),
											solicitud.getNOMBR_ADI_03().trim().replace("#", "Ñ") + ' '
													+ solicitud.getAPELL_ADI_03().trim().replace("#", "Ñ"),
											solicitud.getTIPDOC_ADI_03(), solicitud.getNUMDOC_ADI_03(),
											solicitud.getFCHNAC_ADI_03(), solicitud.getSEXO_ADI_03(),
											solicitud.getFECHAOPER_ADI_03(), solicitud.getDISPOS_ADI_03(),
											solicitud.getNOTIFICA_ADI_03(), solicitud.getOEXTERIO_ADI_03(),
											solicitud.getMVIRTUAL_ADI_03(), solicitud.getTLF_CEL_ADI_03()));

						}
						if (tot_adicionales > 3) {
							document.add(
									creaDatosTarjetasAdic(solicitud.getMAIL_ADI_04(), solicitud.getTIPOCARDADI_04(),
											solicitud.getLINECARDADI_04(), " ", " ", solicitud.getDISPOS_ADI_04(),
											solicitud.getNOMBR_ADI_04().trim().replace("#", "Ñ") + ' '
													+ solicitud.getAPELL_ADI_04().trim().replace("#", "Ñ"),
											solicitud.getTIPDOC_ADI_04(), solicitud.getNUMDOC_ADI_04(),
											solicitud.getFCHNAC_ADI_04(), solicitud.getSEXO_ADI_04(),
											solicitud.getFECHAOPER_ADI_04(), solicitud.getDISPOS_ADI_04(),
											solicitud.getNOTIFICA_ADI_04(), solicitud.getOEXTERIO_ADI_04(),
											solicitud.getMVIRTUAL_ADI_04(), solicitud.getTLF_CEL_ADI_04()));

						}
						if (Integer.parseInt(totpagina) > 2) {
							document.add(creaLineaAutorizacion());
							document.add(Chunk.NEXTPAGE);
							document.add(creaTituloDoc(solicitud.getCORRELATIVO(), solicitud.getTIPTARJETA(),
									solicitud.getFCH_SOLICITA(), "3", totpagina));
							document.add(creaUsoInterno(solicitud.getNOM_TECNICO().replace("#", "Ñ"),
									solicitud.getCODCTR_EVA(), solicitud.getNTELEF_DEPEND(),
									solicitud.getNOM_FUNCIONARIO().replace("#", "Ñ"), solicitud.getCODFUNCION(), " ",
									solicitud.getNOM_AGENCIA().replace("#", "Ñ"), solicitud.getCOD_AGENCIA(),
									solicitud.getLINCRE_GLB(), " "));
							document.add(creaFirmas());
						} else {
							document.add(creaUsoInterno(solicitud.getNOM_TECNICO().replace("#", "Ñ"),
									solicitud.getCODCTR_EVA(), solicitud.getNTELEF_DEPEND(),
									solicitud.getNOM_FUNCIONARIO().replace("#", "Ñ"), solicitud.getCODFUNCION(), " ",
									solicitud.getNOM_AGENCIA().replace("#", "Ñ"), solicitud.getCOD_AGENCIA(),
									solicitud.getLINCRE_GLB(), " "));
							document.add(creaFirmas());
							document.add(creaLineaAutorizacion());
						}

					} catch (DocumentException e) {

					}

					document.close();

					// baos.writeTo(bos);

					byte[] ba = baos.toByteArray();

					// Enviar correo electronico

					ServiceMessageProxy serviceMessage = new ServiceMessageProxy();

					String urlSimm = getServiceSimmAdress();
					// Seteo url del Cliente Simm
					serviceMessage._getDescriptor().setEndpoint(urlSimm);

					RequestMessage requestMessage = new RequestMessage();
					ReqListMessage rm = new ReqListMessage();
					ReqListMessage[] reqListMessage;
					reqListMessage = new ReqListMessage[1];

					Adjunto adjunto = new Adjunto();
					adjunto.setFlagAdjunto(1);

					adjunto.setDocAdjunto(ba);
					DatosCorreo datosCorreo = new DatosCorreo();
					datosCorreo.setAsunto(Constante.ASUNTO_TCSOLICITUD);
					datosCorreo.setCorreoDestinatario(solicitud.getMAIL());

					DatosParametro datosParametro = new DatosParametro();
					datosParametro
							.setParametro1((solicitud.getAPELLTIT()).trim() + " " + (solicitud.getNOMBRTIT()).trim());

					rm.setAdjunto(adjunto);
					rm.setDatosCorreo(datosCorreo);
					rm.setDatosParametro(datosParametro);
					reqListMessage[0] = rm;
					requestMessage.setCodRequermiento(Constante.REQUE_SOLICITD);
					// requestMessage.setCodRequermiento(97);
					ArrayOfTns1ReqListMessage array = new ArrayOfTns1ReqListMessage();
					List<ReqListMessage> arrayList = new ArrayList<ReqListMessage>();
					arrayList.add(rm);
					array.setItem(arrayList);
					requestMessage.setReqListMessage(array);

					try {
						System.out.println("Envia WS SIMM");

						// serviceMessage.sendMessage(requestMessage);
						serviceMessage.sendMessageAsync(requestMessage);

						ResponseMessage respuesta = new ResponseMessage();

						respuesta.getCodRetorno();

					} catch (Exception e) {
						e.printStackTrace();
						System.out.println("no se pudo enviar el mensaje");
						System.out.println(e.getMessage());
						// log.error(e, "122", e.getMessage());

					}

					Calendar fecha = new GregorianCalendar();

					int ano = fecha.get(Calendar.YEAR);
					int mes = (fecha.get(Calendar.MONTH)) + 1;
					int dia = fecha.get(Calendar.DAY_OF_MONTH);

					String anoo = String.valueOf(ano);
					String mess = String.valueOf(mes);
					String diaa = String.valueOf(dia);

					if (mess.length() == 1) {
						mess = "0" + mess;
					}
					if (diaa.length() == 1) {
						diaa = "0" + diaa;
					}
					String fechaEnv = diaa + "/" + mess + "/" + anoo;

					int hora = fecha.get(Calendar.HOUR_OF_DAY);
					int min = fecha.get(Calendar.MINUTE);
					int seg = fecha.get(Calendar.SECOND);

					String horaEnv = hora + ":" + min + ":" + seg;
					String horaLec = "";
					String fechaLec = "";
					String ipLec = "";
					String estado = "";
					String campo1 = "";
					String campo2 = "";

					String solicitudInsert = cargarTarjetaSolicitud.tarjetaSolicitud(solicitud.getNUMDOC(), "SOLICITUD",
							ba, solicitud.getMAIL(), fechaEnv, horaEnv, fechaLec, horaLec, ipLec, estado, campo1,
							campo2);

				}
			} catch (Exception io) {
				io.printStackTrace();
			}

			request.setAttribute("msje1", "Error 20");
			path = View.returnJsp(model, "tarjeta/solicitud");

		}
		System.out.println("Compiling report…");

		return path;

	}

	@RequestMapping("consultaTC")
	public String consultaTC(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "consulta/consultaTC");

		return path;

	}

	@RequestMapping("consultaPM")
	public String consultaPM(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "consulta/consultaPM");

		return path;

	}

	@RequestMapping("consultaImagen")
	public String consultaImagen(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "consulta/consultaImagen");

		return path;

	}

	@RequestMapping("actualizar")
	public String actualizar(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "consulta/actualizar");

		return path;

	}

	@RequestMapping("administrarSeguro")
	public String administrarSeguro(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "administrador/administrarSeguro");

		return path;

	}

	@RequestMapping("consultaPR")
	public String consultaPR(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "consulta/consultaPR");

		return path;

	}

	@RequestMapping("cancelacion")
	public String cancelacion(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "tarjeta/cancelacion");

		return path;

	}

	@RequestMapping("polizaG")
	public String polizaG(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI
		System.out.print("PRUEBA");

		// Capturando DNI

		String tipo = request.getParameter("tipo");
		String numero = request.getParameter("numero");

		RequestMensajeHost host = new RequestMensajeHost();

		BnPoliza solicitud = null;

		// solicitud =
		// host.getSolicitud(numero,datosSesion.getCodigoHost().toUpperCase());

		solicitud = host.getPoliza(tipo, numero, "pjmo");

		// request.setAttribute("creditos", solicitud);

		if ((((solicitud.getAPELLTIT()).trim()).equals(""))) {

			request.setAttribute("msje", "Error 99");
		} else {

			if ((solicitud.getCODRESP().equals("98"))) {

				request.setAttribute("msje", "Error 98");
			} else {

				if ((solicitud.getCODRESP().equals("14"))) {

					request.setAttribute("msje", "Error 14");
				} else {

					if ((solicitud.getCODRESP().equals("50"))) {

						request.setAttribute("msje", "Error 50");
					} else {
						// request.setAttribute("msje","Haga Clic en Abrir para Confirmar la
						// Exportación");
						request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");
						request.setAttribute("solicitud", solicitud);

					}

				}

			}

		}

		path = View.returnJsp(model, "tarjeta/poliza");

		return path;

	}

	// -----------------------------------------------------------------------------------------------------------------
	// TOOD VALIDAR CORREO
	@RequestMapping("validarCorreo")
	public String validarCorreo(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI

		String tipo = request.getParameter("tipo");
		String numero = request.getParameter("numero");

		System.out.print("PRUEBA");

		RequestMensajeHost host = new RequestMensajeHost();

		BnSolicitud solicitud = null;

		// solicitud =
		// host.getSolicitud(numero,datosSesion.getCodigoHost().toUpperCase());
		
		solicitud = host.getSolicitud(tipo, numero, "pjmo");

		String codResult = "";
		// hirostar
		// --------------------------------------------------------------------

		ConfiguracionTarjetaRequestTemp configuracionTarjetaRequestTemp = new ConfiguracionTarjetaRequestTemp();

		// hiro
		String[] country = "PE,CL,RF,DG,FF".split(",");
		GuardarTarjetaRequest guardarTarjetaRequest = new GuardarTarjetaRequest();

		ComprasInternet comprasInternet = new ComprasInternet();
		ComprasExtranjero comprasExtranjero = new ComprasExtranjero();
		Notificacion notificacion = new Notificacion();
		CashDispositionSettings disposicionEfectivo = new CashDispositionSettings();

		guardarTarjetaRequest.setTypeCard("2");// DEFAULT
		guardarTarjetaRequest.setTypeClient("T");// si o si es titular SIEMPRE
													// DEFAULT
		guardarTarjetaRequest.setNumberCard(numero.trim());
		guardarTarjetaRequest.setTypeDocument(solicitud.getTIPDOC());
		guardarTarjetaRequest.setNumberDocument(solicitud.getNUMDOC());
		guardarTarjetaRequest.setEmail(solicitud.getMAIL());
		guardarTarjetaRequest.setOperatorType("1");

		guardarTarjetaRequest.setCellNumber(solicitud.getTLFCELL().substring(1, (solicitud.getTLFCELL().length())));

		comprasInternet.setStatus(solicitud.getMVIRTUAL().equalsIgnoreCase("S") ? "1" : "0");
		comprasInternet.setTypeMoney("S");
		comprasInternet.setTypeAmount(" ");
		comprasInternet.setMeansNotification("1");
		comprasInternet.setAmount("0");

		// comprasExtranjero.setStatus(solicitud.getOEXTERIO().equalsIgnoreCase("S")?
		// "1" :"0" );//0
		comprasExtranjero.setStatus("0");// Pues va ir por defecto
		comprasExtranjero.setTypeMoney("S");
		comprasExtranjero.setAmount("0");
		comprasExtranjero.setTypeAmount(" ");
		comprasExtranjero.setDateDeparture(null);
		comprasExtranjero.setDateReturn(null);

		comprasExtranjero.setCountry(null);

		notificacion.setStatus(solicitud.getNOTIFICA().equalsIgnoreCase("S") ? "1" : "0");// 0
		// tambien va ir por defecto en 0
		notificacion.setTypeMoney("S");
		notificacion.setAmount("0");// MONTO MINIMO
		notificacion.setTypeAmount(" ");
		notificacion.setMeansNotification("2");

		disposicionEfectivo.setStatus(solicitud.getDISPOS().equalsIgnoreCase("S") ? "1" : "0");// 0
		disposicionEfectivo.setTypeMoney("S");
		disposicionEfectivo.setTypeAmount(" ");
		disposicionEfectivo.setAmount("0");

		guardarTarjetaRequest.setCashDispositionSettings(disposicionEfectivo);
		guardarTarjetaRequest.setShoppingAbroadSettings(comprasExtranjero);
		guardarTarjetaRequest.setShoppingInternetSettings(comprasInternet);
		guardarTarjetaRequest.setNotificationSettings(notificacion);

		GuardarTarjetaResponse respuesta = new GuardarTarjetaResponse();
		String resultado = "";

		if ((((solicitud.getAPELLTIT()).trim()).equals(""))) {

			request.setAttribute("msje", "Error 99");
		} else {

			if ((solicitud.getCODRESP().equals("98"))) {

				request.setAttribute("msje", "Error 98");
			} else {

				if ((solicitud.getCODRESP().equals("14"))) {

					request.setAttribute("msje", "Error 14");
				} else {

					if ((solicitud.getCODRESP().equals("50"))) {

						request.setAttribute("msje", "Error 50");
					} else {

						request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");

						request.setAttribute("solicitud", solicitud);

					}

				}

			}

		}
		path = View.returnJsp(model, "tarjeta/solicitud");
		return path;

	}

	// -----------------------------------------------------------------------------------------------------------------

	@RequestMapping("solicitudG")
	public String solicitudG(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI

		String tipo = request.getParameter("tipo");
		String numero = request.getParameter("numero");

		System.out.print("PRUEBA");

		RequestMensajeHost host = new RequestMensajeHost();

		BnSolicitud solicitud = null;

		// solicitud =
		// host.getSolicitud(numero,datosSesion.getCodigoHost().toUpperCase());

		solicitud = host.getSolicitud(tipo, numero, "pjmo");

		String codResult = "";
		// hirostar
		// --------------------------------------------------------------------

		ConfiguracionTarjetaRequestTemp configuracionTarjetaRequestTemp = new ConfiguracionTarjetaRequestTemp();

		// hiro
		String[] country = "PE,CL,RF,DG,FF".split(",");
		GuardarTarjetaRequest guardarTarjetaRequest = new GuardarTarjetaRequest();

		ComprasInternet comprasInternet = new ComprasInternet();
		ComprasExtranjero comprasExtranjero = new ComprasExtranjero();
		Notificacion notificacion = new Notificacion();
		CashDispositionSettings disposicionEfectivo = new CashDispositionSettings();

		guardarTarjetaRequest.setTypeCard("2");// DEFAULT
		guardarTarjetaRequest.setTypeClient("T");// si o si es titular SIEMPRE
													// DEFAULT
		guardarTarjetaRequest.setNumberCard(numero.trim());
		guardarTarjetaRequest.setTypeDocument(solicitud.getTIPDOC());
		guardarTarjetaRequest.setNumberDocument(solicitud.getNUMDOC());
		guardarTarjetaRequest.setEmail(solicitud.getMAIL());
		guardarTarjetaRequest.setOperatorType("1");

		guardarTarjetaRequest.setCellNumber(solicitud.getTLFCELL().substring(1, (solicitud.getTLFCELL().length())));

		comprasInternet.setStatus(solicitud.getMVIRTUAL().equalsIgnoreCase("S") ? "1" : "0");
		comprasInternet.setTypeMoney("S");
		comprasInternet.setTypeAmount(" ");
		comprasInternet.setMeansNotification("1");
		comprasInternet.setAmount("0");

		// comprasExtranjero.setStatus(solicitud.getOEXTERIO().equalsIgnoreCase("S")?
		// "1" :"0" );//0
		comprasExtranjero.setStatus("0");// Pues va ir por defecto
		comprasExtranjero.setTypeMoney("S");
		comprasExtranjero.setAmount("0");
		comprasExtranjero.setTypeAmount(" ");
		comprasExtranjero.setDateDeparture(null);
		comprasExtranjero.setDateReturn(null);

		comprasExtranjero.setCountry(null);

		notificacion.setStatus(solicitud.getNOTIFICA().equalsIgnoreCase("S") ? "1" : "0");// 0
		// tambien va ir por defecto en 0
		notificacion.setTypeMoney("S");
		notificacion.setAmount("0");// MONTO MINIMO
		notificacion.setTypeAmount(" ");
		notificacion.setMeansNotification("2");

		disposicionEfectivo.setStatus(solicitud.getDISPOS().equalsIgnoreCase("S") ? "1" : "0");// 0
		disposicionEfectivo.setTypeMoney("S");
		disposicionEfectivo.setTypeAmount(" ");
		disposicionEfectivo.setAmount("0");

		guardarTarjetaRequest.setCashDispositionSettings(disposicionEfectivo);
		guardarTarjetaRequest.setShoppingAbroadSettings(comprasExtranjero);
		guardarTarjetaRequest.setShoppingInternetSettings(comprasInternet);
		guardarTarjetaRequest.setNotificationSettings(notificacion);

		GuardarTarjetaResponse respuesta = new GuardarTarjetaResponse();
		String resultado = "";

		/*
		 * 
		 * 
		 * try {
		 * 
		 * ObjectMapper objectMapper = new ObjectMapper(); String jsonRequest =
		 * objectMapper.writeValueAsString(guardarTarjetaRequest); String result="";
		 * 
		 * System.out.println("Request enviado"); System.out.println(jsonRequest);
		 * log.debug("JSON enviado: " + jsonRequest, Constant.LOGGER_DEBUG_NIVEL_1);
		 * 
		 * 
		 * //pasandole la url del microservicio en duro String url =
		 * getServiceGuardarTarjetaAdress(); //String url =
		 * "http://10.7.12.75:80/cardconfigurationmanagement/card/save/configuration/" ;
		 * 
		 * HttpURLConnection postConnection = (HttpURLConnection) new
		 * URL(url).openConnection();
		 * 
		 * 
		 * // Parámetros de timeout postConnection.setConnectTimeout(5 * 1000);
		 * postConnection.setRequestMethod("POST");
		 * 
		 * // Seteo de headers. postConnection.setRequestProperty("Application",
		 * "MODC"); postConnection.setRequestProperty("Channel", "WEB");
		 * postConnection.setRequestProperty("Content-Type", "application/json");
		 * postConnection.setRequestProperty("ChannelCode", "1");
		 * postConnection.setDoOutput(true);
		 * 
		 * // Llamada y envío de json body OutputStream os =
		 * postConnection.getOutputStream(); os.write(jsonRequest.getBytes());
		 * os.flush(); os.close();
		 * 
		 * // Exception // En caso el status code sea != 200 int statusCode =
		 * postConnection.getResponseCode();
		 * 
		 * if (statusCode != 200) { // Retorna al log con todos sus valores //renornar
		 * mensaje de error System.out.println("Error de servicio " + statusCode); }
		 * 
		 * 
		 * // JSON respuesta BufferedReader buffReader = new BufferedReader(new
		 * InputStreamReader(postConnection.getInputStream())); String inputLine;
		 * StringBuilder strBuilder = new StringBuilder();
		 * 
		 * while ((inputLine = buffReader.readLine()) != null) {
		 * strBuilder.append(inputLine); }
		 * 
		 * buffReader.close();
		 * 
		 * result = strBuilder.toString();
		 * 
		 * // Convertir el objeto JSON ObjectMapper mapper = new ObjectMapper();
		 * LinkedHashMap<?, ?> clientResponse = mapper.readValue(result,
		 * LinkedHashMap.class);
		 * 
		 * codResult = (String) clientResponse.get("codResult"); resultado=codResult;
		 * log.debug("Codigo de Solicitud: " + codResult,
		 * Constant.LOGGER_DEBUG_NIVEL_1);
		 * 
		 * //codResult="0000"; // solicitud.setRESPUESTA(codResult); //
		 * request.setAttribute("respuesta",codResult);
		 * 
		 * if(!"0000".equals(codResult)){ respuesta.setCodResult(codResult);
		 * respuesta.setMsg("Error en el servicio");
		 * respuesta.setMsgError("Error al guardar en el servicio");
		 * System.out.println(respuesta); //throw new Exception("Error");
		 * 
		 * }
		 * 
		 * System.out.println("Codigo de respuesta"); System.out.println(codResult);
		 * request.setAttribute("respuesta",codResult);
		 * 
		 * 
		 * } catch (Exception e) {
		 * 
		 * solicitud.setRESPUESTA(resultado);
		 * request.setAttribute("respuesta",resultado); //
		 * respuesta.setCodResult(resultado); respuesta.setMsg("Error en el servicio");
		 * respuesta.setMsgError("Error al guardar en el servicio");
		 * System.out.println(respuesta); e.printStackTrace();
		 * 
		 * //throw e;
		 * 
		 * }
		 */

		// request.setAttribute("creditos", solicitud);

		if ((((solicitud.getAPELLTIT()).trim()).equals(""))) {

			request.setAttribute("msje", "Error 99");
		} else {

			if ((solicitud.getCODRESP().equals("98"))) {

				request.setAttribute("msje", "Error 98");
			} else {

				if ((solicitud.getCODRESP().equals("14"))) {

					request.setAttribute("msje", "Error 14");
				} else {

					if ((solicitud.getCODRESP().equals("50"))) {

						request.setAttribute("msje", "Error 50");
					} else {

						request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");

						// if("0000".equals(codResult)){
						// request.setAttribute("respuesta","IZIPAY ACTIVO");
						// request.setAttribute("msje","Haga Clic en Abrir para Confirmar la
						// Exportación");

						// }else{
						// request.setAttribute("msje","Haga Clic en Abrir para Confirmar la
						// Exportación");
						// request.setAttribute("respuesta","Error 60");
						// El error 60 significa que es que no hay servicio en
						// IZIPAY

						// }

						request.setAttribute("solicitud", solicitud);

					}

				}

			}

		}
		path = View.returnJsp(model, "tarjeta/solicitud");
		return path;

	}

	// TODO tarjeta / solicitud
	@RequestMapping("solicitud")
	public String solicitud(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "tarjeta/solicitud");

		return path;
	}

	@RequestMapping("cancelacionG")
	public String cancelacionG(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// Capturando DNI

		// String tipo = request.getParameter("tipo");
		String numero = request.getParameter("numero");

		RequestMensajeHost host = new RequestMensajeHost();

		BnCancelacion cancelacion = null;

		cancelacion = host.getCancelacion(numero, "pjmo");

		if (((cancelacion.getNUMPAGARE()) == null)) {

			request.setAttribute("msje", "Error 99");
		} else {

			if ((cancelacion.getCODRESP().equals("98"))) {

				request.setAttribute("msje", "Error 98");
			} else {

				if ((cancelacion.getCODRESP().equals("14"))) {

					request.setAttribute("msje", "Error 14");
				} else {

					if ((cancelacion.getCODRESP().equals("50"))) {

						request.setAttribute("msje", "Error 50");
					} else {
						request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");
						request.setAttribute("cancelacion", cancelacion);
					}

				}

			}
		}
		path = View.returnJsp(model, "tarjeta/cancelacion");

		return path;

	}

	@RequestMapping(value = "exCancelacion", method = RequestMethod.POST)
	public void exportaCancelacion(HttpServletRequest request, HttpServletResponse response) throws Exception {

		System.out.println("eors_individual");
		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String valor1 = request.getParameter("numero");
		String es_platinum = " ";

		RequestMensajeHost host = new RequestMensajeHost();

		BnCancelacion cancelacion = null;

		cancelacion = host.getCancelacion(valor1, "pjmo");

		// GENERACION DE PDF

		String via;
		if (cancelacion.getCODVIA().equals("01")) {
			via = "AVENIDA";
		} else {
			if (cancelacion.getCODVIA().equals("02")) {
				via = "JIRON";
			} else {
				if (cancelacion.getCODVIA().equals("03")) {
					via = "CALLE";
				} else {
					if (cancelacion.getCODVIA().equals("04")) {
						via = "PASAJE";
					} else {
						if (cancelacion.getCODVIA().equals("05")) {
							via = "ALAMEDA";
						} else {
							if (cancelacion.getCODVIA().equals("06")) {
								via = "MALECON";
							} else {
								if (cancelacion.getCODVIA().equals("07")) {
									via = "OVALO";
								} else {
									if (cancelacion.getCODVIA().equals("08")) {
										via = "PARQUE";
									} else {
										if (cancelacion.getCODVIA().equals("09")) {
											via = "PLAZA";
										} else {
											if (cancelacion.getCODVIA().equals("10")) {
												via = "CARRETERA";
											} else {
												if (cancelacion.getCODVIA().equals("11")) {
													via = "BLOCK";
												} else {
													via = "NO DEFINIDO";
												}

											}
										}
									}
								}
							}
						}
					}
				}
			}

		}

		if (cancelacion.getSDSBOLSO() == null) {
			cancelacion.setSDSBOLSO("00.00");
		}

		if (cancelacion.getSDEUDA_T() == null) {
			cancelacion.setSDEUDA_T("00.00");
		}

		if (cancelacion.getSTASA_TA() == null) {
			cancelacion.setSTASA_TA("00.00");
		}

		if (cancelacion.getSCUOTA() == null) {
			cancelacion.setSCUOTA("00.00");
		}

		try {
			String archivo = "Cancelacion";
			Map parameters = new HashMap();
			parameters.put("Cuenta1", valor1);

			JasperReport jasperReport = null;
			String type = "pdf";

			Collection<?> list;
			String exportFile = "prueba";

			type = (type == null) ? "html" : type;

			if (type.equals("pdf")) {
				response.setContentType("application/pdf");
				response.addHeader("Content-Disposition",
						"attachment; filename=" + "Cancelacion de Tarjeta de Crédito.pdf");

				// -->> itext
				Document document = new Document();
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				try {
					PdfWriter.getInstance(document, baos);
				} catch (DocumentException e) {

				}
				document.open();

				try {
					// document.add(creaTituloDoc1(valor1,
					// datosSesion.getCodigoHost().toUpperCase(),
					// cuentas1.getNOMAPE(),
					// cuentas1.getFREFINAN(),cuentas1.getFCANCEL(),cuentas1.getNDNI(),cuentas1.getEMAIL(),cuentas1.getDIRECCION(),
					// cuentas1.getNUMPOLIZA(), cuentas1.getPERIODO()));

					// W-STASA-TA : 10 [+0016.0000]

					document.add(creaCancelacion(valor1, cancelacion.getAPELLTIT(), cancelacion.getNOMBRTIT(),
							cancelacion.getTLFCASA(), cancelacion.getNOB_VIA_LAB(), cancelacion.getMAIL().trim(),
							cancelacion.getNUMPAGARE(), cancelacion.getFDSBOLSO(), cancelacion.getSDSBOLSO(),
							cancelacion.getFSOLICITUD(), cancelacion.getSDEUDA_T(), cancelacion.getSTASA_TA(),
							cancelacion.getNCUOTA_T(), cancelacion.getSCUOTA(), cancelacion.getSTASA_T(), via,
							cancelacion.getNOMVIA().trim(), cancelacion.getNUMVIA().trim(), cancelacion.getTLFCELL()));

				} catch (DocumentException e) {

				}
				// System.out.println("eors:PolizaIndividual:2");
				document.close();

				// setting some response headers
				response.setHeader("Expires", "0");
				response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
				response.setHeader("Pragma", "public");
				// setting the content type
				response.setContentType("application/pdf");
				// the contentlength
				response.setContentLength(baos.size());
				// write ByteArrayOutputStream to the ServletOutputStream
				ServletOutputStream os = response.getOutputStream();
				baos.writeTo(os);
			}
		} catch (Exception io) {
			io.printStackTrace();
		}
		System.out.println("Compiling report…");
	}

	public static PdfPTable creaCancelacion(String dni, String APELLTIT, String NOMBRTIT, String TLFCASA,
			String NOB_VIA_LAB, String MAIL, String NUMPAGARE, String FDSBOLSO, String SDSBOLSO, String FSOLICITUD,
			String SDEUDA_T, String STASA_TA, String NCUOTA_T, String SCUOTA, String STASA_T, String via, String NOMVIA,
			String NUMVIA, String TLFCELL) {
		// a table with three columns
		// fechaSolic = fechaSolic.substring(6,8) + "/"+
		// fechaSolic.substring(4,6) + "/" + fechaSolic.substring(0,4);
		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		// we add a cell with colspan 3

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(""));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("     SOLICITUD DE PAGO TOTAL DE PRÉSTAMO MULTIRED CON CARGO A LA",
				FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("LÍNEA DE LA TARJETA DE CRÉDITO",
				FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SEÑORES", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("BANCO DE LA NACION ", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("PRESENTE.-", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"ME DIRIJO A USTEDES A FIN DE SOLICITARLES EL PAGO TOTAL DEL PRÉSTAMO MULTIRED (EN ADELANTE EL PRÉSTAMO) QUE ME FUE OTORGADO BAJO EL SIGUIENTE DETALLE:",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("N° DE PRÉSTAMO:", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setColspan(4);
		table.addCell(cell);
		table.addCell("   " + NUMPAGARE);

		cell = new PdfPCell(new Phrase("FECHA EN QUE SE OTORGÓ EL PRÉSTAMO (DD/MM/AA):",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setColspan(4);
		table.addCell(cell);
		table.addCell("   " + FDSBOLSO);

		cell = new PdfPCell(new Phrase("MONTO TOTAL DEL PRÉSTAMO OTORGADO:",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setColspan(4);
		table.addCell(cell);

		// fio

		double montoP = Double.parseDouble(SDSBOLSO);

		String montot = Funciones.formatearMonto3(montoP);
		table.addCell("   " + "S/." + montot);

		cell = new PdfPCell(new Phrase("FECHA DE LA PRESENTE SOLICITUD (DD/MM/AA):",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setColspan(4);
		table.addCell(cell);
		table.addCell("   " + FSOLICITUD);

		cell = new PdfPCell(new Phrase("MONTO PENDIENTE DE PAGO A LA FECHA:",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setColspan(4);
		table.addCell(cell);

		double montoPe = Double.parseDouble(SDEUDA_T);
		String montoPen = Funciones.formatearMonto3(montoPe);
		table.addCell("   " + "S/." + montoPen);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"EL PAGO TOTAL DEL PRÉSTAMO (INCLUYE COMISIONES, INTERESES COMPENSATORIOS, PRIMA DE SEGURO DE DESGRAVAMEN A LA FECHA DE PAGO),  SE REALIZARÁ CON CARGO A LA LÍNEA DE TARJETA DE CRÉDITO QUE EL BANCO ME HA OTORGADO, OPERACIÓN QUE, DE ACUERDO A LO INFORMADO DE MANERA PREVIA POR EL BANCO DE LA NACIÓN AL SUSCRITO, TENDRÁ UNA TASA DE INTERÉS COMPENSATORIA (T.E.A.), DISTINTA A LA TASA DE INTERÉS COMPENSATORIA POR OPERACIONES DE DISPOSICIÓN DE EFECTIVO Y COMPRAS DE LA TARJETA DE CRÉDITO Y QUE SERÁ OTORGADA POR EL BANCO DE MANERA EXCEPCIONAL, POR ÚNICA VEZ.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"LA TASA DE COSTO EFECTIVA ANUAL (TCEA) Y DEMÁS CONDICIONES DE ESTA OPERACIÓN DE PAGO, SON LAS SIGUIENTES: ",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		PdfPCell cell1, cell2, cell3, cell4, cell5;
		cell1 = new PdfPCell(new Phrase("  TEA                                     " + "      " + "FIJA (%)",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell2 = new PdfPCell(new Phrase("  T.C.E.A.                                     (%)",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell3 = new PdfPCell(new Phrase(" PAGO TOTAL CON CARGO A LA LINEA       DE CREDITO ",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell4 = new PdfPCell(new Phrase("  NÚMERO DE                     CUOTAS",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell5 = new PdfPCell(new Phrase("   MONTO CUOTA                               (S/.)",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(5);

		table.addCell(cell1);
		table.addCell(cell2);
		table.addCell(cell3);
		table.addCell(cell4);
		table.addCell(cell5);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);

		double stasata = Double.parseDouble(STASA_TA.replace("+", ""));
		String stasat = Funciones.formatearMonto3(stasata);
		// tienen que ser iguales tea y teca

		table.addCell("           " + stasat);
		table.addCell("           " + stasat);
		table.addCell("        " + montoPen);
		table.addCell("              " + Funciones.elmiminarCerosAlaIzquierda(NCUOTA_T));

		// fio
		double montoCuo = Double.parseDouble(SCUOTA);

		String montoCuota = Funciones.formatearMonto3(montoCuo);
		table.addCell("           " + montoCuota);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"DE IGUAL FORMA, DECLARO HABER SIDO INFORMADO POR EL BANCO Y TENER PLENO CONOCIMIENTO QUE SI CONTRAIGO NUEVAS OBLIGACIONES CON MI TARJETA DE CRÉDITO (DISPOSICIÓN DE EFECTIVO, COMPRAS) DEBO PAGAR EL IMPORTE DE LOS INTERESES, COMISIONES, GASTOS QUE HAYAN SIDO GENERADOS POR SU USO, JUNTO CON EL MONTO (CUOTA) CORRESPONDIENTE AL CARGO DE LA LÍNEA DE TARJETA DE CRÉDITO POR EL PAGO TOTAL DEL PRÉSTAMO A QUE SE REFIERE EL PRESENTE DOCUMENTO, HASTA SU TOTAL CANCELACIÓN. ",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"EL DETALLE DE LAS CUOTAS PAGADAS Y PENDIENTES DE PAGO, COMISIONES Y GASTOS DE LA TARJETA DE CRÉDITO, SE INFORMARÁ A TRAVÉS DEL ESTADO DE CUENTA MENSUAL. ",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("1/2", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"SUSCRIBO EL PRESENTE DOCUMENTO EN SEÑAL DE PLENA CONFORMIDAD CON SU CONTENIDO Y AUTORIZO EL PAGO TOTAL DEL PRESTAMO CON CARGO A LA  LINEA DE LA TARJETA DE CREDITO OTORGADA POR EL BANCO DE LA NACIÓN.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("ATENTAMENTE,", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("----------------------------------------------------       HUELLA:",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("     EL SUSCRITO / CLIENTE ", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("NOMBRES Y APELLIDOS COMPLETOS : " + APELLTIT.trim() + " " + NOMBRTIT,
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(
				new Phrase("DNI             :          " + dni, FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("TELÉFONO:          " + Funciones.elmiminarCerosAlaIzquierda(TLFCASA),
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CELULAR   :          " + Funciones.elmiminarCerosAlaIzquierda(TLFCELL),
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("DOMICILIO :          " + via + " " + NOMVIA + " " + NUMVIA,
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("EMAIL         :          " + MAIL.replace(" ", "@"),
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"FIRMA Y SELLO DEL(LOS) REPRESENTANTE(S) DEL BANCO DE LA NACIÓN EN SEÑAL DE ACEPTACIÓN DE LA PRESENTE SOLICITUD:",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"----------------------------------------------------                                    ----------------------------------------------------",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2/2", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(5);
		table.addCell(cell);
		return table;
	}

	public static PdfPTable creaTituloPoliza(String numeroSolic, String tipotarjeta, String fechaSolic, String paginas,
			String totalpag) {
		// a table with three columns
		fechaSolic = fechaSolic.substring(6, 8) + "/" + fechaSolic.substring(4, 6) + "/" + fechaSolic.substring(0, 4);
		PdfPTable table = new PdfPTable(3);
		table.setTotalWidth(PageSize.A4.getWidth() - 50);
		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		// we add a cell with colspan 3
		cell = new PdfPCell(
				new Phrase("SOLICITUD DEPOLIZA", FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);
		// now we add a cell with rowspan 2
		cell = new PdfPCell(new Phrase(""));
		cell.setBorder(Rectangle.NO_BORDER);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("Nº " + numeroSolic, FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);
		cell = new PdfPCell(
				new Phrase(paginas.trim() + "/" + totalpag.trim(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(""));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Tipo de Tarjeta " + tipotarjeta, FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(""));
		cell.setBorder(Rectangle.NO_BORDER);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("Fecha de Solicitud: " + fechaSolic,
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(""));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setColspan(3);
		table.addCell(cell);
		return table;
	}

	public static PdfPTable creaTituloDoc(String numeroSolic, String tipotarjeta, String fechaSolic, String paginas,
			String totalpag) {
		// a table with three columns
		fechaSolic = fechaSolic.substring(6, 8) + "/" + fechaSolic.substring(4, 6) + "/" + fechaSolic.substring(0, 4);
		PdfPTable table = new PdfPTable(3);
		table.setTotalWidth(PageSize.A4.getWidth() - 50);
		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		// we add a cell with colspan 3
		cell = new PdfPCell(new Phrase("SOLICITUD DE TARJETA DE CREDITO",
				FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);
		// now we add a cell with rowspan 2
		cell = new PdfPCell(new Phrase(""));
		cell.setBorder(Rectangle.NO_BORDER);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("Nº " + numeroSolic, FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);
		cell = new PdfPCell(
				new Phrase(paginas.trim() + "/" + totalpag.trim(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(""));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Tipo de Tarjeta " + tipotarjeta, FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(""));
		cell.setBorder(Rectangle.NO_BORDER);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase("Fecha de Solicitud: " + fechaSolic,
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(""));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setColspan(3);
		table.addCell(cell);
		return table;
	}

	public static PdfPTable creaDatosTitular(String via, String nombres, String tipodoc, String documento,
			String fechanac, String sexo, String estcivil, String profesion, String telefono, String celular,
			String tipovivienda, String nrodepend, String direccion, String distrito, String provincia,
			String departamento, String referencia, String eleccion, String email, String refpersonal,
			String telefonos) {
		// a table with three columns
		telefonos = telefonos.replaceFirst("^0*", "");
		telefono = telefono.replaceFirst("^0*", "");
		celular = celular.replaceFirst("^0*", "");
		if (fechanac.trim().equals(""))
			fechanac = "";
		else
			fechanac = fechanac.substring(6, 8) + "-" + fechanac.substring(4, 6) + "-" + fechanac.substring(0, 4);
		if (tipodoc.trim().equals("1")) {
			tipodoc = "DNI";
		}
		if (estcivil.trim().equals("S")) {
			estcivil = "Soltero";
		} else if (estcivil.trim().equals("C")) {
			estcivil = "Casado";
		} else if (estcivil.trim().equals("V")) {
			estcivil = "Viudo";
		} else if (estcivil.trim().equals("D")) {
			estcivil = "Divorciado";
		}
		if (sexo.trim().equals("M")) {
			sexo = "Masculino";
		} else {
			sexo = "Femenino";
		}

		if (eleccion.trim().equals("1")) {
			eleccion = "Domicilio";
		} else if (eleccion.trim().equals("2")) {
			eleccion = "Centro Laboral";
		} else if (eleccion.trim().equals("3")) {
			eleccion = "Correo";
		} else if (eleccion.trim().equals("4")) {
			eleccion = "Domicilio/Correo";
		} else if (eleccion.trim().equals("5")) {
			eleccion = "C.Laboral/Correo";
		}

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 50);
		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		// we add a cell with colspan 3
		cell = new PdfPCell(new Phrase("1.DATOS DE TITULAR",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);
		// now we add a cell with rowspan 2
		cell = new PdfPCell(
				new Phrase("Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(nombres, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Documento de Identidad", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Estado Civil", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Sexo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(tipodoc + " " + documento, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(fechanac, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(estcivil, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(sexo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		/*******/

		cell = new PdfPCell(new Phrase("Profesion", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Teléfono Domicilio", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Teléfono Celular", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Tipo de Vivienda", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Nº Dependientes", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(profesion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(telefono, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(celular, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(tipovivienda, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(nrodepend, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		/*****/
		cell = new PdfPCell(new Phrase("Dirección", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		/******/
		cell = new PdfPCell(new Phrase("Distrito", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Provincia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Departamento", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(distrito, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(provincia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(departamento, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		/*****/
		cell = new PdfPCell(new Phrase("Referencia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(referencia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		/******/
		cell = new PdfPCell(new Phrase("Elección de Entrega de Estado de cuenta",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Correo electrónico", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(eleccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(email, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		/******/
		cell = new PdfPCell(
				new Phrase("Referencia Personal", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Telefonos", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(refpersonal, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(telefonos, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);
		return table;

	}

	public static PdfPTable creaDatosLaborales(String codvia, String ruc, String entidad, String sector,
			String condicionlab, String cargoact, String fechaingreso, String ingreso, String telefonoanexo,
			String direccion, String distrito, String provincia, String departamento) {
		// a table with three columns
		DecimalFormat formatter = new DecimalFormat("#,##0.00");
		Pattern pattern = Pattern.compile(".*[^0-9].*");
		telefonoanexo = telefonoanexo.replaceFirst("^0*", "");
		/*
		 * fechaingreso = fechaingreso.substring(6,8) + "/"+ fechaingreso.substring(4,6)
		 * + "/" + fechaingreso.substring(0,4);
		 */
		if (!pattern.matcher(ingreso).matches()) {
			double ingresocred = Double.parseDouble(ingreso);
			ingreso = formatter.format(ingresocred);
		}
		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 50);
		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		cell = new PdfPCell(new Phrase("2.DATOS LABORALES / PENSIONARIOS",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		/******/
		cell = new PdfPCell(new Phrase("Condición Laboral", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Entidad Pública", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Sector", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(condicionlab, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(entidad, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(sector, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		/*****/
		cell = new PdfPCell(new Phrase("Cargo Actual", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		/*
		 * cell = new PdfPCell(new Phrase("Fecha de Ingreso",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9,Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); table.addCell(cell);
		 */
		cell = new PdfPCell(
				new Phrase("Ingreso Neto Mensual", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Teléfono y Anexo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(cargoact, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		/*
		 * cell = new PdfPCell(new Phrase(fechaingreso,
		 * FontFactory.getFont(FontFactory.HELVETICA, 9)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); table.addCell(cell);
		 */
		cell = new PdfPCell(new Phrase("S/. " + ingreso, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(telefonoanexo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		/*****/
		cell = new PdfPCell(new Phrase("Dirección", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		String via;
		if (codvia.equals("01")) {
			via = "AVENIDA";
		} else {
			if (codvia.equals("02")) {
				via = "JIRON";
			} else {
				if (codvia.equals("03")) {
					via = "CALLE";
				} else {
					if (codvia.equals("04")) {
						via = "PASAJE";
					} else {
						if (codvia.equals("05")) {
							via = "ALAMEDA";
						} else {
							if (codvia.equals("06")) {
								via = "MALECON";
							} else {
								if (codvia.equals("07")) {
									via = "OVALO";
								} else {
									if (codvia.equals("08")) {
										via = "PARQUE";
									} else {
										if (codvia.equals("09")) {
											via = "PLAZA";
										} else {
											if (codvia.equals("10")) {
												via = "CARRETERA";
											} else {
												if (codvia.equals("11")) {
													via = "BLOCK";
												} else {
													via = "NO DEFINIDO";
												}

											}
										}
									}
								}
							}
						}
					}
				}
			}

		}

		cell = new PdfPCell(new Phrase(via + " " + direccion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		/*****/

		cell = new PdfPCell(new Phrase("Distrito", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Provincia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Departamento", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(distrito, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(provincia, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(departamento, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaDatosTarjetaCredito(String correo, String tipotarjeta, String ciclofact, String linea,
			String facturacion, String modalidad, String cargocuenta, String segurodesgravamen, String endosado,
			String vinculamv, String vinculatarjetadebito, String disposefect, String consumoext, String notificsms,
			String celular, String domicilioent, String referenciaent, String departamentoent, String provinciaent,
			String distritoent, String personaautoriz, String tipodocumentoautoriz, String nrodocautoriz,
			String nombreagrabar, String es_platinum) {
		// a table with three columns
		DecimalFormat formatter = new DecimalFormat("#,##0.00");
		Pattern pattern = Pattern.compile(".*[^0-9].*");
		ciclofact = ciclofact + " de cada mes";
		if (endosado.equals("S")) {
			// segurodesgravamen = "30.00";
			endosado = "SI";
		} else {
			// segurodesgravamen = "3.00";
			endosado = "NO";
		}
		linea = linea.replaceFirst("^0*", "");
		if (!pattern.matcher(linea).matches()) {
			double lineacred = Double.parseDouble(linea);
			linea = formatter.format(lineacred);
		}
		String cuenta = "";
		if (cargocuenta.trim().length() > 0) {
			if (cargocuenta.trim().length() == 11) {
				cuenta = cargocuenta.substring(0, 2) + "-" + cargocuenta.substring(2, 5) + "-"
						+ cargocuenta.substring(5, 11);
				cargocuenta = cuenta;
			}
		}
		String nrotarjeta = "";
		if (vinculatarjetadebito.trim().length() > 0) {
			if (vinculatarjetadebito.trim().length() == 16) {
				nrotarjeta = vinculatarjetadebito.substring(0, 4) + "-" + vinculatarjetadebito.substring(4, 8) + "-"
						+ vinculatarjetadebito.substring(8, 12) + "-" + vinculatarjetadebito.substring(12, 16);
				vinculatarjetadebito = nrotarjeta;
			}
		}
		if ("S".equals(notificsms.trim()))
			notificsms = "SI";
		else
			notificsms = "NO";
		if ("S".equals(vinculamv.trim())) {
			vinculamv = "SI";
		} else {
			vinculamv = "NO";
			vinculatarjetadebito = "";
		}
		if ("S".equals(consumoext.trim()))
			consumoext = "SI";
		else
			consumoext = "NO";
		if ("S".equals(disposefect.trim()))
			disposefect = "SI";
		else
			disposefect = "NO";
		if (tipodocumentoautoriz.trim().equals("01")) {
			tipodocumentoautoriz = "DNI";
		}
		nrodocautoriz = nrodocautoriz.substring(3);

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 50);
		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		cell = new PdfPCell(new Phrase("3.DATOS DE LA TARJETA DE CREDITO",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		/******/
		cell = new PdfPCell(
				new Phrase("Tipo de Tarjeta Titular", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Ciclo de Facturación", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(tipotarjeta, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(ciclofact, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		/*****/
		cell = new PdfPCell(new Phrase("Línea de Crédito", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Facturación Mensual", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Modalidad de Pago", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/. " + linea, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(facturacion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(modalidad + " (*)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		/*****/
		cell = new PdfPCell(
				new Phrase("Cargo en Cuenta Ahorro", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		if (endosado.trim().equals("SI"))
			cell = new PdfPCell(
					new Phrase("Evaluación de Póliza", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		else
			cell = new PdfPCell(
					new Phrase("Seguro Desgravamen", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Endosado", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(cargocuenta, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		// 00419 00890

		// 0.419%Max.S/8.90

		// cell = new PdfPCell(new Phrase("S/. " + segurodesgravamen +
		// " (Mensual)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell = new PdfPCell(
				new Phrase("" + segurodesgravamen + " (Mensual)", FontFactory.getFont(FontFactory.HELVETICA, 9)));

		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(endosado, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("N° Tarjeta Débito" + " " + vinculatarjetadebito,
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		/*****/
		cell = new PdfPCell(new Phrase("AUTORIZACIONES", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		/*****/

		cell = new PdfPCell(
				new Phrase("   a)Comercio Electrónico", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(vinculamv, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   b)Disposición de efectivo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(disposefect, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   c)Consumo y operaciones en el Exterior",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(consumoext, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   d)Notificación y mensajes SMS",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(notificsms + "     Correo:  " + " " + correo,
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		/********** SOLO PLATINUM */
		if (es_platinum.equals("SI")) {
			cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(5);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("Nombre a grabar en la Tarjeta de Crédito del Titular",
					FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(5);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase(nombreagrabar, FontFactory.getFont(FontFactory.HELVETICA, 9)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(5);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("Dirección de envio de la Tarjeta Platinum",
					FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(5);
			table.addCell(cell);

			cell = new PdfPCell(
					new Phrase(domicilioent + ' ' + referenciaent, FontFactory.getFont(FontFactory.HELVETICA, 9)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(5);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("Distrito", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(2);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("Provincia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(2);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("Departamento", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase(distritoent, FontFactory.getFont(FontFactory.HELVETICA, 9)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(2);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase(provinciaent, FontFactory.getFont(FontFactory.HELVETICA, 9)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(2);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase(departamentoent, FontFactory.getFont(FontFactory.HELVETICA, 9)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(5);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("Autorización de entrega a otras personas",
					FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(5);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase("Nombre de la persona autorizada",
					FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(2);
			table.addCell(cell);

			cell = new PdfPCell(
					new Phrase("Doc. de Identidad", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(3);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase(personaautoriz, FontFactory.getFont(FontFactory.HELVETICA, 9)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(2);
			table.addCell(cell);

			cell = new PdfPCell(new Phrase(tipodocumentoautoriz + " " + nrodocautoriz,
					FontFactory.getFont(FontFactory.HELVETICA, 9)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(3);
			table.addCell(cell);

		}
		/**********/

		cell = new PdfPCell(new Phrase(
				"IMPORTANTE: (*) Autorizo el cargo automático del Pago Mínimo Mensual en mi cuenta de ahorros.\n                              Recuerde que pueda realizar también el Pago Mínimo y Otros Pagos en cualquier ventanilla del Banco de la Nación.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		return table;
	}

	public static PdfPTable creaDatosTarjetasAdicionales(String mail1, String mail2, String mail3, String mail4,
			String tipotarjeta1, String lineacredito1, String facturacionmensual1, String modpago1, String autorizo1,
			String nombres1, String tipodoc1, String documento1, String fechanac1, String sexo1, String tipotarjeta2,
			String lineacredito2, String facturacionmensual2, String modpago2, String autorizo2, String nombres2,
			String tipodoc2, String documento2, String fechanac2, String sexo2, String fechaoperac1,
			String fechaoperac2, String dispo1, String notifica1, String oexterior1, String mvirtual1, String celladio1,
			String dispo2, String notifica2, String oexterior2, String mvirtual2, String celladio2) {
		// a table with three columns

		DecimalFormat formatter = new DecimalFormat("#,##0.00");
		Pattern pattern = Pattern.compile("[^0-9].*");
		String lineacred1 = lineacredito1.substring(1, 15);
		lineacred1 = lineacred1.replaceFirst("^0*", "");
		String lineacred2 = lineacredito2.substring(1, 15);
		lineacred2 = lineacred2.replaceFirst("^0*", "");
		if (fechanac1.trim().equals(""))
			fechanac1 = "";
		else
			fechanac1 = fechanac1.substring(6, 8) + "/" + fechanac1.substring(4, 6) + "/" + fechanac1.substring(0, 4);

		if (fechanac2.trim().equals(""))
			fechanac2 = "";
		else
			fechanac2 = fechanac2.substring(6, 8) + "/" + fechanac2.substring(4, 6) + "/" + fechanac2.substring(0, 4);

		if (!pattern.matcher(lineacred1).matches()) {
			double dlineacred1 = Double.parseDouble(lineacred1);
			lineacredito1 = formatter.format(dlineacred1);
		} else
			lineacredito1 = lineacred1;

		if (!pattern.matcher(lineacred2).matches()) {
			double dlineacred2 = Double.parseDouble(lineacred2);
			lineacredito2 = formatter.format(dlineacred2);
		} else
			lineacredito2 = lineacred2;
		if (tipodoc1.trim().equals("1")) {
			tipodoc1 = "DNI";
		}
		if (tipodoc2.trim().equals("1")) {
			tipodoc2 = "DNI";
		}
		if (sexo1.trim().equals("M")) {
			sexo1 = "Masculino";
		} else if (sexo1.trim().equals("F")) {
			sexo1 = "Femenino";
		} else
			sexo1 = "";
		if (sexo2.trim().equals("M")) {
			sexo2 = "Masculino";
		} else if (sexo2.trim().equals("F")) {
			sexo2 = "Femenino";
		} else
			sexo2 = "";
		if (autorizo1.trim().equals("N")) {
			autorizo1 = "NO";
		} else if (autorizo1.trim().equals("S")) {
			autorizo1 = "SI";
		} else
			autorizo1 = "";
		if (autorizo2.trim().equals("N")) {
			autorizo2 = "NO";
		} else if (autorizo2.trim().equals("S")) {
			autorizo2 = "SI";
		} else
			autorizo2 = "";
		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 50);
		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		cell = new PdfPCell(new Phrase("4.DATOS DE LA(S) TARJETA(S) ADICIONAL(ES)",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		/******/
		cell = new PdfPCell(new Phrase("Tipo de Tarjeta", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Fecha Operación", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Línea de Crédito", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(tipotarjeta1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(fechaoperac1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/. " + lineacredito1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		/*****/
		cell = new PdfPCell(
				new Phrase("Facturación Mensual", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Modalidad de Pago", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Moneda Nacional (S/.)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Pago mínimo(*)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		/*****/
		cell = new PdfPCell(
				new Phrase("Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(nombres1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		/*****/

		cell = new PdfPCell(
				new Phrase("Documento de Identidad", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Sexo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		/********/
		cell = new PdfPCell(new Phrase(tipodoc1 + " " + documento1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(fechanac1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(sexo1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		/****/
		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		// /

		/*****/
		cell = new PdfPCell(new Phrase("AUTORIZACIONES", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		/*****/

		cell = new PdfPCell(
				new Phrase("   a)Comercio Electrónico", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		// String dispo, String notifica, String oexterior, String mvirtual,
		// String celladio

		String mv1 = "";

		if (((mvirtual1).trim()).equalsIgnoreCase("")) {
			mv1 = "";
		}

		if (mvirtual1.equalsIgnoreCase("S")) {
			mv1 = "SI";
		}
		if (mvirtual1.equalsIgnoreCase("N")) {
			mv1 = "NO";
		}

		String disp1 = "";

		if (((dispo1).trim()).equalsIgnoreCase("")) {
			disp1 = "";
		}
		if (dispo1.equalsIgnoreCase("S")) {
			disp1 = "SI";
		}
		if (dispo1.equalsIgnoreCase("N")) {
			disp1 = "NO";
		}

		String ext1 = "";
		if (((oexterior1).trim()).equalsIgnoreCase("")) {
			ext1 = "";
		}

		if (oexterior1.equalsIgnoreCase("S")) {
			ext1 = "SI";
		}
		if (oexterior1.equalsIgnoreCase("N")) {
			ext1 = "NO";
		}

		String noti1 = "";
		if (((notifica1).trim()).equalsIgnoreCase("")) {
			noti1 = "";
		}

		if (notifica1.equalsIgnoreCase("S")) {
			noti1 = "SI";
		}
		if (notifica1.equalsIgnoreCase("N")) {
			noti1 = "NO";
		}

		cell = new PdfPCell(new Phrase(mv1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   b)Disposición de efectivo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(disp1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   c)Consumo y operaciones en el Exterior",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(ext1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   d)Notificación y mensajes SMS",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(noti1 + "     Correo:  " + " " + mail1, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);
		// //

		cell = new PdfPCell(new Phrase(" "));
		cell.setColspan(5);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorderWidthTop(0.5f);
		cell.setBorderColorTop(BaseColor.GRAY);
		table.addCell(cell);

		/*****/
		cell = new PdfPCell(new Phrase("Tipo de Tarjeta", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Fecha Operación", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Línea de Crédito", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(tipotarjeta2, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(fechaoperac2, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/. " + lineacredito2, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		/*****/
		cell = new PdfPCell(
				new Phrase("Facturación Mensual", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Modalidad de Pago", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Moneda Nacional(S/.)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Pago mínimo(*)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		/***/
		/*****/
		cell = new PdfPCell(
				new Phrase("Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(nombres2, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		/*****/

		cell = new PdfPCell(
				new Phrase("Documento de Identidad", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Sexo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(tipodoc2 + " " + documento2, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(fechanac2, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(sexo2, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		// String dispo, String notifica, String oexterior, String mvirtual,
		// String celladio

		String mv2 = "";
		if (((mvirtual2).trim()).equalsIgnoreCase("")) {
			mv2 = "";
		}
		if (mvirtual2.equalsIgnoreCase("S")) {
			mv2 = "SI";
		}
		if (mvirtual2.equalsIgnoreCase("N")) {
			mv2 = "NO";
		}

		String disp2 = "";
		if (((dispo2).trim()).equalsIgnoreCase("")) {
			disp2 = "";
		}
		if (dispo2.equalsIgnoreCase("S")) {
			disp2 = "SI";
		}
		if (dispo2.equalsIgnoreCase("N")) {
			disp2 = "NO";
		}

		String ext2 = "";
		if (((oexterior2).trim()).equalsIgnoreCase("")) {
			ext2 = "";
		}
		if (oexterior2.equalsIgnoreCase("S")) {
			ext2 = "SI";
		}
		if (oexterior2.equalsIgnoreCase("N")) {
			ext2 = "NO";
		}

		String noti2 = "";
		if (((notifica2).trim()).equalsIgnoreCase("")) {
			noti2 = "";
		}
		if (notifica2.equalsIgnoreCase("S")) {
			noti2 = "SI";
		}
		if (notifica2.equalsIgnoreCase("N")) {
			noti2 = "NO";
		}

		/*****/
		cell = new PdfPCell(new Phrase("AUTORIZACIONES", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		/*****/

		cell = new PdfPCell(
				new Phrase("   a)Comercio Electrónico", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(mv2, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   b)Disposición de efectivo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(disp2, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   c)Consumo y operaciones en el Exterior",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(ext2, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   d)Notificación y mensajes SMS",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(noti2 + "     Correo:  " + " " + mail2, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaDatosTarjetasAdic(String mail, String tipotarjeta, String lineacredito,
			String facturacionmensual, String modpago, String autorizo, String nombres, String tipodoc,
			String documento, String fechanac, String sexo, String fechaoperacion, String dispo, String notifica,
			String oexterior, String mvirtual, String celladio

	) {
		// a table with three columns
		DecimalFormat formatter = new DecimalFormat("#,##0.00");
		// Pattern pattern = Pattern.compile(".*[^0-9].*");
		Pattern pattern = Pattern.compile("[^0-9].*");
		String lineacred = lineacredito.substring(1, 15);
		lineacred = lineacred.replaceFirst("^0*", "");
		if (!fechanac.equals(""))
			fechanac = fechanac.substring(6, 8) + "/" + fechanac.substring(4, 6) + "/" + fechanac.substring(0, 4);
		else
			fechanac = "";
		if (!pattern.matcher(lineacred).matches()) {
			double dlineacred1 = Double.parseDouble(lineacred);
			lineacredito = formatter.format(dlineacred1);
		} else
			lineacredito = lineacred;
		if (tipodoc.trim().equals("1")) {
			tipodoc = "DNI";
		}

		if (sexo.trim().equals("M")) {
			sexo = "Masculino";
		} else if (sexo.trim().equals("F")) {
			sexo = "Femenino";
		} else
			sexo = "";
		if (autorizo.trim().equals("N")) {
			autorizo = "NO";
		} else if (autorizo.trim().equals("S")) {
			autorizo = "SI";
		} else
			autorizo = "";

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 50);
		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setColspan(5);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorderWidthTop(0.5f);
		cell.setBorderColorTop(BaseColor.GRAY);
		table.addCell(cell);

		/******/
		cell = new PdfPCell(new Phrase("Tipo de Tarjeta", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Fecha Operación", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Línea de Crédito", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(tipotarjeta, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(fechaoperacion, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/. " + lineacredito, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		/*****/
		cell = new PdfPCell(
				new Phrase("Facturación Mensual", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Modalidad de Pago", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Moneda Nacional(S/.)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Pago mínimo(*)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		/*****/
		cell = new PdfPCell(
				new Phrase("Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(nombres, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		/*****/

		cell = new PdfPCell(
				new Phrase("Documento de Identidad", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Sexo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		/********/
		cell = new PdfPCell(new Phrase(tipodoc + " " + documento, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(fechanac, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(sexo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		/****/

		/*****/
		cell = new PdfPCell(new Phrase("AUTORIZACIONES", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);
		/*****/

		// String dispo, String notifica, String oexterior, String mvirtual,
		// String celladio

		String mv = "";
		if (mvirtual.equalsIgnoreCase("S")) {
			mv = "SI";
		} else {
			mv = "NO";
		}

		String disp = "";
		if (dispo.equalsIgnoreCase("S")) {
			disp = "SI";
		} else {
			disp = "NO";
		}

		String ext = "";
		if (oexterior.equalsIgnoreCase("S")) {
			ext = "SI";
		} else {
			ext = "NO";
		}

		String noti = "";
		if (notifica.equalsIgnoreCase("S")) {
			noti = "SI";
		} else {
			noti = "NO";
		}

		cell = new PdfPCell(
				new Phrase("   a)Comercio Electrónico", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(mv, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   b)Disposición de efectivo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(autorizo, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   c)Consumo y operaciones en el Exterior",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(ext, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   d)Notificación y mensajes SMS",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(noti + "     Correo:  " + " " + mail, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaLineaAutorizacion() {
		PdfPTable table = new PdfPTable(10);
		table.setTotalWidth(PageSize.A4.getWidth() - 50);
		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(10);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(10);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(10);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(10);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"IMPORTANTE: (*) Autorizo el cargo automático del Pago Mínimo Mensual en mi cuenta de ahorros.\n                              Recuerde que pueda realizar también el Pago Mínimo y Otros Pagos en cualquier ventanilla del Banco de la Nación.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(10);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaUsoInterno(String nombretecnico, String codigotecnico, String telefonotecnico,
			String nombrefuncionario, String codigofuncionario, String telefonofuncionario, String nombreagencia,
			String codigoagencia, String lineacredito, String observaciones) {
		// a table with three columns
		DecimalFormat formatter = new DecimalFormat("#,##0.00");
		Pattern pattern = Pattern.compile(".*[^0-9].*");
		if (telefonotecnico.length() == 10) {
			telefonotecnico = telefonotecnico.substring(0, 6) + "-" + telefonotecnico.substring(6, 10);
		}
		String[] anombretecnico = nombretecnico.split("\\/");
		String nombrecomptecni = "";
		for (String s : anombretecnico) {
			nombrecomptecni = nombrecomptecni + s + " ";
		}
		nombretecnico = nombrecomptecni;

		String[] anombrefunc = nombrefuncionario.split("\\/");
		String nombrecompfunc = "";
		for (String s : anombrefunc) {
			nombrecompfunc = nombrecompfunc + s + " ";
		}
		nombrefuncionario = nombrecompfunc;

		lineacredito = lineacredito.replaceFirst("^0*", "");
		if (!pattern.matcher(lineacredito).matches()) {
			double lineacred = Double.parseDouble(lineacredito);
			lineacredito = formatter.format(lineacred);
		}

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 50);
		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		cell = new PdfPCell(new Phrase("5.USO INTERNO DEL BANCO",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		/******/
		cell = new PdfPCell(
				new Phrase("Nombre Técnico Operativo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Código", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Teléfono Fijo y Anexo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(nombretecnico, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(codigotecnico, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(telefonotecnico, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		/*****/
		cell = new PdfPCell(new Phrase("Nombre Funcionario", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Código", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Teléfono Fijo y Anexo", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(nombrefuncionario, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(codigofuncionario, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(telefonofuncionario, FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));

		cell = new PdfPCell(
				new Phrase("Nombre de la Agencia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Código de Agencia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Línea de Crédito Global Aprob.", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);

		/****/
		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		/*****/
		cell = new PdfPCell(new Phrase("Observaciones", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		for (int i = 1; i < 5; i++) {
			cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_LEFT);
			cell.setColspan(5);
			table.addCell(cell);
		}
		/*****/
		return table;
	}

	public static PdfPTable creaFirmas() {

		PdfPTable table = new PdfPTable(10);
		table.setTotalWidth(PageSize.A4.getWidth() - 50);
		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell;
		cell = new PdfPCell(new Phrase("\n\n\n\n\n\n", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("\n\n\n\n\n\n", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("\n\n\n\n\n\n", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.BOX);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(cell);
		/************/
		cell = new PdfPCell(new Phrase("Firma Representante BN", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Firma del Cliente", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Huella", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);

		return table;
	}

	// ///

	public static PdfPTable creaPDFPolizaUnoPolizaa() throws DocumentException {

		PdfPTable table = new PdfPTable(8);
		table.setTotalWidth(PageSize.A4.getWidth() - 60);

		table.setLockedWidth(true);
		// the cell object
		PdfPCell cell, cell_1, cell_2, cell_3, cell_4, cell_5, cell_6, cell_7, cell_8, cell_9, cell_10;
		Phrase datePhrase;
		// we add a cell with colspan 3

		// float[] medidaCeldas = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

		// table.setWidths(medidaCeldas);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("SOLICITUD DE SEGURO / SEGURO DE DESGRAVAMEN INDIVIDUAL 3 ",
				FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("1. DATOS DEL CONTRATANTE / ASEGURADO:",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nro. de Solicitud", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nombres y Apellidos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Emisión", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Tipo/Nro.de Documento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Sexo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Nacionalidad", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Estado Civil", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono Fijo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono Móvil", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Centro de Trabajo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Edad Máxima de Ingreso", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": El Asegurado podrá afiliarse  hasta el día  que cumpla 84 años de edad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Edad Máxima de Permanencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Hasta el dia que cumpla 85 años de edad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Domicilio Contractual", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				": Para efectos del presente seguro, mi domicilio contractual será, indistintamente, la dirección física y la dirección electrónica (opcional) que a continuación se indican:",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" a) Dirección Física (Particular ó Comercial):",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" b) Dirección Electrónica (Correo electrónico):",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Dist/Prov/Dpto", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   Nro. de Solicitud de Crédito", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("   (En adelante el CRÉDITO)  ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 8)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Oficina", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Vendedor", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2. COBERTURA(S) Y SUMA ASEGURADA:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("COBERTURA PRINCIPAL", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(1);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("DEFINICIONES Y CONDICIONES", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(3);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("EXCLUSIONES", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(4);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Vida", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Cubre el fallecimiento del asegurado por causas naturales o accidentales.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));

		cell.setBorder(Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		cell.setRowspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"a) Lesiones que el Asegurado sufra en actos de guerra civil o internacional, declarada o "
						+ "no; invasión, actos de enemigos extranjeros, hostilidades u operaciones bélicas sea que haya habido o"
						+ " no declaración de guerra, insurrección, sublevación, rebelión, "
						+ "sedición, motín.                                       b) Participación activa del Asegurado en actos de conmoción contra el orden público dentro o fuera del país, así como en actos delictuosos, "
						+ "subversivos o terroristas.                                c) Fisión o fusión nuclear, contaminación "
						+ "radioactiva.          d) Suicidio, intento de suicidio, automutilación o autolesión, salvo que, en caso de fallecimiento, la póliza haya estado en vigencia ininterrumpidamente durante dos (2) años.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(4);
		cell.setRowspan(4);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("(Muerte Natural y Muerte Accidental)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(1);
		cell.setRowspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("COBERTURAS ADICIONALES", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("DEFINICIONES Y CONDICIONES", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("EXCLUSIONES", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente por Accidente",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Para los efectos de esta cobertura, únicamente se considera: a) Paraplejia o Cuadriplejia por fractura de columna vertebral; b) Descerebramiento que impida realizar trabajo alguno por el resto de su vida; c) Pérdida total o funcional absoluta de: (i) la visión de ambos ojos, (ii) ambos brazos o ambas manos; (iii) ambas piernas o ambos pies, (iv) una mano y un pie. Es condición necesaria que la invalidez se maniﬁeste a más tardar dentro de los (2) años siguientes de producido un accidente durante la vigencia de la póliza. Se considera como accidente a todo suceso imprevisto, involuntario, repentino y fortuito, causado por medios externos y de un modo violento que afecte el organismo del asegurado, ocasionándole una o más lesiones que se maniﬁesten por contusiones o heridas visibles, y también de los casos de lesiones internas o inmersión reveladas por los exámenes correspondientes.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Rigen las exclusiones establecidas para la cobertura de Vida",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		cell.setRowspan(6);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente por Enfermedad",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		cell.setRowspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Pérdida o disminución física o intelectual igual o superior a los 2/3 de su capacidad de trabajo, reconocida por la Compañía utilizando los criterios establecidos para el Sistema Privado de Pensiones.",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		cell.setRowspan(4);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("SUMA ASEGURADA: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk("Es el saldo deudor del ", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("CRÉDITO ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"(capital concedido o reprogramado, intereses compensatorios, moratorios, comisiones y primas no cobradas) del Asegurado al momento de ocurrido el siniestro (fallecimiento o configuración de la Invalidez Total y Permanente por Accidente o Enfermedad) ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"hasta el límite de Suma Asegurada según el Rango de Edad que se detalla en el siguiente cuadro",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		datePhrase.add(
				new Phrase(new Chunk(". El pago de cualquiera de estas coberturas genera la terminación del seguro.",
						FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("LÍMITE DE SUMA ASEGURADA SEGÚN RANGO DE EDAD:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		//

		cell = new PdfPCell(new Phrase("Rango de Edad", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.BOTTOM | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setRowspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Sumas Aseguradas Máximas", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(6);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Cobertura Principal", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Coberturas Adicionales", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.TOP | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(4);
		cell.setRowspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Edad de Ingreso", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Edad de Permanencia", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Vida (Muerte Natural y Muerte Accidental)", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente Por Accidente",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente Por Enfermedad",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Hasta los 84 años", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("85 y 364 días", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 100,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 100,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 100,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Desde los 84 años y 1 día", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Sin límite", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 3,000.00", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setColspan(2);
		table.addCell(cell);

		//

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("3. VIGENCIA DE LA COBERTURA:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("- ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(
				new Chunk("Inicio de Vigencia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				": La vigencia de las coberturas otorgadas al amparo del presente seguro se inicia desde que el Contratante efectúe el desembolso del ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk("CRÉDITO. ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("- ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(
				new Chunk("Fin de Vigencia", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.UNDERLINE))));
		datePhrase.add(new Phrase(new Chunk(
				": Las coberturas otorgadas se mantendrán vigentes mientras concurran las siguientes circunstancias: (i) se encuentre vigente el ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(
				new Chunk("CRÉDITO o sus reprogramaciones; ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"(ii) el Asegurado se encuentre en el rango de edad indicado en el acápite precedente; y (ii) no se produzcan los supuestos de resolución, extinción y nulidad del seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("4. PRIMA:", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);
		// tasita
		cell = new PdfPCell(
				new Phrase("Monto de la prima: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"•	Para los Asegurados con edad de ingreso hasta los 84 años: 0.1200% sobre el saldo deudor. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"•	Para los Asegurados con edad de ingreso desde los 84 años y 1 día: 1.33% sobre el saldo deudor.  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk(
				"La prima indicada no incluye el IGV. Las pólizas de vida están inafectas al IGV cuando el comprobante de pago es emitido a una persona natural residente en el Perú. La prima se cobrará en forma mensual dentro de la cuota del  ",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		datePhrase.add(new Phrase(new Chunk("CRÉDITO ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD))));
		datePhrase.add(new Phrase(new Chunk(", según el cronograma del mismo. Los pagos efectuados por el Asegurado al",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(
				new Chunk("BANCO DE LA NACIÓN  ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD))));
		datePhrase.add(new Phrase(
				new Chunk("se consideran abonados a la Compañía.", FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El presente seguro no contempla deducibles, franquicias, periodos de carencia ni conceptos similares salvo por los expresamente indicados en el acápite 2 de la presente solicitud. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("5.BENEFICIARIO DEL SEGURO:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El beneﬁciario de la(s) cobertura(s) del presente seguro es el BANCO DE LA NACIÓN. De determinarse la procedencia del pago de la cobertura, la Compañía pagará al BANCO DE LA NACIÓN, la suma asegurada que corresponda en un solo acto.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" 6.	DECLARACIONES Y AUTORIZACIONES DEL ASEGURADO:",
				FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, BaseColor.WHITE)));
		cell.setBackgroundColor(BaseColor.BLACK);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("a) ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"Declaro que las respuestas dadas a la presente solicitud están hechas bajo declaración jurada, son verídicas y completas, y es de mi conocimiento que cualquier omisión, simulación, falsedad de circunstancias relevantes o declaración inexacta, dolosa o mediando culpa inexcusable, determina la nulidad del contrato de conformidad con lo dispuesto en el artículo 8° de la Ley del Contrato de Seguros. De comprobarse, antes del siniestro, alguna declaración inexacta que obedece a dolo o culpa inexcusable, Pacíﬁco Seguros (en adelante la “Compañía”) podrá informarme la revisión del seguro; mi rechazo o silencio ante las nuevas condiciones dará derecho a la Compañía a resolver el contrato de seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("b) ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"Declaro haber sido debidamente informado sobre las condiciones del seguro y conocer que el modelo de la póliza emitido por la Compañía está disponible en la página web de la Compañía (www.paciﬁco.com.pe) y en el Registro de Pólizas de la Superintendencia de Banca, Seguros y AFP bajo Código SBS VI2007400218, el cual es de acceso público a través del “Portal del Usuario” de la página web de dicha institución (www.sbs.gob.pe).",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("c) ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"Solicito y autorizo a la Compañía a notiﬁcarme cualquier comunicación relacionada con el presente seguro a través de la dirección electrónica antes indicada, la misma que constituirá mi domicilio contractual. En caso no haya señalado en la presente solicitud una dirección electrónica, la referida comunicación deberá realizarse a mi dirección física por escrito. Asimismo, me comprometo a informar por escrito cualquier variación de mi dirección con por lo menos quince (15) días de anticipación, caso contrario se considerarán como válidas para todo efecto legal las comunicaciones enviadas a la dirección electrónica o física original. Todas las comunicaciones entre las partes relacionadas al presente seguro deberán ser puestas en conocimiento del BANCO DE LA NACIÓN, en su calidad de beneﬁciario y comercializador del seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("d) Consentimiento (Ley 29733 - Protección de datos personales):  ",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"Para la correcta ejecución de la relación contractual, EL CONTRATANTE / ASEGURADO (“EL CLIENTE”) se obliga a mantener actualizada su información personal, ﬁnanciera y crediticia (“LA INFORMACIÓN”) y reconoce que PACÍFICO SEGUROS podrá tratarla, actualizarla, completarla y realizar ﬂujos transfronterizos conforme a ley.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"PACÍFICO SEGUROS conservará, tratará y realizará ﬂujos transfronterizos con LA INFORMACIÓN de EL CLIENTE mientras se mantenga la relación contractual y luego de veinte (20) años de ﬁnalizado el contrato.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"Para el tratamiento de La INFORMACIÓN de EL CLIENTE, PACÍFICO SEGUROS utilizará diversos Encargados ubicados en el Perú y el extranjero, los cuales se han puesto a disposición del El Cliente y también se encuentran detallados en https://www.paciﬁco.com.pe/transparencia/politica-privacidad. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"Su información será incluida en el banco de datos de Usuarios que se encuentra registrado ante la Autoridad de Protección de Datos Personales bajo el número de registro RNPDP-PJ N.° 774, de titularidad de PACÍFICO SEGUROS, ubicada en Juan de Arona 830, San Isidro, Lima - Perú.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"EL CLIENTE puede ejercer los derechos de acceso, rectiﬁcación, cancelación, revocación y oposición, dirigiéndose a PACÍFICO SEGUROS de forma presencial en cualquiera de sus oﬁcinas a nivel nacional en el horario establecido para la atención al público o por teléfono o a través del Chat ubicado en nuestra página web www.paciﬁco.com.pe.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		datePhrase.add(new Phrase(new Chunk(
				"El detalle de nuestra Política de Privacidad se encuentra disponible en https://www.paciﬁco.com.pe/transparencia/politica-privacidad. ",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		datePhrase = new Phrase(new Chunk("e) ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 9)));
		datePhrase.add(new Phrase(new Chunk(
				"La Compañía entregará la póliza dentro de un plazo de quince (15) días calendario de haberse presentado la solicitud de seguro con todos los requisitos solicitados por la Compañía, si no media rechazo previo. Para estos efectos autorizo a la Compañía a que realice la entrega de la póliza, indistintamente, en la dirección física elegida o en mi dirección electrónica y declaro expresamente: (i) haber sido informado sobre la forma, procedimiento, ventajas y posibles riesgos asociados al envío de la póliza por medios electrónicos; (ii) tener conocimiento sobre las medidas de seguridad que me corresponde aplicar; (iii) conocer que se conﬁrmará la recepción de la póliza a través de un sistema informático que veriﬁca si el correo electrónico enviado llegó a la bandeja de entrada de mi dirección electrónica; y (iv) aceptar que, a efectos de garantizar la autenticidad e integridad de la póliza, esta contará con la ﬁrma electrónica del representante de la Compañía y será enviada, con copia a una entidad Certiﬁcadora, en un archivo PDF encriptado al cual podré acceder digitando el número de mi Documento de Identidad.",
				FontFactory.getFont(FontFactory.HELVETICA, 9))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La Compañía es la única y exclusiva responsable por el cumplimiento íntegro de las estipulaciones del presente seguro y es responsable frente al Asegurado de todos los errores u omisiones en que incurra el BANCO DE LA NACIÓN con motivo de la comercialización del mismo. Las comunicaciones cursadas por el Asegurado al BANCO DE LA NACIÓN, por aspectos relacionados con el contrato de seguros, tienen el mismo efecto que si se hubiesen dirigido a la Compañía. Asimismo, los pagos efectuados por el Asegurado al BANCO DE LA NACIÓN, se consideran abonados a la Compañía.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("    FECHA DE EMISION:  ", FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("                _________________________                   "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("                                    Firma del Asegurado",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Mediante la ﬁrma escrita o electrónica, el Contratante/Asegurado acepta todas las condiciones del seguro indicadas en la presente solicitud.",
				FontFactory.getFont(FontFactory.HELVETICA, 9)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new Phrase("3/3",
		 * FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER); cell.setColspan(8);
		 * table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(8);
		table.addCell(cell);

		return table;

	}

	public static PdfPTable creaPDFPolizaTarjeta(String referencia, String telfcasa, String fechasoli, String npoliza,
			String sdesgra, String codAge, String codEva, String nombre, String apellido, String numdoc, String fnac,
			String sexo, String mail, String estCi, String tcell, String nomVia, String nombrCalle, String numVia,
			String ubidep, String ubidis, String ubipro) throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		PdfPCell cell;
		PdfPCell var;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		/*
		 * cell = new PdfPCell(new
		 * Phrase("SOLICITUD - CERTIFICADO SEGURO DE DESGRAVAMEN ", FontFactory.getFont(
		 * FontFactory.HELVETICA, 13, Font.BOLD, BaseColor.WHITE)));
		 * //cell.setBorder(Rectangle.NO_BORDER); cell.setBorder(Rectangle.TOP |
		 * Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("PREMIER BANCO DE LA NACIÓN",
		 * FontFactory.getFont( FontFactory.HELVETICA, 13, Font.BOLD,
		 * BaseColor.WHITE))); //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.RIGHT |
		 * Rectangle.LEFT); cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * datePhrase = new Phrase(new Chunk("Código SBS: ",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12))); datePhrase.add(new
		 * Phrase(new Chunk("VI0507400419", FontFactory.getFont(FontFactory.HELVETICA,
		 * 12)))); cell = new PdfPCell(datePhrase); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("PÓLIZA N° 8764 - 500001",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * cell.setBorder(Rectangle.TOP |Rectangle.RIGHT | Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("Adecuado a la Ley N° 29946 y sus normas reglamentarias",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12)));
		 * cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT| Rectangle.BOTTOM);
		 * cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA,
		 * 12, Font.BOLD))); cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT|
		 * Rectangle.BOTTOM); cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "El presente seguro presenta cargas y obligaciones a cargo del Asegurado, cuyo incumplimiento podría acarrear la pérdida de derechos indemnizatorios."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * cell.setBorder(Rectangle.TOP |Rectangle.RIGHT | Rectangle.LEFT |
		 * Rectangle.BOTTOM); cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(
		 * "La vigencia se renueva mensualmente de manera automática y estará activa mientras el asegurado mantenga saldo deudor en la tarjeta de crédito y se mantenga al día en sus pagos. La vigencia del Certificado de seguro culminará en caso que la póliza matriz del seguro de Desgravamen contratado por Banco de la Nación a Rimac Seguros, llegue a su fin de vigencia o sea resuelto."
		 * , FontFactory.getFont(FontFactory.HELVETICA, 12)));
		 * cell.setBorder(Rectangle.TOP |Rectangle.RIGHT | Rectangle.LEFT |
		 * Rectangle.BOTTOM); cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("DATOS DEL ASEGURADO",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, BaseColor.WHITE)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.RIGHT |
		 * Rectangle.LEFT); cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setColspan(5); table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.RIGHT |
		 * Rectangle.LEFT); cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setColspan(5); table.addCell(cell);
		 */

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        Nro de Certificado", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + npoliza, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        Importe de la Prima", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": 0.419 %", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        Moneda", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Soles", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        Forma de Pago/Renovación", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": Mensual", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        Fecha de emisión ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		String annioDesembolso1 = (fechasoli.substring(0, 4));
		String mesDesembolso1 = (fechasoli.substring(4, 6));
		String diaDesembolso1 = (fechasoli.substring(6, 8));

		String fechanac1 = diaDesembolso1 + "/" + mesDesembolso1 + "/" + annioDesembolso1;

		cell = new PdfPCell(new Phrase(": " + fechanac1, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        Fecha de Inicio", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + fechanac1, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        Cod. Agencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + (codAge).substring(1), FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        Cod. Vendedor ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + codEva, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        DNI", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + numdoc, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Sexo", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + sexo, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        Nombre y Apellidos", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + nombre.trim() + " " + apellido.trim(),
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        Fecha de Nacimiento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		String annioDesembolso = (fnac.substring(0, 4));
		String mesDesembolso = (fnac.substring(4, 6));
		String diaDesembolso = (fnac.substring(6, 8));

		String fechanac = diaDesembolso + "/" + mesDesembolso + "/" + annioDesembolso;

		cell = new PdfPCell(new Phrase(": " + fechanac, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        Estado Civil", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		if (estCi.trim().equals("S")) {
			estCi = "SOLTERO";
		} else if (estCi.trim().equals("C")) {
			estCi = "CASADO";
		} else if (estCi.trim().equals("V")) {
			estCi = "VIUDO";
		} else if (estCi.trim().equals("D")) {
			estCi = "DIVORCIADO";
		}

		cell = new PdfPCell(new Phrase(": " + estCi, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        Teléfono 1", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + telfcasa, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Teléfono 2", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + Funciones.eliminarCerosAlaIzquierda(tcell),
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("        Correo electrónico", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase(": " + (mail).replace(" ", "@"), FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        Dirección", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		String via;
		if (nomVia.equals("01")) {
			via = "AVENIDA";
		} else {
			if (nomVia.equals("02")) {
				via = "JIRON";
			} else {
				if (nomVia.equals("03")) {
					via = "CALLE";
				} else {
					if (nomVia.equals("04")) {
						via = "PASAJE";
					} else {
						if (nomVia.equals("05")) {
							via = "ALAMEDA";
						} else {
							if (nomVia.equals("06")) {
								via = "MALECON";
							} else {
								if (nomVia.equals("07")) {
									via = "OVALO";
								} else {
									if (nomVia.equals("08")) {
										via = "PARQUE";
									} else {
										if (nomVia.equals("09")) {
											via = "PLAZA";
										} else {
											if (nomVia.equals("10")) {
												via = "CARRETERA";
											} else {
												if (nomVia.equals("11")) {
													via = "BLOCK";
												} else {
													via = "NO DEFINIDO";
												}

											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		cell = new PdfPCell(new Phrase(": " + via + " " + nombrCalle.trim() + " " + "" + numVia.trim(),
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        Distrito", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ubidis.trim(), FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("   Provincia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ubipro.trim(), FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        Departamento", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + ubidep.trim(), FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("        Referencia", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(": " + referencia, FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		/*
		 * 
		 * cell = new PdfPCell(new Phrase("   Relación con el contratante",
		 * FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12)));
		 * cell.setBorder(Rectangle.LEFT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(": Económica.",
		 * FontFactory.getFont(FontFactory.HELVETICA,11)));
		 * cell.setBorder(Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase (" "));
		 * cell.setBorder(Rectangle.LEFT|Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase (" "));
		 * cell.setBorder(Rectangle.LEFT|Rectangle.RIGHT);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("DATOS DEL CONTRATANTE / COMERCIALIZADOR",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, BaseColor.WHITE)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.GRAY); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Contratante: Banco de la Nación",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase(" RUC: 20100030595",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new
		 * Phrase("Dirección: Av. Javier Prado Este Nro. 2499 Urb. San Borja",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Distrito: San Borja",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Provincia: Lima",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("Departamento: Lima",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(3);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("Teléfono: 519 2000",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * //cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(2);
		 * table.addCell(cell);
		 * 
		 * cell = new PdfPCell(new Phrase("www.bn.com.pe",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * cell.setBorder(Rectangle.TOP |Rectangle.RIGHT | Rectangle.LEFT |
		 * Rectangle.BOTTOM); cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * 
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase("1/7",
		 * FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		 * cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		 * cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		 * cell.setBackgroundColor(BaseColor.WHITE); cell.setColspan(5);
		 * table.addCell(cell);
		 * 
		 * 
		 * cell = new PdfPCell(new Phrase (" ")); cell.setBorder(Rectangle.NO_BORDER);
		 * cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED); cell.setColspan(5);
		 * table.addCell(cell);
		 */

		return table;
	}

	public static PdfPTable creaPDFPolizaTarjetaDos() throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		PdfPCell cell;
		PdfPCell var;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DATOS DE LA ASEGURADORA",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Rimac Seguros y Reaseguros", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("RUC: 20100041953", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Dirección: Las Begonias 475, Piso 3.",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Distrito: San Isidro", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Provincia: Lima", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Departamento: Lima", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Teléfono: 411-1000", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Fax: 421-0555", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Página Web: www.rimac.com", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);Página Web: www.rimac.com
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Correo electrónico: atencionalcliente@rimac.com.pe",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("RESUMEN DE LAS COBERTURAS",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Cobertura Principal", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Suma Asegurada (S/)", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Fallecimiento por muerte natural", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 50,000", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Fallecimiento por muerte accidental", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Coberturas Adicionales", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente por Accidente",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		// cell.setBorder(Rectangle.NO_BORDER);Página Web: www.rimac.com
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 50,000", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Invalidez Total y Permanente por Enfermedad",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		// cell.setBorder(Rectangle.NO_BORDER);Página Web: www.rimac.com
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 50,000", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Indemnización por Muerte Accidental", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		// cell.setBorder(Rectangle.NO_BORDER);Página Web: www.rimac.com
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 2,000", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Indemnización por Sepelio", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		// cell.setBorder(Rectangle.NO_BORDER);Página Web: www.rimac.com
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 1,000", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		// cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Beneficio Adicional", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Asistencias", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.TOP | Rectangle.LEFT | Rectangle.BOTTOM | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DEFINICIONES DE LAS COBERTURAS",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Cobertura de Fallecimiento por muerte natural y muerte accidental:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Si se produjera tu fallecimiento por cualquier causa que no esté excluida en tu póliza de seguro, RIMAC indemnizará al Beneficiario, de acuerdo con las condiciones, coberturas y límites contratados.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Cobertura Adicional de Invalidez total y permanente por Accidente:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En caso de Invalidez Total y Permanente del ASEGURADO que surja como consecuencia de un accidente producido dentro de la vigencia de la Póliza de Seguro, RIMAC pagará la suma asegurada indicada en el Certificado de Seguro, de acuerdo a lo siguiente.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" -	Definición de Invalidez Total y Permanente: A efectos de lo establecido en la presente cobertura, se considera Invalidez Total y Permanente del ASEGURADO, a la pérdida o disminución de su capacidad física o intelectual definitiva e irreversible, que le produzca un menoscabo igual o superior al 66.6%, de su capacidad total.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" -	Definición de Accidente: Todo suceso violento, súbito, imprevisto, involuntario, y fortuito, causado por agentes externos, que causa o da lugar a daños o lesiones en el ASEGURADO.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Cobertura Adicional de Invalidez total y permanente por Enfermedad:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En caso de Invalidez Total y Permanente del ASEGURADO, que surja como consecuencia de una enfermedad diagnosticada dentro de la vigencia de la Póliza de Seguro, RIMAC pagará la suma asegurada indicada en el Certificado de Seguro, de acuerdo con lo siguiente:",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" -	Definición de Invalidez Total y Permanente: A efectos de lo establecido en la presente cobertura se considera Invalidez Total y Permanente del ASEGURADO, la pérdida o disminución de su capacidad física o intelectual, definitiva e irreversible, que le produzca un menoscabo igual o superior al 66.6%de su capacidad total.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En caso Rímac Seguros haya cubierto un siniestro activando la cobertura de Invalidez Total y Permanente bajo cualquiera de sus modalidades, y en caso ese mismo Asegurado obtenga una nueva línea de Tarjeta de Crédito del Banco de la Nación, el seguro solo brindará la cobertura de fallecimiento sobre dicho Asegurado, dado que la Invalidez Total y Permanente configuraría un evento preexistente al inicio del nuevo Certificado de Seguro. Se deja constancia que el otorgamiento de la cobertura de fallecimiento está condicionada a que el evento no sea considerado como “excluido” bajo las condiciones de la Póliza de Seguro, ni que sea a causa de la Invalidez Total y Permanente configurada con anterioridad al inicio de la vigencia del nuevo Certificado de Seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Por otro lado, en caso que un cliente adquiera una línea de Tarjeta de Crédito del Banco de la Nación y cuente con una Invalidez Total y Permanente configurada con anterioridad a la fecha de inicio de vigencia de la Póliza de Seguro, solo se otorgará la cobertura de fallecimiento si no corresponde a un evento excluido y/o si es que no ha sido causado por la Invalidez Total y Permanente ya configurada con anterioridad o la enfermedad o accidente que la produjo.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("2/7", FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFPolizaTarjetaTres() throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		PdfPCell cell;
		PdfPCell var;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Indemnización Adicional por muerte accidental:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La presente cobertura consiste en brindar una indemnización adicional a los Beneficiarios designados por el Asegurado, en caso el fallecimiento de éste último haya sido como consecuencia de un accidente producido dentro de la vigencia de la Póliza de Seguro.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Para considerar que el fallecimiento se produjo como consecuencia del accidente, se deberá haber producido dentro de los noventa (90) días calendarios posteriores a la fecha en que se produjo el accidente, siempre que el deceso sea como consecuencia de las lesiones originadas en el mismo. Esta cobertura es accesoria a la cobertura principal de fallecimiento en caso de accidente, .por lo que su activación solo se realizará en tanto RIMAC haya aprobado el otorgamiento de la indemnización correspondiente a la cobertura de fallecimiento como consecuencia de un accidente.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Indemnización por sepelio:",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11, Font.UNDERLINE)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En caso RIMAC haya aprobado el pago de la indemnización por fallecimiento del ASEGURADO, los Beneficiarios designados por el ASEGURADO en el Certificado de Seguro recibirán el importe total de la suma asegurada establecida en este Certificado de Seguro para esta cobertura. Las coberturas adicionales descritas precedentemente son obligatorias para el presente Plan de Seguro de Desgravamen de Tarjeta de Crédito de Banco de la Nación.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Las coberturas adicionales descritas precedentemente son obligatorias para el presente Plan de Seguro de Desgravamen de Tarjeta de Crédito de Banco de la Nación.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("PRIMA", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.TOP | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Prima Comercial mensual", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("S/ 5.60", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(3);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Comisión del Comercializador: 50% sobre la Prima Comercial.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("INTERÉS ASEGURADO",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		datePhrase = new Phrase(
				new Chunk("Descripción del Interés Asegurable: ", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		datePhrase.add(new Phrase(new Chunk(
				"Es el requisito esencial para que exista un Contrato de Seguro. Es el interés que debe tener el Contratante en obtener el beneficio de determinadas coberturas en caso se materialicen cualquier riesgo sobre el Asegurado, debido a que guarda una relación lícita con el mismo (en este caso, una relación económica entre el Contratante y Asegurado). Si este interés asegurable no existe, este Certificado de Seguro será nulo bajo las consideraciones establecidas en las Condiciones Generales de la Póliza de Seguro de Desgravamen Premier.",
				FontFactory.getFont(FontFactory.HELVETICA, 11))));
		cell = new PdfPCell(datePhrase);
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("CRONOGRAMA, LUGAR Y FORMA DE PAGO DE LA PRIMA",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Lugar: Oficinas del Contratante.", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Forma: El pago de la prima es mensual, con cargo en la tarjeta de crédito.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Fecha de vencimiento de pago de la prima: corresponde a la fecha máxima de pago de la tarjeta de crédito. Interés Moratorio: No aplica.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DATOS DE LOS BENEFICIARIOS",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El Beneficiario será la ENTIDAD FINANCIERA para las coberturas de fallecimiento e invalidez total y permanente por accidente o enfermedad.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Relación de la ENTIDAD FINANCIERA (BENEFICIARIO) con el ASEGURADO: Económica.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En el caso de las coberturas de Indemnización por muerte accidental e Indemnización por sepelio los beneficiarios serán los designados por el ASEGURADO en la siguiente tabla:",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Nombre del Beneficiario", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.TOP | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DNI del beneficiario", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.TOP | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("% de Participación de la Indemnización",
				FontFactory.getFont(FontFactory.HELVETICA_BOLD, 11)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.TOP | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En caso que no se haya(n) designado BENEFICIARIO(S), se considerará como BENEFICIARIO(S) al/a los Heredero(s) Legal(es) del ASEGURADO.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"En caso los datos de identificación del BENEFICIARIO designado sean incorrectos y/o incongruentes entre sí (nombre - DOI), tal designación se tendrá por no realizada, entendiéndose como BENEFICIARIO(S) de la Póliza a el/los Heredero(s) Legal(es) del ASEGURADO.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Si se designaron varios BENEFICIARIOS, sin indicación de porcentajes, se entiende que el beneficio es por partes iguales.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("3/7", FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFPolizaTarjetaCuatro() throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		PdfPCell cell;
		PdfPCell var;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase("EDADES DEL ASEGURADO",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Podrán asegurarse bajo la presente Póliza, las personas naturales que sean incorporadas como tal en la Póliza, y cuya edad se encuentre dentro del rango siguiente:",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La edad mínima de ingreso para todos los asegurados es 18 años.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La edad máxima de ingreso para todos los asegurados es 65 años y 364 días. ",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("La edad máxima de permanencia es 69 años y 364 días.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Se deja constancia que, en caso el ASEGURADO sea incorporado como tal en la Póliza de Seguro medi- ante la emisión de la misma, habiendo superado la edad máxima de ingreso no se brindará cobertura alguna.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("EXCLUSIONES", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Exclusiones generales (Aplica a todas las coberturas)",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Están excluidos de cobertura los siniestros que se produzcan en, o a consecuencia de, los siguientes eventos o circunstancias. Las coberturas adicionales podrán contener exclusiones específicas las cuales se añadirán a las las presentes exclusiones generales.",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" •   Pena de muerte o participación activa en cualquier acto delictivo o en actos violatorios de leyes o reglamentos; duelo concertado; así como en huelgas, motín, conmoción civil, daño malicioso, vandalismo y terrorismo.",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" •   Guerra, invasión u operaciones bélicas (exista o no declaración de guerra), actos hostiles de entidades soberanas o del gobierno, guerra civil, rebelión, revolución, insurrección, levantamiento popular, poder militar o usurpado, ley marcial o confiscación por orden de un Gobierno o autoridad pública.",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				" •   Detonación, reacción fisión o radiación nuclear, contaminación radiactiva (independientemente de la forma en que se haya ocasionado). Cualquier evento que haya sido causado por fisión nuclear o reactor nuclear o contaminación radioactiva.",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Ningún siniestro producido, ya sea por fallecimiento del asegurado (en sus dos modalidades), o que se haya configurado la Invalidez Total y Permanente (en sus dos modalidades), con anterioridad a la fecha de inicio de vigencia tendrá cobertura bajo la presente Póliza de Seguro de Desgravamen.",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("DERECHO DE RESOLVER EL CERTIFICADO DE SEGURO SIN EXPRESIÓN DE CAUSA",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Cuando así lo decidas y sin necesidad de una justificación. Para ello debes enviar una comunicación escrita a RIMAC o solicitarlo por cualquiera de los medios que usaste para contratar la Póliza de Seguro. Ésta quedará resuelta a los 30 días siguientes.",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"RIMAC tiene derecho a conservar y/o cobrar las primas por el período de vigencia transcurrido. En el caso que se hayan pagado primas por adelantado, tendrás derecho a que se te reembolse la prima por el período de vigencia que no ha transcurrido. Este reembolso se realizará en un plazo máximo de 30 días contados desde la fecha de la resolución.",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("EXTINCIÓN DEL CERTIFICADO DE SEGURO",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Si transcurren 90 días desde la fecha del incumplimiento del pago de la prima, esta Póliza de Seguro quedará extinguida. RIMAC conservará las primas correspondientes al período efectivamente cubierto. A partir de la fecha en que se produzca la extinción, RIMAC queda liberada de todas las obligaciones a su cargo conforme a la presente Póliza.",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("QUÉ HACER EN CASO DE SINIESTRO:",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Paso 1: Dar aviso a RIMAC:", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Dar aviso dentro de los 07 días siguientes a la fecha en que se tenga conocimiento de la ocurrencia del siniestro o del beneficio, según corresponda.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Paso 2: Solicitar la Cobertura:",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Para ello se deberán entregar a RIMAC o a las oficinas de la Entidad Financiera que otorgó el crédito o del Comercializador:",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" •    Cobertura por Fallecimiento por Muerte Natural",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("      - Acta o Partida de Defunción emitida por RENIEC.",
				FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("4/7", FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFPolizaTarjetaCinco() throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		PdfPCell cell;
		PdfPCell var;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(
				" •  Cobertura por Fallecimiento por Muerte Accidental / Indemnización por Muerte Accidental",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("    -   Acta o Partida de Defunción emitida por RENIEC. ",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" •  Cobertura por Invalidez Total y Permanente por Accidente",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"    -   Dictamen de Invalidez de la Comisión Médica Evaluadora de Incapacidades emitido por MINSA, ESSALUD, EPS o expedido por los Comités Médicos del Sistema Privado de Pensiones (COMAFP, COMEC). La fecha que se considera para los casos de Invalidez Total y Permanente por accidente es la de ocurrencia del accidente.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" •  Cobertura por Invalidez Total y Permanente por Enfermedad",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"    -   Dictamen de Invalidez de los Comités Médicos del Sistema Privado de Pensiones (COMAFP, COMEC). La fecha que se considera para los casos de Invalidez Total y Permanente por enfermedad es la de emisión del Dictamen de Invalidez en donde se configura la Invalidez Total y Permanente. En el caso de no tener un Dictamen emitido por estas entidades, se tomará en cuenta el Certificado de Discapacidad emitido por la Comisión Médica Evaluadora de Incapacidades del MINSA o ESSALUD. La fecha que se considera para los casos de Invalidez Total y Permanente por enfermedad es la de emisión del Certificado de Discapacidad.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" •  Cobertura por Indemnización por Sepelio",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"    -   En caso que RIMAC haya aprobado el otorgamiento de la cobertura de Fallecimiento (ya sea Natural o Accidental) de manera automática se activará esta cobertura la misma que será pagada al Beneficiario designado en el presente Certificado.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Nota1: En caso de muerte presunta, ésta deberá acreditarse conforme a la ley vigente. Se deberá entregar a RIMAC SEGUROS, la resolución judicial de muerte presunta junto con la correspondiente partida de defunción. El pronunciamiento de RIMAC SEGUROS se encontrará suspendido hasta la recepción de la resolución judicial de muerte presunta y partida de definción.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Nota2: El Banco de la Nación deberá proporcionar el Estado de Cuenta del préstamo del cliente a la fecha del siniestro. El ASEGURADO autoriza al Banco de la Nación a proporcionar el Estado de Cuenta de la tarjeta de crédito a RIMAC.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Si el ASEGURADO no estuviese conforme con la decisión de RIMAC, podrá presentar un reclamo ante RIMAC de conformidad con la Circular de Servicio de Atención a los Usuarios, o recurrir al mecanismo de solución de controversias que corresponda. En este caso, en caso de reclamo a RIMAC, la invalidez será evaluada por una junta médica compuesta por tres médicos elegidos por él, de entre una nómina de cinco o más médicos propuestos por RIMAC, los que deberán encontrarse ejerciendo, o que hayan ejercido por al menos un año como miembros titulares del Comité Médico de las AFP (COMAFP) o del Comité Médico de la Superintendencia (COMEC).",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La junta médica evaluará la invalidez del ASEGURADO, pronunciándose si se encuentra inválido en forma total y permanente, conforme a los conceptos y tomando  en consideración las “Normas para la evaluación y calificación del grado de invalidez”, según la Resolución Nº 232-98-EF/SAFP y sus normas modificatorias y complementarias. La junta médica podrá someter al ASEGURADO a los exámenes médicos que considere necesarios, cuyos costos serán soportados en partes iguales entre el ASEGURADO y RIMAC.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Los documentos serán entregados en las Plataformas de RIMAC descritas en el Resumen de la Póliza de Seguro, o en las oficinas de la Entidad Financiera que le otorgó el crédito y/o la tarjeta de crédito, según corresponda, o en las oficinas del Comercializador.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Recuerde que todo documento de procedencia extranjera, debe ser visado por el Consulado Peruano en el país de expedición, y ratificado en el Perú por el Ministerio de Relaciones Exteriores. Si el documento estuviera redactado en idioma distinto al español, se deberá adjuntar una traducción oficial del mismo.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Paso 3: El pago de la Indemnización:",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Dentro de los 30 días siguientes a la fecha en que se haya entregado toda la documentación y requisitos exigidos en el Paso 2 precedente para la cobertura solicitada RIMAC evaluará y se pronunciará aceptando o rechazando el pago de la indemnización(cobertura).",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Dentro de los primero 20 días RIMAC podrá solicitar aclaraciones o precisiones sobre de la documentación e información presentada, o podrá solicitar la prórroga del plazo original al Asegurado, y en caso éste último no acepte la prórroga solicitada, podrá solicitarlo a la Superintendencia de Banca, Seguros y AFP, conforme lo establecido en los Artículos 11° y 12° del Reglamento de Gestión y Pago de Siniestros (Resolución SBS N° 3202-2013). ",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("5/7", FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFPolizaTarjetaSeis() throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		PdfPCell cell;
		PdfPCell var;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(
				"Para efectos de la evaluación de la documentación presentada, el ASEGURADO autoriza a cualquier médico, hospital, clínica, compañía de seguros u otra institución o persona que tenga conocimiento o registros de su persona o salud, para que pueda entregar directamente cualquier información solicitada por RIMAC, incluyendo la referida al VIH/SIDA.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Si transcurre el plazo descrito en el primer párrafo precedente y RIMAC no se ha pronunciado respecto del siniestro, se entiende que este ha sido consentido.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"RIMAC pagará la indemnización dentro de los 30 días siguientes de haber consentido o aceptado la cobertura.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("LUGARES AUTORIZADOS POR RIMAC PARA SOLICITAR LA COBERTURA DE SEGURO",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La solicitud de cobertura debe ser comunicada por el CONTRATANTE, ASEGURADO o BENEFICIARIO en las oficinas del CONTRATANTE, a nivel nacional.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(
				new Phrase("Adicionalmente, podrá presentarse a RIMAC en los Centros de Atención de Cliente:",
						FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Oficina Principal: Av. Las Begonias 475, San Isidro, Lima / Lima: Av. Paseo de la República 3082, San Isidro. Av. Comandante Espinar 689, Miraflores. Telf. 411-3000 / Arequipa: Pasaje Belén 103, Urb. Vallecito. Telf. (054)-381700 / Huancayo: Jr. Ancash 125, Huancayo. Telf. (064)-223233 / Trujillo: Av. América Oeste N° 750 Locales A-1004 y A-1006 – Mall Aventura Plaza, Urbanización El Ingenio, provincia de Trujillo, departamento de La Libertad. Telf. (044)-485200 / Chiclayo: Av. Salaverry 560, Urb. Patazca. Telf. (074)- 481400 / Piura: Calle Libertad 450. Telf. (073)-284900.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"También podrá presentar su Solicitud de Cobertura del Seguro a solicitud.cobertura@rimac.com.pe.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Las solicitudes de cobertura presentadas al CONTRATANTE / COMERCIALIZADOR del seguro, de corresponder, tienen los mismos efectos como si hubieran sido presentadas a RIMAC. ",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("MEDIOS HABILITADOS POR RIMAC PARA PRESENTAR RECLAMOS",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Con la finalidad de expresar algún incumplimiento, irregularidad o deficiencia en la satisfacción de un interés particular, se podrá presentar el reclamo de manera gratuita como se detalla a continuación:",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Verbal: Presencial o vía telefónica a través de los Centros de Atención en Lima y Provincias y Central de Consultas. / Escrito: Mediante carta dirigida a RIMAC Seguros o a través de la página web o correo electrónico / Central de Consultas y Reclamos: (01) 411-1111 / Correo Electrónico: reclamos@rimac.com.pe / Página Web: www.rimac.com",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("OBLIGACIÓN DE INFORMAR SOBRE AGRAVACIÓN DEL RIESGO ASEGURADO",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("No aplica.", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("INSTANCIAS HABILITADAS PARA PRESENTAR RECLAMOS Y/O DENUNCIAS",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"Defensoría del Asegurado: www.defaseg.com.pe Lima:(01) 421-0614 Amador Merino Reyna 307 Piso 9, San Isidro, Lima. / Indecopi: www.indecopi.gob.pe Lima: (01) 224-7777 Telf. gratuito de Provincias: 0-800-4-4040",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"SEDE CENTRAL LIMA SUR: Calle de la Prosa 104, San Borja, Lima. SEDE LIMA NORTE: Av. Carlos Izaguirre 988, Urb. Las Palmeras, Los Olivos, Lima. / Superintendencia de Banca y Seguros y AFP (SBS): www.sbs.gob.pe LIMA: Los Laureles 214, San Isidro Teléfono (511) 630-9000 | Fax: (511) 630-9239 AREQUIPA: Los Arces 302, Urb. Cayma. PIURA: Prócer Merino 101, Urb. Club Grau. Consultas y Denuncias: (511) 630-9000 | 200-1930.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("INFORMACIÓN ADICIONAL:",
				FontFactory.getFont(FontFactory.HELVETICA, 11, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.TOP | Rectangle.RIGHT | Rectangle.LEFT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"   I.	RIMAC es responsable frente al ASEGURADO de la cobertura contratada y de todos los errores u omisiones en que incurre el Comercializador, sin perjuicio de las responsabilidades y obligaciones que le corresponden. Para efectos del presente certificado de seguro, se aplicará lo previsto en el Reglamento de Gestión de Conducta de Mercado del Sistema de Seguros, aprobado por la Resolución SBS N° 4143-2019.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"   II.	Las comunicaciones cursadas por los ASEGURADOS o BENEFICIARIOS al Comercializador, sobre aspectos relacionados con el seguro contratado, tendrán los mismos efectos que si hubieran sido presentadas a RIMAC.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"   III.	Los pagos efectuados por los ASEGURADOS o terceros encargados del pago, al Comercializador, se considerarán abonados a RIMAC.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"   IV.	El Asegurado podrá solicitar copia de la póliza matriz, la misma que deberá ser entregada por RIMAC o EL COMERCIALIZADOR, dentro de los 15 días calendarios siguientes a la fecha en que fue solicitada.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("6/7", FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		return table;
	}

	public static PdfPTable creaPDFPolizaTarjetaSiete(Image firmaPoliza) throws DocumentException {

		PdfPTable table = new PdfPTable(5);
		table.setTotalWidth(PageSize.A4.getWidth() - 70);

		table.setLockedWidth(true);

		PdfPCell cell;
		PdfPCell var;

		Phrase datePhrase;

		cell = new PdfPCell(new Phrase(
				"La solicitud se puede realizar directamente a la siguiente dirección de correo electrónico atencionalcliente@rimac.com.pe, comunicándose directamente al 411-1111 o a través del COMERCIALIZADOR.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"El ASEGURADO manifiesta su aceptación expresa para que las comunicaciones relacionadas a la Póliza puedan ser remitidas a la dirección de correo electrónico que ha sido consignado en el presente documento. RIMAC remitirá comunicaciones escritas al domicilio del CONTRATANTE y/o ASEGURADO, en caso no se consigne una dirección electrónica, o, a decisión expresa de RIMAC, en forma adicional a la comunicación electrónica o en caso la normatividad vigente lo exija. En caso el ASEGURADO no pueda abrir los archivos adjuntos o modifique su dirección de correo electrónico, deberá informar dichas situaciones a la siguiente dirección de correo electrónico: atencionalcliente@rimac.com.pe, o comunicándose al 411-1111. Asimismo, se compromete a mantener activa su cuenta de correo electrónico, abrir y leer detenidamente las comunicaciones electrónicas y sus archivos adjuntos, revisar sus bandejas de correo electrónico, inclusive las bandejas de entrada y de correos no deseados, así como revisar la política de filtro o bloqueo de su proveedor de servicio de correo electrónico, todo aquello con el objeto de utilizar este medio de comunicación electrónica de manera sencilla y eficiente, para los fines propuestos.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("ACEPTACIÓN DE LAS CONDICIONES PLANTEADAS",
				FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD, BaseColor.WHITE)));
		cell.setBorder(Rectangle.RIGHT | Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.GRAY);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"La aceptación y emisión de la presente Solitud - Certificado de Seguro, supone la conformidad de las declaraciones  efectuadas  por  el   ASEGURADO   en   los   términos   estipulados   por RIMAC, en tanto el ASEGURADO hubiera proporcionado información veraz.",
				FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("Lugar y fecha:", FontFactory.getFont(FontFactory.HELVETICA, 10)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(firmaPoliza, true);

		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(1);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(2);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"                           _______________________                   _______________________"));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(
				"                                    Makaly Rivera Chu                                   ASEGURADO"));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("                                     Vicepresidenta     "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("                         División Seguros y Personales      "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("                         Rimac Seguros y Reaseguros     "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" "));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setColspan(5);
		table.addCell(cell);
		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase("7/7", FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 11)));
		cell.setBorder(Rectangle.NO_BORDER);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell.setBackgroundColor(BaseColor.WHITE);
		cell.setColspan(5);
		table.addCell(cell);

		return table;
	}

	// TODO validarCorreo - formulario
	@RequestMapping("validarC")
	public String validarC(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "prestamo/validarC");

		return path;

	}

	@RequestMapping(value = "/getConsultaCorreo/", method = RequestMethod.POST)
	@ResponseBody
	public Object DatosCliente(@RequestBody Map<String, String> requestBody, HttpServletRequest request)
			throws ParametrosCompException, ExternalException {

		compService.asignarParametros();

		String tipo = requestBody.get("tipo");
		String num = requestBody.get("numero");

		Map<String, String> datosCliente = serviceEnvioEmail.getNombreCliente(tipo, num, parametrosComp);
		String email = datosCliente.get("email");
		String nombreCompleto = datosCliente.get("nombreCompleto");

		//COMO GUARDO EL NUMERO DE PRESTAMO EN LA CONSULTA DE CORREO
		HttpSession session = request.getSession();
		session.setAttribute("tipodoc", tipo);
		session.setAttribute("numdoc", num);
		session.setAttribute("nombrecompleto", nombreCompleto);
		// session.setAttribute("email", email);

		// Convertir los datos a JSON para la respuesta
		String json = "";
		try {
			ObjectMapper mapper = new ObjectMapper();
			json = mapper.writeValueAsString(datosCliente);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return json;
	}

	@RequestMapping(value = "/getEnviarCorreoOTP/", method = RequestMethod.POST)
	@ResponseBody
	public Object EnviarCorreoOTP(@RequestBody Map<String, String> requestBody, HttpServletRequest request,
			HttpServletResponse response) throws ParametrosCompException, ExternalException {

		Map<String, String> respuesta = new HashMap<String, String>();
		compService.asignarParametros();

		String numDoc = requestBody.get("numDocCli");
		String nombreCliente = requestBody.get("nombreCli");

		// TODO: Correo yapumelanie9 validar correo
		//String correoCliente = "yapumelanie9@gmail.com";
		String correoCliente = requestBody.get("correoCli");

		HttpSession session = request.getSession(false);

		String codigo = generarCodigo();

		long tiempoGeneracion = System.currentTimeMillis();

		boolean estado = servicioEnvioCorreo.enviarCorreoOTP(correoCliente, nombreCliente, codigo);

		if (estado) {
			// TODO:CODIGO SE TIENE QUE ELIMINAR
			System.out.print("CODIGO GENERADO: " + codigo);

			Map<String, Object> otpData = new HashMap<>();
			otpData.put("codigo", codigo);
			otpData.put("horaGeneracion", tiempoGeneracion);

			session.setAttribute("email", correoCliente);
			session.setAttribute(numDoc, otpData);

			respuesta.put("cod", "0000");
			respuesta.put("msj", "Se envio correctamente la clave OTP");
		} else {
			respuesta.put("cod", "9999");
			respuesta.put("msj", "No se envio la clave OTP. Ocurrio un error");

		}

		String json = "";
		try {
			// Convertir el mapa a JSON
			ObjectMapper mapper = new ObjectMapper();
			json = mapper.writeValueAsString(respuesta);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return json;

	}

	private String generarCodigo() {

		String cod = String.format("%06d", new Random().nextInt(900000) + 100000);
		return cod;
	}

	@RequestMapping(value = "/getValidarCodigoOTP/", method = RequestMethod.POST)
	@ResponseBody
	public Object validarCodigoOTP(@RequestBody Map<String, String> requestBody, HttpServletRequest request) {
		Map<String, String> respuesta = new HashMap<>();

		String numDoc = requestBody.get("numero"); // Número de documento del cliente
		String codigoIngresado = requestBody.get("codigoCli");

		CustomUser usuario = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		log.debug("Usuario autenticado: " + usuario.getUsername(), Constant.LOGGER_DEBUG_NIVEL_1);

		HttpSession session = request.getSession(false);
		BnValidarCorreoOTP valCorreo = new BnValidarCorreoOTP();
		RepoLogAuditoria datosCorreo = new RepoLogAuditoria();

		if (session != null) {
			Map<String, Object> otpData = (Map<String, Object>) session.getAttribute(numDoc); // Usar numDoc como clave
			if (otpData != null) {
				String codigoGuardado = (String) otpData.get("codigo");
				long horaGeneracion = (long) otpData.get("horaGeneracion");

				long tiempoActual = System.currentTimeMillis();
				if (tiempoActual - horaGeneracion <= 2 * 60 * 1000) { // 2 minutos
					if (codigoGuardado.equals(codigoIngresado)) {
						respuesta.put("cod", "0000");
						//respuesta.put("msj", "Código OTP válido");

						LocalDateTime fechaHoraActual = LocalDateTime.now();

						DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern("yyyy-MM-dd");
						String fecha = fechaHoraActual.format(formatoFecha);

						DateTimeFormatter formatoHora = DateTimeFormatter.ofPattern("HH:mm:ss");
						String hora = fechaHoraActual.format(formatoHora);

						// Recuperar los valores de la sesión
						String tip = (String) session.getAttribute("tipodoc");
						String num = (String) session.getAttribute("numdoc");
						String nombre = (String) session.getAttribute("nombrecompleto");
						String email = (String) session.getAttribute("email");

						valCorreo.setTIPDOC(tip);
						valCorreo.setNUMDOC(num);
						valCorreo.setNOMBR_APELL(nombre);
						valCorreo.setCORREO(email);
						valCorreo.setOTP(codigoIngresado);
						valCorreo.setFECHA(fecha);
						valCorreo.setHORA(hora);
						valCorreo.setUSUARIO(usuario.getUsername());

						try {
							String resultado = datosCorreo.cargaCorreoValidar(valCorreo);

							if ("ENVIADO".equals(resultado)) {
								respuesta.put("msj", "Se validaron los datos correctamente");						
								
							} else {
								respuesta.put("msj",
										"Codigo OTP validado, pero no se pudo guardar en la base de datos");
							}
						} catch (Exception e) {

							respuesta.put("cod", "9998");
							respuesta.put("msj", "Error interno al guardar datos");
						}

						session.removeAttribute(numDoc);
						session.removeAttribute("tipodoc");
						session.removeAttribute("numdoc");
						session.removeAttribute("nombrecompleto");
						session.removeAttribute("email");

					} else {
						respuesta.put("cod", "9999");
						respuesta.put("msj", "El código OTP no coincide");
					}
				} else {
					respuesta.put("cod", "9999");
					respuesta.put("msj", "El código OTP ha expirado");
					session.removeAttribute(numDoc);

				}
			} else {
				respuesta.put("cod", "9999");
				respuesta.put("msj", "No se encontró un código OTP para este cliente");
			}
		} else {
			respuesta.put("cod", "9999");
			respuesta.put("msj", "No hay una sesión activa");
		}

		String json2 = "";
		try {
			// Convertir el mapa a JSON
			ObjectMapper mapper = new ObjectMapper();
			json2 = mapper.writeValueAsString(respuesta);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return json2;
	}

	// TODO enviar documento - formulario
	@RequestMapping("enviarDocVirtual")
	public String enviarDoc(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		HttpSession sesion = request.getSession();

		// iniciando la ventana

		path = View.returnJsp(model, "prestamo/enviarDoc");

		return path;

	}

	
	// TODO: OPCION CONSULTAR--------------------------ENVIO DOC VIRTUAL----------------------------------------
	@RequestMapping("enviarDoc")
	public String envioDocVirtual(ModelMap model, HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String path = "";
		DatosSesion datosSesion = Util.getIdUsuario(request);
		//HttpSession sesion = request.getSession();

		CicsSoapConnection cics = new CicsSoapConnection();

		String numero = request.getParameter("numero");
		
		HttpSession session = request.getSession();
		session.setAttribute("numeprestamo", numero);


		GeneracionCronograma cronograma = null;

		BodyGeneracionCronograma cronogramaInput = new BodyGeneracionCronograma();

		String tipo_prestamo1 = "05";

		cronogramaInput.cargarData(tipo_prestamo1, numero);

		System.out.println("Cronograma input :" + cronogramaInput.toShowData());

		String inputCronograma = cronogramaInput.toString();

		BodyGeneracionCronograma bodyIn2 = new BodyGeneracionCronograma();
		BodyGeneracionCronograma cronogramaOutPut = null;

		cronogramaOutPut = cics.enviarTrama(cronogramaInput, bodyIn2);

		cronogramaOutPut.getByIndex(1);
		cronogramaOutPut.getByIndex(2);
		cronogramaOutPut.getByIndex(3);

		System.out.println("pruena 1" + cronogramaOutPut.getByIndex(0));
		System.out.println("2 " + cronogramaOutPut.getByIndex(1));
		System.out.println(cronogramaOutPut.toShowData());

		String codResp = cronogramaOutPut.getByIndex(0);
		String mensResp = cronogramaOutPut.getByIndex(1);

		// if (!codResp.equals("0000")){

		// request.setAttribute("msje","Error 99");
		// cronograma.setMSJ(");
		// request.setAttribute("cronograma",cronograma);
		// }

		try {

			if (cronogramaOutPut != null) {
				cronograma = new GeneracionCronograma();

				cronograma.setTOPERACION(cronogramaOutPut.getByTag("DFH-TOPERACION-76"));
				cronograma.setNPRESTAMO(cronogramaOutPut.getByTag("DFH-NPRESTAMO-76"));
				cronograma.setFDSBOLSO(cronogramaOutPut.getByTag("DFH-FDSBOLSO-76"));
				cronograma.setSPRESTAMO(cronogramaOutPut.getByTag("DFH-SPRESTAMO-76"));

				cronograma.setCERROR(cronogramaOutPut.getByTag("DFH-CERROR-76").trim());
				cronograma.setMSJ(cronogramaOutPut.getByTag("DFH-MSJ-76").trim());

				cronograma.setMSGNO_HOST(cronogramaOutPut.getByTag("msgnoHost").trim());
				cronograma.setMSJE_HOST(cronogramaOutPut.getByTag("msjeHost").trim());
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		cronograma.setCcuenta((cronograma.getNPRESTAMO()).substring(0, 11));
		cronograma.setCdsbolso((cronograma.getNPRESTAMO()).substring(11, 13));

		// Solicitud

		BnSolicitudPrestamo solicitud = null;

		BodySolicitudPrestamo solicitudInput = new BodySolicitudPrestamo();

		String tipo_prestamo = "07";

		solicitudInput.cargarData(tipo_prestamo, numero);

		log.debug("Trama de Solicitud input", Constant.LOGGER_DEBUG_NIVEL_1);

		log.debug("Trama de Solicitud", solicitudInput.toShowData());
		// log.error(e, "SOlicitud", solicitudInput.toShowData());
		// log.toString(solicitudInput.toShowData());

		String inputSolicitud = solicitudInput.toString();

		BodySolicitudPrestamo bodyIn3 = new BodySolicitudPrestamo();
		BodySolicitudPrestamo solicitudOutPut = null;

		solicitudOutPut = cics.enviarTrama(solicitudInput, bodyIn3);

		log.debug("Trama de Solicitud input", solicitudInput.toShowData());

		log.debug("Trama de Solicitud output", solicitudOutPut.toShowData());

		if (solicitudOutPut != null) {
			solicitud = new BnSolicitudPrestamo();

			solicitud.setCERROR(solicitudOutPut.getByTag("DFH-CERROR").trim());
			solicitud.setMSJ(solicitudOutPut.getByTag("DFH-MSJ").trim());

		}

		//
		//

		BnPolizaPrestamo poliza = null;

		try {

			BodyCronograma polizaInput = new BodyCronograma();

			polizaInput.cargarData1(numero);

			log.debug("Poliza input", polizaInput.toShowData());
			// System.out.println("poliza input :" +polizaInput.toShowData());

			// String inputCronograma = polizaInput.toString();

			BodyCronograma bodyIn = new BodyCronograma();
			BodyPolizaPrestamo polizaOutPut = null;

			polizaOutPut = cics.enviarTramaPoliza(polizaInput, bodyIn);
			// System.out.println("Poliza");
			// System.out.println("Poliza :" +polizaOutPut.toShowData());
			log.debug("Poliza output", polizaOutPut.toShowData());

			if (polizaOutPut != null) {
				poliza = new BnPolizaPrestamo();

				poliza.setAcliente(polizaOutPut.getByTag("ACLIENTE"));
				poliza.setNdoc(polizaOutPut.getByTag("NDOC"));

				poliza.setCelular(polizaOutPut.getByTag("CELULAR"));
				poliza.setEmail(polizaOutPut.getByTag("EMAIL"));

				poliza.setCerror(polizaOutPut.getByTag("CERROR"));
				poliza.setMsj(polizaOutPut.getByTag("MSJ"));

			}
		} catch (Exception e) {
			// log.error(e,"","");
		}

		//

		BodyHojaResumen hojaInput = new BodyHojaResumen();
		BodyHojaResumen hojaOutPut = new BodyHojaResumen();

		hojaInput.cargarData(numero);
		hojaInput.toShowData();

		String inputHoja = hojaInput.toString();

		BodyHojaResumen bodyIn1 = new BodyHojaResumen();
		BodyHojaResumen bodyOut1 = null;

		bodyOut1 = cics.enviarTramaHojaResumen(hojaInput, bodyIn1);

		// System.out.println(bodyOut1.toShowData());

		log.debug("Poliza output", bodyOut1.toShowData());

		BnHojaResumen hojaResumen = null;

		if (bodyOut1 != null) {
			hojaResumen = new BnHojaResumen();

			hojaResumen.setCERROR(bodyOut1.getByTag("DFH-CERROR"));
			hojaResumen.setMSJ(bodyOut1.getByTag("DFH-MSJ"));

		}

		//

		// System.out.println("prueba de datos" + poliza.getNdoc());
		
		cronograma.setACLIENTE(poliza.getAcliente());
		cronograma.setDOCUMENTO(poliza.getNdoc());
		RepoLogAuditoria auditoria = new RepoLogAuditoria();
		
		
		
		
		LocalDate fechaHoy = LocalDate.now();
        String fechaStr = fechaHoy.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
		String dni  = cronograma.getDOCUMENTO().substring(2);
		String DOI = "DNI "+dni;
		
		Map<String, String> correoCel = new HashMap<String, String>();
		correoCel = emailDocYcel(cronograma.getDOCUMENTO());
		String correoCli = correoCel.get("email");
		String celular = correoCel.get("celular");
        CustomUser usuario = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	
		String numdoc = cronograma.getDOCUMENTO().substring(2);
		
        
		if ((cronograma.getCERROR()).equals("0000") && (solicitud.getCERROR()).equals("0000")
				&& (poliza.getCerror()).equals("0000") && (hojaResumen.getCERROR()).equals("0000")) {
			
			
			request.setAttribute("msje", "Haga Clic en Abrir para Confirmar la Exportación");

			request.setAttribute("cronograma", cronograma);
			

			request.setAttribute("correo", correoCli);
		
			request.setAttribute("dni", numdoc);
			String msjVal = validaremail(cronograma.getDOCUMENTO());

			request.setAttribute("valcorreo", msjVal);
			System.out.println("mensaje del correo: " + msjVal);
					
			} else {

			if ((cronograma.getMSJ().trim()).equals("")) {

				request.setAttribute("msje", "Error 99");
				String mensa = (solicitud.getMSJ()).trim();
				String mensa1 = (poliza.getMsj()).trim();
				String mensa2 = (hojaResumen.getMSJ()).trim();

				int mensaIn = mensa.length();
				int mensa1In = mensa1.length();
				int mensa2in = mensa2.length();

				if (mensaIn > 2) {
					cronograma.setMSJ(mensa);
					request.setAttribute("cronograma", cronograma);
					log.debug("Mensaje de error: ", mensa);
				
				} else {
					if (mensa1In > 2) {
						cronograma.setMSJ(mensa1);
						request.setAttribute("cronograma", cronograma);
						log.debug("Mensaje de error: ", mensa1);


					} else {
						if (mensa2in > 2) {
							cronograma.setMSJ(mensa2);
							request.setAttribute("cronograma", cronograma);
							log.debug("Mensaje de error: ", mensa2);

						}

					}

				}

			} else {
				request.setAttribute("msje", "Error 99");
				request.setAttribute("cronograma", cronograma);

			}
		}

		path = View.returnJsp(model, "prestamo/enviarDoc");

		return path;

	}

	private String validaremail(String num) throws Exception {

		String numSinCeros = num.substring(2);
		System.out.println("Número sin ceros: " + numSinCeros);

		Map<String, String> datosCliente = serviceEnvioEmail.getDatoCliente(numSinCeros, parametrosComp);
		String emailCliente = datosCliente.get("email");
		System.out.println("Correo del cliente ws: " + emailCliente);

		RepoLogAuditoria datosCorreo = new RepoLogAuditoria();
		String emailBaseDatos = datosCorreo.correoValidado(numSinCeros);
		System.out.println("Correo del cliente db: " + emailBaseDatos);

		// cuando el cliente no tiene email
		if (emailCliente == null || emailCliente.isEmpty()) {
			return "Actualizar datos de correo";
		}
		// cliente no tiene su correo validado
		if (emailBaseDatos == null || emailBaseDatos.isEmpty()) {

			return "Validar correo";
		}
		// Comparar los correos
		if (emailCliente.equalsIgnoreCase(emailBaseDatos)) {
			System.out.println("Correo valido");
			return "Los correos coinciden";
		} else {
			System.out.println("Los correos no coinciden.");
			return "Los correos no coinciden.";
		}
	}

	private Map<String, String> emailDocYcel(String num) {
		
		String numSinCeros = num.substring(2);
		

		Map<String, String> datosCliente = serviceEnvioEmail.getDatoCliente(numSinCeros, parametrosComp);
		
		System.out.println("emailDocYcel"+ datosCliente);
		
		return datosCliente;
	}

	// TODO GENERAR DOCUMENTO (VER DOCUMENTO)	

	// metodo principal ver doc
	@RequestMapping(value = "verDocumentos", method = RequestMethod.POST)
	@ResponseBody
	public String exportarPDF(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String path = "";
		System.out.println("ver documento");
		String ruta = request.getSession().getServletContext().getRealPath("").toString();
		HttpSession session = request.getSession(false);
		
		
		DatosSesion datosSesion = new DatosSesion();
		datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
		// String usu = datosSesion.nombreUsuario;
		String valor1 = request.getParameter("numero1");
		String cta = request.getParameter("cta");

		String nro_prestamo = cta + valor1;
		String es_platinum = " ";

		CicsSoapConnection cics = new CicsSoapConnection();
		RequestMensajeHost host = new RequestMensajeHost();

		BnPolizaPrestamo poliza = null;

		poliza = host.getEmisionDocumentosPrestamo(nro_prestamo);

		String prima = Funciones.formatearMonto(Funciones.tramaToBigDecimal(poliza.getSprima_des(), 2));

		// HOJA DE RESUMEN

		BodyHojaResumen hojaInput = new BodyHojaResumen();
		BodyHojaResumen hojaOutPut = new BodyHojaResumen();

		hojaInput.cargarData(nro_prestamo);
		hojaInput.toShowData();

		String inputHoja = hojaInput.toString();

		BodyHojaResumen bodyIn1 = new BodyHojaResumen();
		BodyHojaResumen bodyOut1 = null;

		bodyOut1 = cics.enviarTramaHojaResumen(hojaInput, bodyIn1);

		// System.out.println(bodyOut1.toShowData());

		BnHojaResumen hojaResumen = null;

		if (bodyOut1 != null) {
			hojaResumen = new BnHojaResumen();

			hojaResumen.setTOPERACION(bodyOut1.getByTag("DFH-TOPERACION"));
			hojaResumen.setNPRESTAMO(bodyOut1.getByTag("DFH-NPRESTAMO"));
			hojaResumen.setSPRESTAMO(bodyOut1.getByTag("DFH-SPRESTAMO"));
			hojaResumen.setSINTERES(bodyOut1.getByTag("DFH-SINTERES"));
			hojaResumen.setSTASA_IC(bodyOut1.getByTag("DFH-STAS-IC"));
			hojaResumen.setSTASA_IM(bodyOut1.getByTag("DFH-STASA-IM"));
			hojaResumen.setCIA_SEG_DESGV(bodyOut1.getByTag("DFH-CIA-SEG-DESGV"));
			hojaResumen.setPSEGURO_DESGV(bodyOut1.getByTag("DFH-PSEGURO-DESGV"));
			hojaResumen.setPEMISION_DESGV(bodyOut1.getByTag("DFH-PEMISION-DESGV"));
			hojaResumen.setSSEGURO_DESGV(bodyOut1.getByTag("DFH-SSEGURO-DESGV"));
			hojaResumen.setNPOLIZA_DESGV(bodyOut1.getByTag("DFH-NPOLIZA-DESGV"));
			hojaResumen.setCIA_ASEG_CP(bodyOut1.getByTag("DFH-CIA-ASEG-CP"));
			hojaResumen.setSPRIMA_CP(bodyOut1.getByTag("DFH-SPRIMA-CP"));
			hojaResumen.setSEMISION_CP(bodyOut1.getByTag("DFH-SEMISION-CP"));
			hojaResumen.setPREFIJO_CP(bodyOut1.getByTag("DFH-PREFIJO-CP"));
			hojaResumen.setFILLER_CP(bodyOut1.getByTag("DFH-FILLER-CP"));
			hojaResumen.setNPOLIZA_CP(bodyOut1.getByTag("DFH-NPOLIZA-CP"));
			hojaResumen.setSSEGURO_CP(bodyOut1.getByTag("DFH-SSEGURO-CP"));
			hojaResumen.setSENDOSO(bodyOut1.getByTag("DFH-SENDOSO"));
			hojaResumen.setSENVIO(bodyOut1.getByTag("DFH-SENVIO"));
			hojaResumen.setNO_AMORTCAP(bodyOut1.getByTag("DFH-NO-AMORTCAP"));
			hojaResumen.setSI_PAGINT(bodyOut1.getByTag("DFH-SI-PAGINT"));
			hojaResumen.setCERROR(bodyOut1.getByTag("DFH-CERROR"));
			hojaResumen.setMSJ(bodyOut1.getByTag("DFH-MSJ"));

		}

		String saldoPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSPRESTAMO(), 2));
		String saldoInteres = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSINTERES(), 2));
		String saldoTasaIC = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSTASA_IC(), 7));
		String saldoTasaIM = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSTASA_IM(), 7));

		String sSeguroDesgravamen = Funciones
				.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSSEGURO_DESGV(), 2));
		String nPolizaDesgravamen = Funciones.validar_texto_reves(hojaResumen.getNPOLIZA_DESGV());
		String sPrimaCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSPRIMA_CP(), 2));
		String sEmisionCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal11(hojaResumen.getSEMISION_CP()));
		String sSeguroCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSSEGURO_CP(), 2));
		String sEndosoCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSENDOSO(), 2));

		String nPolizaCP = hojaResumen.getNPOLIZA_CP();
		String sEnvioCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(hojaResumen.getSENVIO(), 2));
		String prefijoCP = hojaResumen.getPREFIJO_CP();

		String siPagint = hojaResumen.getSI_PAGINT();
		String noamortcap = hojaResumen.getNO_AMORTCAP();

		GeneracionCronograma cronograma = null;

		try {

			BodyGeneracionCronograma cronogramaInput = new BodyGeneracionCronograma();

			String tipo_prestamo = "05";

			cronogramaInput.cargarData(tipo_prestamo, nro_prestamo);

			System.out.println("Cronograma input :" + cronogramaInput.toShowData());

			String inputCronograma = cronogramaInput.toString();

			BodyGeneracionCronograma bodyIn2 = new BodyGeneracionCronograma();
			BodyGeneracionCronograma cronogramaOutPut = null;

			cronogramaOutPut = cics.enviarTrama(cronogramaInput, bodyIn2);

			System.out.println(cronogramaOutPut.toShowData());

			if (cronogramaOutPut != null) {
				cronograma = new GeneracionCronograma();

				cronograma.setTOPERACION(cronogramaOutPut.getByTag("DFH-TOPERACION-76"));
				cronograma.setNPRESTAMO(cronogramaOutPut.getByTag("DFH-NPRESTAMO-76"));
				cronograma.setFDSBOLSO(cronogramaOutPut.getByTag("DFH-FDSBOLSO-76"));
				cronograma.setSPRESTAMO(cronogramaOutPut.getByTag("DFH-SPRESTAMO-76"));

				// cronograma.setSPRESTAMO(Funciones.getSimMonedaxCuenta(cronogramaOutPut.getByTag("DFH-SPRESTAMO-76"))+ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-SDEUDA-DIA-76"),2)));

				cronograma.setSAMORTIZADO(cronogramaOutPut.getByTag("DFH-SAMORTIZADO-76"));
				cronograma.setSACTUAL(cronogramaOutPut.getByTag("DFH-SACTUAL-76"));
				cronograma.setSDEUDA_D(cronogramaOutPut.getByTag("DFH-SDEUDA-DIA-76"));
				cronograma.setNCUOTAS(cronogramaOutPut.getByTag("DFH-NCUOTAS-76"));
				// cronograma.setMAIL(cronogramaOutPut.getByTag("DFH-CRONOGRAMA"));

				ArrayList<String> bcuota = new ArrayList<String>();
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-1").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-2").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-3").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-4").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-5").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-6").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-7").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-8").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-9").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-10").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-11").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-12").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-13").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-14").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-15").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-16").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-17").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-18").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-19").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-20").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-21").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-22").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-23").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-24").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-25").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-26").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-27").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-28").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-29").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-30").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-31").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-32").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-33").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-34").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-35").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-36").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-37").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-38").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-39").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-40").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-41").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-42").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-43").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-44").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-45").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-46").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-47").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-48").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-49").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-50").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-51").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-52").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-53").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-54").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-55").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-56").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-57").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-58").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-59").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-60").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-61").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-62").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-63").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-64").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-65").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-66").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-67").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-68").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-69").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-70").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-71").trim());
				bcuota.add(cronogramaOutPut.getByTag("DFH-BCUOTA-76-72").trim());
				cronograma.setBCUOTA(bcuota);

				ArrayList<String> acuota = new ArrayList<String>();
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-1").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-2").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-3").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-4").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-5").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-6").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-7").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-8").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-9").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-10").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-11").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-12").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-13").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-14").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-15").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-16").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-17").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-18").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-19").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-20").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-21").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-22").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-23").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-24").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-25").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-26").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-27").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-28").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-29").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-30").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-31").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-32").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-33").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-34").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-35").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-36").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-37").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-38").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-39").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-40").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-41").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-42").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-43").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-44").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-45").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-46").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-47").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-48").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-49").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-50").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-51").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-52").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-53").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-54").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-55").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-56").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-57").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-58").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-59").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-60").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-61").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-62").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-63").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-64").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-65").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-66").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-67").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-68").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-69").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-70").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-71").trim());
				acuota.add(cronogramaOutPut.getByTag("DFH-ACUOTA-76-72").trim());
				cronograma.setACUOTA(acuota);

				ArrayList<String> fvcto = new ArrayList<String>();
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-1").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-2").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-3").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-4").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-5").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-6").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-7").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-8").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-9").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-10").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-11").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-12").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-13").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-14").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-15").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-16").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-17").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-18").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-19").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-20").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-21").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-22").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-23").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-24").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-25").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-26").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-27").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-28").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-29").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-30").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-31").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-32").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-33").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-34").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-35").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-36").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-37").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-38").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-39").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-40").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-41").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-42").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-43").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-44").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-45").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-46").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-47").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-48").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-49").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-50").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-51").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-52").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-53").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-54").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-55").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-56").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-57").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-58").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-59").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-60").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-61").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-62").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-63").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-64").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-65").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-66").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-67").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-68").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-69").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-70").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-71").trim());
				fvcto.add(cronogramaOutPut.getByTag("DFH-FVCTO-76-72").trim());
				cronograma.setFVCTO(fvcto);

				ArrayList<String> fcancel = new ArrayList<String>();
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-1").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-2").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-3").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-4").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-5").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-6").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-7").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-8").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-9").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-10").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-11").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-12").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-13").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-14").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-15").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-16").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-17").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-18").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-19").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-20").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-21").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-22").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-23").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-24").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-25").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-26").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-27").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-28").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-29").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-30").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-31").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-32").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-33").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-34").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-35").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-36").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-37").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-38").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-39").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-40").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-41").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-42").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-43").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-44").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-45").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-46").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-47").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-48").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-49").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-50").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-51").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-52").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-53").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-54").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-55").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-56").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-57").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-58").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-59").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-60").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-61").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-62").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-63").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-64").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-65").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-66").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-67").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-68").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-69").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-70").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-71").trim());
				fcancel.add(cronogramaOutPut.getByTag("DFH-FCANCEL-76-72").trim());
				cronograma.setFCANCEL(fcancel);

				ArrayList<String> gcuota = new ArrayList<String>();
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-1").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-2").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-3").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-4").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-5").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-6").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-7").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-8").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-9").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-10").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-11").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-12").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-13").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-14").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-15").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-16").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-17").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-18").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-19").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-20").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-21").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-22").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-23").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-24").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-25").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-26").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-27").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-28").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-29").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-30").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-31").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-32").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-33").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-34").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-35").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-36").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-37").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-38").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-39").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-40").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-41").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-42").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-43").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-44").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-45").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-46").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-47").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-48").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-49").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-50").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-51").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-52").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-53").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-54").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-55").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-56").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-57").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-58").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-59").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-60").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-61").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-62").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-63").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-64").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-65").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-66").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-67").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-68").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-69").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-70").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-71").trim());
				gcuota.add(cronogramaOutPut.getByTag("DFH-GCUOTA-76-72").trim());
				cronograma.setGCUOTA(gcuota);

				ArrayList<String> samortizacion = new ArrayList<String>();
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-1").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-2").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-3").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-4").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-5").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-6").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-7").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-8").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-9").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-10").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-11").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-12").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-13").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-14").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-15").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-16").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-17").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-18").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-19").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-20").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-21").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-22").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-23").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-24").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-25").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-26").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-27").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-28").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-29").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-30").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-31").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-32").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-33").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-34").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-35").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-36").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-37").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-38").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-39").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-40").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-41").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-42").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-43").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-44").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-45").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-46").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-47").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-48").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-49").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-50").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-51").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-52").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-53").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-54").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-55").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-56").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-57").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-58").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-59").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-60").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-61").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-62").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-63").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-64").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-65").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-66").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-67").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-68").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-69").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-70").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-71").trim());
				samortizacion.add(cronogramaOutPut.getByTag("DFH-SAMORTIZACION-76-72").trim());
				cronograma.setSAMORTIZACION(samortizacion);

				ArrayList<String> sinteres = new ArrayList<String>();
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-1").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-2").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-3").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-4").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-5").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-6").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-7").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-8").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-9").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-10").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-11").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-12").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-13").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-14").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-15").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-16").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-17").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-18").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-19").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-20").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-21").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-22").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-23").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-24").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-25").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-26").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-27").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-28").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-29").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-30").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-31").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-32").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-33").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-34").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-35").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-36").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-37").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-38").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-39").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-40").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-41").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-42").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-43").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-44").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-45").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-46").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-47").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-48").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-49").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-50").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-51").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-52").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-53").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-54").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-55").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-56").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-57").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-58").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-59").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-60").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-61").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-62").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-63").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-64").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-65").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-66").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-67").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-68").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-69").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-70").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-71").trim());
				sinteres.add(cronogramaOutPut.getByTag("DFH-SINTERES-76-72").trim());
				cronograma.setSINTERES(sinteres);

				ArrayList<String> sdesgravamen = new ArrayList<String>();
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-1").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-2").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-3").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-4").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-5").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-6").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-7").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-8").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-9").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-10").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-11").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-12").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-13").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-14").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-15").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-16").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-17").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-18").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-19").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-20").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-21").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-22").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-23").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-24").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-25").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-26").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-27").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-28").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-29").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-30").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-31").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-32").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-33").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-34").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-35").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-36").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-37").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-38").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-39").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-40").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-41").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-42").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-43").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-44").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-45").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-46").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-47").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-48").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-49").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-50").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-51").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-52").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-53").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-54").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-55").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-56").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-57").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-58").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-59").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-60").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-61").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-62").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-63").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-64").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-65").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-66").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-67").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-68").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-69").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-70").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-71").trim());
				sdesgravamen.add(cronogramaOutPut.getByTag("DFH-SDESGRAVAMEN-76-72").trim());
				cronograma.setSDESGRAVAMEN(sdesgravamen);

				ArrayList<String> sdcuota = new ArrayList<String>();
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-1").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-2").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-3").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-4").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-5").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-6").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-7").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-8").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-9").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-10").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-11").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-12").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-13").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-14").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-15").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-16").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-17").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-18").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-19").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-20").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-21").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-22").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-23").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-24").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-25").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-26").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-27").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-28").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-29").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-30").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-31").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-32").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-33").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-34").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-35").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-36").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-37").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-38").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-39").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-40").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-41").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-42").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-43").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-44").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-45").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-46").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-47").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-48").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-49").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-50").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-51").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-52").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-53").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-54").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-55").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-56").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-57").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-58").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-59").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-60").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-61").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-62").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-63").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-64").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-65").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-66").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-67").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-68").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-69").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-70").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-71").trim());
				sdcuota.add(cronogramaOutPut.getByTag("DFH-SCUOTA-76-72").trim());
				cronograma.setSDCUOTA(sdcuota);

				cronograma.setACLIENTE(cronogramaOutPut.getByTag("DFH-ACLIENTE-76").trim());
				cronograma.setDOCUMENTO(cronogramaOutPut.getByTag("DFH-DOCUMENTO-76").trim());
				cronograma.setTELEFONO(cronogramaOutPut.getByTag("DFH-TELEFONO-76").trim());
				cronograma.setDCLIENTE(cronogramaOutPut.getByTag("DFH-DCLIENTE-76").trim());
				cronograma.setDOCUMGAR(cronogramaOutPut.getByTag("DFH-DOCUMGAR-76").trim());
				cronograma.setAGARANTE(cronogramaOutPut.getByTag("DFH-AGARANTE-76").trim());
				cronograma.setDGARANTE(cronogramaOutPut.getByTag("DFH-DGARANTE-76").trim());

				cronograma.setTASA(cronogramaOutPut.getByTag("DFH-TASA-76").trim());

				// cronograma.setTASA(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-TASA-76"),7))+
				// " %");

				// System.out.println("TASA: "+cronograma.getTASA());

				cronograma.setTCEA(cronogramaOutPut.getByTag("DFH-TCEA-76").trim());

				// cronograma.setTCEA(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-TCEA-76"),7))+
				// " %");

				cronograma.setSGCPRO(cronogramaOutPut.getByTag("DFH-SGCPRO-76").trim());

				// cronograma.setSGCPRO(ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(cronogramaOutPut.getByTag("DFH-SGCPRO-76"),2))+
				// " %");

				cronograma.setCERROR(cronogramaOutPut.getByTag("DFH-CERROR-76").trim());
				cronograma.setMSJ(cronogramaOutPut.getByTag("DFH-MSJ-76").trim());

				cronograma.setMSGNO_HOST(cronogramaOutPut.getByTag("msgnoHost").trim());
				cronograma.setMSJE_HOST(cronogramaOutPut.getByTag("msjeHost").trim());
			}

		} catch (Exception e) {
			// log.error(e,"","");
		}

		String fechaDesembolso = cronograma.getFDSBOLSO();
		String diaDesembolso = "";
		String mesDesembolso = "";
		String annioDesembolso = "";

		if (fechaDesembolso.equals("")) {
			fechaDesembolso = "";
		} else {
			annioDesembolso = (cronograma.getFDSBOLSO()).substring(0, 4);
			mesDesembolso = (cronograma.getFDSBOLSO()).substring(4, 6);
			diaDesembolso = (cronograma.getFDSBOLSO()).substring(6, 8);

			fechaDesembolso = diaDesembolso + "/" + mesDesembolso + "/" + annioDesembolso;
			
			//TODO FECHA DESEMBOLSO
			session.setAttribute("fechaDS", fechaDesembolso);
		}

		// Formatear Apellidos y Nombres de Cliente
		String aCliente = cronograma.getACLIENTE();

		if (aCliente.equals("")) {
			aCliente = "";
		} else {
			aCliente = Funciones.validar_texto_reves(cronograma.getACLIENTE());
		}

		// Formatear Apellidos y Nombres de Garante
		String aGarante = cronograma.getAGARANTE();

		if (aGarante.equals("")) {
			aGarante = "";
		} else {
			aGarante = Funciones.validar_texto_reves(cronograma.getAGARANTE());
		}

		// Formatear DNI de Cliente para pagaré
		String dniCliente = cronograma.getDOCUMENTO();

		if (dniCliente.equals("")) {
			dniCliente = "";
		} else {
			// dniCliente = (cronograma.getDOCUMENTO()).substring(4, 14);
			dniCliente = (cronograma.getDOCUMENTO()).trim();
		}

		// Formatear DNI de Cliente para Cronograma
		String dniClienteCronograma = cronograma.getDOCUMENTO();

		if (dniClienteCronograma.equals("")) {
			dniClienteCronograma = "";
		} else {
			// dniClienteCronograma = (cronograma.getDOCUMENTO()).substring(0, 3)+"
			// "+(cronograma.getDOCUMENTO()).substring(4, 14);
			dniClienteCronograma = (cronograma.getDOCUMENTO()).substring(0, 3) + " "
					+ (cronograma.getDOCUMENTO()).substring(4);
		}

		// Formatear Número de Teléfono de Cliente
		String tlfCliente = cronograma.getTELEFONO();

		if (tlfCliente.equals("")) {
			tlfCliente = "";
		} else {
			tlfCliente = cronograma.getTELEFONO();
		}

		// Formatear DNI de Garante
		String dniGarante = cronograma.getDOCUMGAR();

		if (dniGarante.equals("")) {
			dniGarante = "";
		} else {

			dniGarante = (cronograma.getDOCUMGAR()).trim();
		}

		// Formatear Monto de Préstamo
		String deudaTotal = (cronograma.getSPRESTAMO()).trim();

		if (deudaTotal.equals("")) {
			deudaTotal = "";
		} else {
			deudaTotal = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getSPRESTAMO(), 2));
		}

		// Formatear Tasa Int.
		String tasa = cronograma.getTASA();

		if (tasa.equals("")) {
			tasa = "";
		} else {
			tasa = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getTASA(), 7));
		}

		// Formatear TCEA
		String tcea = cronograma.getTCEA();

		if (tcea.equals("")) {
			tcea = "";
		} else {
			tcea = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getTCEA(), 7));
		}

		// Formatear Seguro de Cuota Protegida
		String seguroCP = cronograma.getSGCPRO();

		if (seguroCP.equals("")) {
			seguroCP = "";
		} else {
			seguroCP = Funciones.formatearMonto(Funciones.tramaToBigDecimal(cronograma.getSGCPRO(), 2));
		}

		// Formatear Número de Préstamo para Cronograma

		String nPrestamoCronograma = cronograma.getNPRESTAMO();
		String valor11 = "";
		String valor2 = "";

		if (nPrestamoCronograma.equals("")) {
			nPrestamoCronograma = "";
		} else {
			valor11 = (cronograma.getNPRESTAMO()).substring(0, 11);
			valor2 = (cronograma.getNPRESTAMO()).substring(11, 13);

			nPrestamoCronograma = valor11 + "-" + valor2;
		}

		// Formatear Número de Préstamo para Pagaré

		String nPrestamoPP = cronograma.getNPRESTAMO();

		if (nPrestamoPP.equals("")) {
			nPrestamoPP = "";
		} else {
			nPrestamoPP = cronograma.getNPRESTAMO();
		}

		// Formatear Dirección de Cliente
		String dCliente = cronograma.getDCLIENTE();

		if (dCliente.equals("")) {
			dCliente = "";
		} else {
			dCliente = Funciones.validar_texto_reves(cronograma.getDCLIENTE());
		}

		// Formatear Dirección de Garante
		String dGarante = cronograma.getDGARANTE();

		if (dGarante.equals("")) {
			dGarante = "";
		} else {
			dGarante = Funciones.validar_texto_reves(cronograma.getDGARANTE());
		}

		// Solicitud de prestamo

		BnSolicitudPrestamo solicitud = null;

		BodySolicitudPrestamo solicitudInput = new BodySolicitudPrestamo();

		String tipo_prestamo = "07";

		solicitudInput.cargarData(tipo_prestamo, nro_prestamo);

		System.out.println("Solicitud input :" + solicitudInput.toShowData());

		String inputSolicitud = solicitudInput.toString();

		BodySolicitudPrestamo bodyIn3 = new BodySolicitudPrestamo();
		BodySolicitudPrestamo solicitudOutPut = null;

		solicitudOutPut = cics.enviarTrama(solicitudInput, bodyIn3);

		System.out.println("solicitud:" + solicitudInput.toShowData());

		System.out.println(solicitudOutPut.toShowData());

		if (solicitudOutPut != null) {
			solicitud = new BnSolicitudPrestamo();

			solicitud.setTOPERACION(solicitudOutPut.getByTag("DFH-TOPERACION").trim());
			solicitud.setNPRESTAMO(solicitudOutPut.getByTag("DFH-NPRESTAMO").trim());
			solicitud.setTPRESTAMO(solicitudOutPut.getByTag("DFH-TPRESTAMO").trim());
			solicitud.setFSOLICITUD(solicitudOutPut.getByTag("DFH-FSOLICITUD").trim());
			solicitud.setMODALIDAD(solicitudOutPut.getByTag("DFH-MODALIDAD").trim());
			solicitud.setACLIENTE(solicitudOutPut.getByTag("DFH-ACLIENTE").trim());
			solicitud.setDOCUMENTO(solicitudOutPut.getByTag("DFH-DOCUMENTO").trim());
			solicitud.setFNAC(solicitudOutPut.getByTag("DFH-FNAC").trim());
			solicitud.setECIVIL(solicitudOutPut.getByTag("DFH-ECIVIL").trim());
			solicitud.setSEXO(solicitudOutPut.getByTag("DFH-SEXO"));
			solicitud.setTELEFONO(solicitudOutPut.getByTag("DFH-TELEFONO").trim());
			solicitud.setCELULAR(solicitudOutPut.getByTag("DFH-CELULAR").trim());
			solicitud.setDCLIENTE(solicitudOutPut.getByTag("DFH-DCLIENTE").trim());
			solicitud.setDISTRITO(solicitudOutPut.getByTag("DFH-DISTRITO").trim());
			solicitud.setPROVINCIA(solicitudOutPut.getByTag("DFH-PROVINCIA").trim());
			solicitud.setDPTO(solicitudOutPut.getByTag("DFH-DPTO").trim());
			solicitud.setREFERENCIA(solicitudOutPut.getByTag("DFH-REFERENCIA").trim());
			solicitud.setCORREO(solicitudOutPut.getByTag("DFH-CORREO").trim());
			solicitud.setCORRESPONDENCIA(solicitudOutPut.getByTag("DFH-CORRESPONDENCIA").trim());
			solicitud.setCLABORAL(solicitudOutPut.getByTag("DFH-CLABORAL").trim());
			solicitud.setENTIDAD(solicitudOutPut.getByTag("DFH-ENTIDAD").trim());
			solicitud.setTLABORAL(solicitudOutPut.getByTag("DFH-TLABORAL").trim());
			solicitud.setFINGRESO(solicitudOutPut.getByTag("DFH-FINGRESO").trim());
			solicitud.setSINGRESOS(solicitudOutPut.getByTag("DFH-SINGRESOS").trim());
			solicitud.setACLIENTEG(solicitudOutPut.getByTag("DFH-ACLIENTE-G").trim());
			solicitud.setDOCUMENTOG(solicitudOutPut.getByTag("DFH-DOCUMENTO-G").trim());
			solicitud.setFNACG(solicitudOutPut.getByTag("DFH-FNAC-G").trim());
			solicitud.setECIVILG(solicitudOutPut.getByTag("DFH-ECIVIL-G").trim());
			solicitud.setSEXOG(solicitudOutPut.getByTag("DFH-SEXO-G").trim());
			solicitud.setTELEFONOG(solicitudOutPut.getByTag("DFH-TELEFONO-G").trim());
			solicitud.setCELULARG(solicitudOutPut.getByTag("DFH-CELULAR-G").trim());
			solicitud.setDCLIENTEG(solicitudOutPut.getByTag("DFH-DCLIENTE-G").trim());
			solicitud.setDISTRITOG(solicitudOutPut.getByTag("DFH-DISTRITO-G").trim());
			solicitud.setPROVINCIAG(solicitudOutPut.getByTag("DFH-PROVINCIA-G").trim());
			solicitud.setDPTOG(solicitudOutPut.getByTag("DFH-DPTO-G").trim());
			solicitud.setREFERENCIAG(solicitudOutPut.getByTag("DFH-REFERENCIA-G").trim());
			solicitud.setCORREOG(solicitudOutPut.getByTag("DFH-CORREO-G").trim());
			solicitud.setCORRESPONDENCIAG(solicitudOutPut.getByTag("DFH-CORRESPONDENCIA-G").trim());
			solicitud.setCLABORALG(solicitudOutPut.getByTag("DFH-CLABORAL-G").trim());
			solicitud.setENTIDADG(solicitudOutPut.getByTag("DFH-ENTIDAD-G").trim());
			solicitud.setTLABORALG(solicitudOutPut.getByTag("DFH-TLABORAL-G").trim());
			solicitud.setFINGRESOG(solicitudOutPut.getByTag("DFH-FINGRESO-G").trim());
			solicitud.setSINGRESOSG(solicitudOutPut.getByTag("DFH-SINGRESOS-G").trim());
			solicitud.setSSOLICITADO(solicitudOutPut.getByTag("DFH-SSOLICITADO").trim());
			solicitud.setSABONADO(solicitudOutPut.getByTag("DFH-SABONADO").trim());
			solicitud.setICUOTAP(solicitudOutPut.getByTag("DFH-ICUOTAP").trim());
			solicitud.setIENDOSO(solicitudOutPut.getByTag("DFH-IENDOSO").trim());
			solicitud.setIPGRACIA(solicitudOutPut.getByTag("DFH-IPGRACIA").trim());
			solicitud.setDPAGO(solicitudOutPut.getByTag("DFH-DPAGO").trim());
			solicitud.setTASA(solicitudOutPut.getByTag("DFH-TASA").trim());
			solicitud.setTCEA(solicitudOutPut.getByTag("DFH-TCEA").trim());
			solicitud.setCCUENTA(solicitudOutPut.getByTag("DFH-CCUENTA").trim());
			solicitud.setCCUENTAG(solicitudOutPut.getByTag("DFH-CCUENTA-G").trim());
			solicitud.setSDESGRAVAMEN(solicitudOutPut.getByTag("DFH-SDESGRAVAMEN").trim());
			solicitud.setSCUOTAP(solicitudOutPut.getByTag("DFH-SCUOTAP").trim());
			solicitud.setNCUOTAS(solicitudOutPut.getByTag("DFH-NCUOTAS").trim());

			// solicitud.setCMONEDA(solicitudOutPut.getByTag("DFH-CMONEDA").trim());

			String ind = solicitudOutPut.getByTag("DFH-CMONEDA");
			int ind1 = ind.length();

			if (ind1 < 4) {
				solicitud.setCMONEDA(ind);
			} else {

				solicitud.setCMONEDA(ind.substring(0, 4));

				solicitud.setINDICADOR(ind.substring(ind1 - 1, ind1));

			}

			solicitud.setSCUOTA(solicitudOutPut.getByTag("DFH-SCUOTA").trim());
			solicitud.setNPRESTRENOV(solicitudOutPut.getByTag("DFH-NPREST-RENOV").trim());
			solicitud.setSDEUDA(solicitudOutPut.getByTag("DFH-SDEUDA").trim());
			solicitud.setSNETO(solicitudOutPut.getByTag("DFH-SNETO").trim());
			solicitud.setGESTOR(solicitudOutPut.getByTag("DFH-GESTOR").trim());
			solicitud.setSUPER(solicitudOutPut.getByTag("DFH-SUPER").trim());
			solicitud.setAGENCIA(solicitudOutPut.getByTag("DFH-AGENCIA").trim());
			solicitud.setCERROR(solicitudOutPut.getByTag("DFH-CERROR").trim());
			solicitud.setMSJ(solicitudOutPut.getByTag("DFH-MSJ").trim());
			solicitud.setMSGNO_HOST(solicitudOutPut.getByTag("msgnoHost").trim());
			solicitud.setMSJE_HOST(solicitudOutPut.getByTag("msjeHost").trim());
		}

		// ***************************************************SOLICITUD***************************************************
		// Formatear Número de Préstamo
		String numeroPrestamo = solicitud.getNPRESTAMO();

		if (numeroPrestamo.equals("")) {
			numeroPrestamo = " ";
		} else {
			numeroPrestamo = solicitud.getNPRESTAMO();
		}

		String numeroPrestamoRenov = solicitud.getNPRESTRENOV();

		if (numeroPrestamoRenov.equals("")) {
			numeroPrestamoRenov = " ";
		} else {
			numeroPrestamoRenov = solicitud.getNPRESTRENOV();
		}

		// Formatear Tipo de Préstamo
		String tipoPrestamo = solicitud.getTPRESTAMO();

		if (tipoPrestamo.equals("")) {
			tipoPrestamo = " ";
		} else {
			tipoPrestamo = solicitud.getTPRESTAMO();
		}

		// Formatear Fecha de Solicitud
		String fechaSolicitudPrestamo = solicitud.getFSOLICITUD();

		if (fechaSolicitudPrestamo.equals("")) {
			fechaSolicitudPrestamo = " ";
		} else {

			fechaSolicitudPrestamo = solicitud.getFSOLICITUD();
		}
		// System.out.println("FECHA SOLICITUD DE PRÉSTAMO: "+fechaSolicitudPrestamo);

		// Formatear Modalidad de Préstamo
		String modalidadPrestamo = solicitud.getMODALIDAD();

		if (modalidadPrestamo.equals("")) {
			modalidadPrestamo = " ";
		} else {
			modalidadPrestamo = solicitud.getMODALIDAD();
		}

		// Formatear Nombre del Cliente
		String aCliente1 = solicitud.getACLIENTE();

		if (aCliente1.equals("")) {
			aCliente1 = " ";
		} else {
			aCliente1 = Funciones.validar_texto_reves(solicitud.getACLIENTE());
		}

		// Formatear DNI de Cliente
		String dniCliente1 = solicitud.getDOCUMENTO();

		if (dniCliente1.equals("")) {
			dniCliente1 = " ";
		} else {
			dniCliente1 = solicitud.getDOCUMENTO();
		}

		// Formatear Fecha de Nacimiento de Cliente
		String fechNacCliente = solicitud.getFNAC();

		if (fechNacCliente.equals("")) {
			fechNacCliente = " ";
		} else {
			fechNacCliente = (solicitud.getFNAC()).replace("/", "-");
		}

		// Formatear Estado Civil de Cliente
		String eCivilCliente = solicitud.getECIVIL();
		int longitudECivilCliente = (solicitud.getECIVIL()).length();

		if (eCivilCliente.equals("")) {
			eCivilCliente = " ";
		} else {
			eCivilCliente = (solicitud.getECIVIL()).substring(2, longitudECivilCliente);
		}

		// Formatear Sexo de Cliente
		String sexoCliente = solicitud.getSEXO();

		if (sexoCliente.equals("")) {
			sexoCliente = " ";
		} else {
			sexoCliente = solicitud.getSEXO();
		}

		// Formatear Teléfono de Cliente
		String telefonoCliente1 = solicitud.getTELEFONO();

		if (telefonoCliente1.equals("") || telefonoCliente1.equals("0000000000")
				|| telefonoCliente1.equals("0000000")) {

			telefonoCliente1 = " ";
		} else {
			telefonoCliente1 = solicitud.getTELEFONO();
		}

		// Formatear Celular de Cliente
		String celularCliente1 = solicitud.getCELULAR();

		if (celularCliente1.equals("") || celularCliente1.equalsIgnoreCase("0000000000")) {
			celularCliente1 = " ";
		} else {
			celularCliente1 = solicitud.getCELULAR();
		}

		// Formatear Dirección de Cliente
		String direccCliente = solicitud.getDCLIENTE();

		if (direccCliente.equals("")) {
			direccCliente = " ";
		} else {
			direccCliente = Funciones.validar_texto_reves(solicitud.getDCLIENTE());
		}

		// Formatear Distrito de Cliente
		String distritoCliente = solicitud.getDISTRITO();

		if (distritoCliente.equals("")) {
			distritoCliente = " ";
		} else {
			distritoCliente = Funciones.validar_texto_reves(solicitud.getDISTRITO());
		}

		// Formatear Provincia de Cliente
		String provinciaCliente = solicitud.getPROVINCIA();

		if (provinciaCliente.equals("")) {
			provinciaCliente = " ";
		} else {
			provinciaCliente = Funciones.validar_texto_reves(solicitud.getPROVINCIA());
		}

		// Formatear Departamento de Cliente
		String dptoCliente = solicitud.getDPTO();

		if (dptoCliente.equals("")) {
			dptoCliente = " ";
		} else {
			dptoCliente = Funciones.validar_texto_reves(solicitud.getDPTO());
		}

		// Formatear Referencia de Cliente
		String referenciaCliente = solicitud.getREFERENCIA();

		if (referenciaCliente.equals("")) {
			referenciaCliente = " ";
		} else {
			referenciaCliente = Funciones.validar_texto_reves(solicitud.getREFERENCIA());
		}

		// Formatear Correo de Cliente
		String correoCliente = solicitud.getCORREO();

		if (correoCliente.equals("")) {
			correoCliente = "";
		} else {
			correoCliente = Funciones.validar_texto_reves(solicitud.getCORREO());
		}
		// System.out.println("CORREO CLIENTE: "+correoCliente);

		// Formatear Correspondencia de Cliente
		String correspondenciaCliente = solicitud.getCORRESPONDENCIA();

		if (correspondenciaCliente.equals("")) {
			correspondenciaCliente = " ";
		} else {
			correspondenciaCliente = solicitud.getCORRESPONDENCIA();
		}

		// Formatear Condición Laboral de Cliente
		String cLaboralCliente = solicitud.getCLABORAL();

		if (cLaboralCliente.equals("")) {
			cLaboralCliente = " ";
		} else {
			cLaboralCliente = Funciones.validar_texto_reves(solicitud.getCLABORAL());
		}

		// Formatear Entidad de Cliente
		String entidadCliente = solicitud.getENTIDAD();

		if (entidadCliente.equals("")) {
			entidadCliente = " ";
		} else {
			entidadCliente = Funciones.validar_texto_reves(solicitud.getENTIDAD());
		}

		// Formatear Teléfono Laboral de Cliente
		String telefonoLaboralCliente = solicitud.getTLABORAL();

		if (telefonoLaboralCliente.equals("")) {
			telefonoLaboralCliente = " ";
		} else {
			telefonoLaboralCliente = solicitud.getTLABORAL();
		}

		// Formatear Fecha de Ingreso de Cliente
		String fechaIngresoCliente = solicitud.getFINGRESO();

		if ((fechaIngresoCliente.equals("")) || (fechaIngresoCliente.equals("/ /"))) {
			fechaIngresoCliente = " ";
		} else {
			fechaIngresoCliente = solicitud.getFINGRESO();
		}

		// Formatear Monto de Ingresos de Cliente
		String montoIngresosCliente = solicitud.getSINGRESOS();

		if (montoIngresosCliente.equals("")) {
			montoIngresosCliente = " ";
		} else {
			montoIngresosCliente = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSINGRESOS(), 2));

		}

		// Formatear Nombre del Garante
		String aGarante1 = solicitud.getACLIENTEG().trim();

		if (aGarante1.equals("")) {
			aGarante1 = "";
		} else {
			aGarante1 = Funciones.validar_texto_reves(solicitud.getACLIENTEG());
		}
		// System.out.println("NOMBRE GARANTE: "+aGarante);
		// Formatear DNI de Garante
		String dniGarante1 = solicitud.getDOCUMENTOG();

		if (dniGarante1.equals("")) {
			dniGarante1 = " ";
		} else {
			dniGarante1 = (solicitud.getDOCUMENTOG()).replace("-", " ");
		}

		// Formatear Fecha de Nacimiento de Garante
		String fechNacGarante = solicitud.getFNACG();

		if (fechNacGarante.equals("")) {
			fechNacGarante = " ";
		} else {
			fechNacGarante = solicitud.getFNACG();
		}

		// Formatear Estado Civil de Garante
		String eCivilGarante = solicitud.getECIVILG();
		int longitudECivilGarante = (solicitud.getECIVILG()).length();

		if (eCivilGarante.equals("")) {
			eCivilGarante = " ";
		} else {
			eCivilGarante = (solicitud.getECIVILG()).substring(2, longitudECivilGarante);
		}

		// Formatear Sexo de Garante
		String sexoGarante = solicitud.getSEXOG();

		if (sexoGarante.equals("")) {
			sexoGarante = " ";
		} else {
			sexoGarante = solicitud.getSEXOG();
		}

		// Formatear Teléfono de Garante
		String telefonoGarante = solicitud.getTELEFONOG();

		if (telefonoGarante.equals("")) {
			telefonoGarante = " ";
		} else {
			telefonoGarante = solicitud.getTELEFONOG();
		}

		// Formatear Celular de Garante
		String celularGarante = solicitud.getCELULARG();

		if (celularGarante.equals("")) {
			celularGarante = " ";
		} else {
			celularGarante = solicitud.getCELULARG();
		}

		// Formatear Dirección de Garante
		String direccGarante = solicitud.getDCLIENTEG();

		if (direccGarante.equals("")) {
			direccGarante = " ";
		} else {
			direccGarante = Funciones.validar_texto_reves(solicitud.getDCLIENTEG());
		}

		// Formatear Distrito de Garante
		String distritoGarante = solicitud.getDISTRITOG();

		if (distritoGarante.equals("")) {
			distritoGarante = " ";
		} else {
			distritoGarante = Funciones.validar_texto_reves(solicitud.getDISTRITOG());
		}

		// Formatear Provincia de Garante
		String provinciaGarante = solicitud.getPROVINCIAG();

		if (provinciaGarante.equals("")) {
			provinciaGarante = " ";
		} else {
			provinciaGarante = Funciones.validar_texto_reves(solicitud.getPROVINCIAG());
		}

		// Formatear Departamento de Garante
		String dptoGarante = solicitud.getDPTOG();

		if (dptoGarante.equals("")) {
			dptoGarante = " ";
		} else {
			dptoGarante = Funciones.validar_texto_reves(solicitud.getDPTOG());
		}

		// Formatear Referencia de Garante
		String referenciaGarante = solicitud.getREFERENCIAG();

		if (referenciaGarante.equals("")) {
			referenciaGarante = " ";
		} else {
			referenciaGarante = Funciones.validar_texto_reves(solicitud.getREFERENCIAG());
		}

		// Formatear Correo de Garante
		String correoGarante = solicitud.getCORREOG();

		if (correoGarante.equals("")) {
			correoGarante = "";
		} else {
			correoGarante = Funciones.validar_texto_reves(solicitud.getCORREOG());
		}

		// Formatear Correspondencia de Garante
		String correspondenciaGarante = solicitud.getCORRESPONDENCIAG();

		if (correspondenciaGarante.equals("")) {
			correspondenciaGarante = " ";
		} else {
			correspondenciaGarante = solicitud.getCORRESPONDENCIAG();
		}

		// Formatear Condición Laboral de Garante
		String cLaboralGarante = solicitud.getCLABORALG();

		if (cLaboralGarante.equals("")) {
			cLaboralGarante = " ";
		} else {
			cLaboralGarante = Funciones.validar_texto_reves(solicitud.getCLABORALG());
		}

		// Formatear Entidad de Garante
		String entidadGarante = solicitud.getENTIDADG();

		if (entidadGarante.equals("")) {
			entidadGarante = " ";
		} else {
			entidadGarante = Funciones.validar_texto_reves(solicitud.getENTIDADG());
		}

		// Formatear Teléfono Laboral de Garante
		String telefonoLaboralGarante = solicitud.getTLABORALG();

		if (telefonoLaboralGarante.equals("")) {
			telefonoLaboralGarante = " ";
		} else {
			telefonoLaboralGarante = solicitud.getTLABORALG();
		}

		// Formatear Fecha de Ingreso de Garante
		String fechaIngresoGarante = solicitud.getFINGRESOG();

		if (fechaIngresoGarante.equals("")) {
			fechaIngresoGarante = " ";
		} else {
			fechaIngresoGarante = solicitud.getFINGRESOG();
		}

		// Formatear Monto de Ingresos de Garante
		String montoIngresosGarante = solicitud.getSINGRESOSG();

		if ((montoIngresosGarante.equals("")) || (aGarante.equals(""))) {
			montoIngresosGarante = " ";
		} else {
			montoIngresosGarante = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSINGRESOSG(), 2));

		}

		// Formatear Monto Solicitado de Préstamo
		String montoSolicitadoPrestamo = solicitud.getSSOLICITADO();

		if (montoSolicitadoPrestamo.equals("")) {
			montoSolicitadoPrestamo = " ";
		} else {
			montoSolicitadoPrestamo = Funciones
					.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSSOLICITADO(), 2));
		}

		// Formatear Monto Abonado de Préstamo
		String montoAbonadoPrestamo = solicitud.getSABONADO();

		if (montoAbonadoPrestamo.equals("")) {
			montoAbonadoPrestamo = " ";
		} else {

			montoAbonadoPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSABONADO(), 2));

		}

		// Formatear Monto Solicitado de Préstamo
		String iCuotaProtegida = solicitud.getICUOTAP();

		if (iCuotaProtegida.equals("")) {
			iCuotaProtegida = " ";
		} else {
			if (iCuotaProtegida.equals("S")) {
				iCuotaProtegida = "Sí";
			}
			if (iCuotaProtegida.equals("N")) {
				iCuotaProtegida = "No";
			}
		}

		// Formatear I Cuota Protegida de Préstamo
		String iCuotaProtegidaPrestamo = solicitud.getICUOTAP();

		if (iCuotaProtegidaPrestamo.equals("")) {
			iCuotaProtegidaPrestamo = " ";
		} else {
			if (iCuotaProtegidaPrestamo.equals("S")) {
				iCuotaProtegidaPrestamo = "Sí";
			}
			if (iCuotaProtegidaPrestamo.equals("N")) {
				iCuotaProtegidaPrestamo = "No";
			}
		}

		// Formatear I Endoso de Préstamo
		String iEndosoPrestamo = solicitud.getIENDOSO();

		if (iEndosoPrestamo.equals("")) {
			iEndosoPrestamo = " ";
		} else {
			if (iEndosoPrestamo.equals("S")) {
				iEndosoPrestamo = "Sí";
			}
			if (iEndosoPrestamo.equals("N")) {
				iEndosoPrestamo = "No";
			}
		}

		// Formatear I Periodo de Gracia de Préstamo
		String iPeriodoGraciaPrestamo = solicitud.getIPGRACIA();

		if (iPeriodoGraciaPrestamo.equals("")) {
			iPeriodoGraciaPrestamo = " ";
		} else {
			if (iPeriodoGraciaPrestamo.equals("S")) {
				iPeriodoGraciaPrestamo = "Sí";
			}
			if (iPeriodoGraciaPrestamo.equals("N")) {
				iPeriodoGraciaPrestamo = "No";
			}
		}

		// Formatear Día de Vencimiento de Pago de Préstamo
		String diaVencimientoPagoPrestamo = solicitud.getDPAGO();

		if (diaVencimientoPagoPrestamo.equals("")) {
			diaVencimientoPagoPrestamo = " ";
		} else {
			diaVencimientoPagoPrestamo = solicitud.getDPAGO();
		}

		// Formatear Tasa de Préstamo
		String tasaPrestamo = solicitud.getTASA();

		if (tasaPrestamo.equals("")) {
			tasaPrestamo = " ";
		} else {
			tasaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getTASA(), 9));
		}

		// Formatear TCEA de Préstamo
		String tceaPrestamo = solicitud.getTCEA();

		if (tceaPrestamo.equals("")) {
			tceaPrestamo = " ";
		} else {
			tceaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getTCEA(), 2));
		}

		// Formatear Cuenta de Cliente
		String cuentaCliente = solicitud.getCCUENTA();

		if (cuentaCliente.equals("")) {
			cuentaCliente = " ";
		} else {
			cuentaCliente = solicitud.getCCUENTA();
		}

		// Formatear Cuenta de Garante
		String cuentaGarante = solicitud.getCCUENTAG();

		if (cuentaGarante.equals("")) {
			cuentaGarante = " ";
		} else {
			cuentaGarante = solicitud.getCCUENTAG();
		}

		// Formatear Seguro de Desgravamen de Préstamo
		String seguroDesgravamenPrestamo = solicitud.getSDESGRAVAMEN();

		if (seguroDesgravamenPrestamo.equals("")) {
			seguroDesgravamenPrestamo = " ";
		} else {

			// 000000000826000

			// seguroDesgravamenPrestamo =
			// ObjectUtil.formatearMonto(ObjectUtil.tramaToBigDecimal(solicitud.getSDESGRAVAMEN(),6));
			int longDes = seguroDesgravamenPrestamo.length();

			// 000000013300000
			String decimal = seguroDesgravamenPrestamo.substring(longDes - 7);
			String deci = decimal.substring(0, 5);

			String entero = seguroDesgravamenPrestamo.substring(0, 8);

			// System.out.println("primer entero "+entero);

			if (entero.equalsIgnoreCase("0000000")) {
				entero = "0";
			} else {
				entero = Funciones.eliminarCerosAlaIzquierda(entero);
			}

			if (entero.equalsIgnoreCase("")) {
				entero = "0";
			}

			// System.out.println("decimal "+decimal);
			// System.out.println("entero "+entero);

			// System.out.println("TOTAL "+entero+"."+deci);
			String segDes = entero + "." + deci;

			seguroDesgravamenPrestamo = segDes;
		}

		// Formatear seguro de Cuota Protegida de Préstamo
		String seguroCuotaProtegidaPrestamo = solicitud.getSCUOTAP();

		if (seguroCuotaProtegidaPrestamo.equals("")) {
			seguroCuotaProtegidaPrestamo = " ";
		} else {
			seguroCuotaProtegidaPrestamo = Funciones
					.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSCUOTAP(), 2));
		}

		// Formatear Número de Cuotas de Préstamo
		String numeroCuotasPrestamo = solicitud.getNCUOTAS();

		if (numeroCuotasPrestamo.equals("")) {
			numeroCuotasPrestamo = " ";
		} else {
			numeroCuotasPrestamo = solicitud.getNCUOTAS();
		}

		// Formatear Tipo de Moneda de Préstamo
		String tipoMonedaPrestamo = solicitud.getCMONEDA();

		if (tipoMonedaPrestamo.equals("")) {
			tipoMonedaPrestamo = " ";
		} else {
			if (tipoMonedaPrestamo.equals("SOL")) {
				tipoMonedaPrestamo = "Soles";
			}
			;
		}

		// Formatear Monto de Cuotas de Préstamo
		String montoCuotasPrestamo = solicitud.getSCUOTA();

		if (montoCuotasPrestamo.equals("")) {
			montoCuotasPrestamo = " ";
		} else {
			montoCuotasPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSCUOTA(), 2));
		}

		// Formatear Número de Préstamo de Renovación
		String numeroPrestamoRenovacion = solicitud.getNPRESTAMO();

		if (numeroPrestamoRenovacion.equals("")) {
			numeroPrestamoRenovacion = " ";
		} else {
			numeroPrestamoRenovacion = solicitud.getNPRESTAMO();
		}

		// Formatear Saldo de Deuda de Préstamo
		String saldoDeudaPrestamo = solicitud.getSDEUDA();

		if (saldoDeudaPrestamo.equals("")) {
			saldoDeudaPrestamo = " ";
		} else {
			saldoDeudaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSDEUDA(), 2));
		}

		// Formatear Monto Neto de Deuda de Préstamo
		String montoDeudaPrestamo = solicitud.getSNETO();

		if (montoDeudaPrestamo.equals("")) {
			montoDeudaPrestamo = " ";
		} else {
			montoDeudaPrestamo = Funciones.formatearMonto(Funciones.tramaToBigDecimal(solicitud.getSNETO(), 2));
		}

		// Formatear Gestor de Agencia
		String gestorAgencia = solicitud.getGESTOR();

		if (gestorAgencia.equals("")) {
			gestorAgencia = " ";
		} else {
			gestorAgencia = solicitud.getGESTOR();
		}

		// Formatear Supervisor de Agencia
		String supervisorPrestamo = solicitud.getSUPER();

		if (supervisorPrestamo.equals("")) {
			supervisorPrestamo = " ";
		} else {
			supervisorPrestamo = solicitud.getSUPER();
		}

		// Formatear Agencia
		String agencia = solicitud.getAGENCIA();

		if (agencia.equals("")) {
			agencia = " ";
		} else {
			agencia = solicitud.getAGENCIA();
		}
		// ****************************************************SOLICITUD***************************************************

		String secpoliza = poliza.getSec_poliza();
		String acliente = poliza.getAcliente();
		String finivigencia = poliza.getFini_vigencia();
		String ftervigencia = poliza.getFter_vigencia();
		String tipodoc = poliza.getTdoc() + "    " + poliza.getNdoc();
		String sexo = poliza.getSexo();
		String fenac = poliza.getFecha_nac();
		String nacionalidad = poliza.getNacionalidad();
		String estcivil = poliza.getEcivil();
		String telfijo = poliza.getTelefono();
		String telmovil = "";
		String ctrabajo = poliza.getClaboral();
		String direccion = poliza.getDireccion();
		String dis = "";
		String correo = "";
		String nprestamo = poliza.getCcuenta() + poliza.getCdsbolso();
		String oficina = poliza.getCagencia() + "   " + poliza.getClaboral();
		String codvendedor = poliza.getCusuario();
		String cuota = poliza.getNcuotas() + " Meses";

		String certificado = Funciones.eliminarCerosAlaIzquierda((hojaResumen.getPREFIJO_CP())) + "-"
				+ hojaResumen.getNPRESTAMO();

		// GENERACION DE PDF

		response.setContentType("application/pdf");
		response.addHeader("Content-Disposition",
				"attachment; filename=" + "Prestamo_Multired_" + nro_prestamo + ".pdf");
		// exporter = new JRPdfExporter();

		// -->> itext docprestamo
		Document document = new Document();
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		// PdfCopy copy = new PdfCopy(document,baos);
		PdfWriter copy = null;
		try {
			// pdfprestamo
			copy = PdfWriter.getInstance(document, baos);
			copy.setInitialLeading(5);
		} catch (DocumentException e) {

		}

		document.open();

		try {

			Calendar fecha = new GregorianCalendar();

			int ano111 = fecha.get(Calendar.YEAR);
			int mes111 = (fecha.get(Calendar.MONTH)) + 1;
			int dia111 = fecha.get(Calendar.DAY_OF_MONTH);

			String anoo22 = String.valueOf(ano111);
			String mess22 = String.valueOf(mes111);
			String diaa22 = String.valueOf(dia111);

			if (mess22.length() == 1) {
				mess22 = "0" + mess22;
			}
			if (diaa22.length() == 1) {
				diaa22 = "0" + diaa22;
			}
			String fechaEnv = diaa22 + "/" + mess22 + "/" + anoo22;

			int hora = fecha.get(Calendar.HOUR_OF_DAY);
			int min = fecha.get(Calendar.MINUTE);
			int seg = fecha.get(Calendar.SECOND);

			String horaEnv = hora + ":" + min + ":" + seg;

			Principal codUsu = request.getUserPrincipal();

			// usuario de seguridad
			String usuario = codUsu.getName();

			// document.add(creaPDFGenera(nprestamo, datosSesion.getCodUsuario(),fechaEnv,
			// horaEnv));

			document.add(creaPDFGenera(nprestamo, usuario, fechaEnv, horaEnv));

			// 1 Solicitud de crédito

			String tipo = solicitud.getIENDOSO();

			document.add(creaPDFSolicitudPrestamo(numeroPrestamoRenov, nro_prestamo, tipoPrestamo,
					fechaSolicitudPrestamo, modalidadPrestamo, aCliente1, dniCliente1, fechNacCliente, eCivilCliente,
					sexoCliente, telefonoCliente1, celularCliente1, direccCliente, distritoCliente, provinciaCliente,
					dptoCliente, referenciaCliente, correoCliente, correspondenciaCliente, cLaboralCliente,
					entidadCliente, telefonoLaboralCliente, fechaIngresoCliente, montoIngresosCliente, aGarante1,
					dniGarante1, fechNacGarante, eCivilGarante, sexoGarante, telefonoGarante, celularGarante,
					direccGarante, distritoGarante, provinciaGarante, dptoGarante, referenciaGarante, correoGarante,
					correspondenciaGarante, cLaboralGarante, entidadGarante, telefonoLaboralGarante,
					fechaIngresoGarante, montoIngresosGarante, montoSolicitadoPrestamo, montoAbonadoPrestamo,
					iCuotaProtegidaPrestamo, iEndosoPrestamo, iPeriodoGraciaPrestamo, diaVencimientoPagoPrestamo,
					tasaPrestamo, tceaPrestamo, cuentaCliente, cuentaGarante, seguroDesgravamenPrestamo,
					seguroCuotaProtegidaPrestamo, numeroCuotasPrestamo, tipoMonedaPrestamo, montoCuotasPrestamo,
					numeroPrestamoRenovacion, saldoDeudaPrestamo, montoDeudaPrestamo, gestorAgencia, supervisorPrestamo,
					agencia, oficina, tipo));

			// 2 Cronograma

			// si queda comentado
			// document.add(creaPDFCronograma(telefonoCliente1,fechaDesembolso,aCliente,dniClienteCronograma,tlfCliente,dCliente,aGarante,dniGarante,deudaTotal,cronograma.getSPRESTAMO(),nPrestamoCronograma,tasa,tcea,seguroCP,dGarante,cronograma.getNCUOTAS(),cronograma.getFVCTO(),cronograma.getSAMORTIZACION(),cronograma.getSINTERES(),cronograma.getSDESGRAVAMEN(),cronograma.getSDCUOTA(),cronograma.getACUOTA()));

			// 3 Hoja de Resumen

			ConsultaImagen dao = null;
			BufferedImage image = null;
			byte[] imageByte = null;

			dao = new ConsultaImagen();
			String codFirma1 = Constante.FIRMA1;
			imageByte = dao.consultarFirma1(codFirma1);
			Image firm1 = Image.getInstance(imageByte);
			firm1 = Image.getInstance(firm1);
			firm1.scalePercent(50);

			dao = new ConsultaImagen();
			String codFirma2 = Constante.FIRMA2;
			imageByte = dao.consultarFirma2(codFirma2);
			Image firm2 = Image.getInstance(imageByte);
			firm2 = Image.getInstance(firm2);
			firm2.scalePercent(50);

			Image logoBN = Image
					.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
			logoBN = Image.getInstance(logoBN);
			logoBN.setAlignment(Image.NO_BORDER);
			logoBN.setAlignment(Image.RIGHT);
			logoBN.scalePercent(60f);

			document.add(logoBN);

			String tasaPoliza = solicitud.getSDESGRAVAMEN();

			document.add(creaPDFHojaResumen(hojaResumen, tasaPoliza, montoAbonadoPrestamo, saldoPrestamo, saldoInteres,
					saldoTasaIC, saldoTasaIM, sSeguroDesgravamen, nPolizaDesgravamen, sPrimaCP, sEmisionCP, nPolizaCP,
					sSeguroCP, sEndosoCP, sEnvioCP, siPagint, finivigencia, prefijoCP, noamortcap,
					cronograma.getSDESGRAVAMEN(), cronograma.getNCUOTAS(), seguroDesgravamenPrestamo,
					hojaResumen.getCIA_SEG_DESGV(), (solicitud.getCORRESPONDENCIA()).substring(2)));

			PdfPTable table = new PdfPTable(2);
			table.setWidthPercentage(100);
			table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

			String agen = (solicitud.getAGENCIA()).substring(0, 4);
			// String agen = "0010";

			System.out.println("Agenciaaaa filtro" + agen);

			ConsultaImagen daoAgencia = null;

			daoAgencia = new ConsultaImagen();

			String agenDB = dao.consultarAgencia(agen);

			// valida agencia

			if (agen.equals(agenDB)) {

				table.addCell(firm1);
				table.addCell(firm2);
				document.add(table);

				PdfPTable linea = new PdfPTable(2);
				linea.setWidthPercentage(100);
				linea.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea.addCell("      _______________________________");
				linea.addCell("      _______________________________");
				document.add(linea);

				Paragraph firma = new Paragraph("FIRMA DEL BANCO");
				firma.getFont().setSize(10);

				PdfPTable banco = new PdfPTable(2);
				banco.setWidthPercentage(100);
				banco.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				banco.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				banco.addCell(firma);
				banco.addCell(firma);
				document.add(banco);

				dao = new ConsultaImagen();
				String codNombre1 = Constante.NOMBRE1;
				String nombre1 = dao.consultarNombre1(codNombre1);

				String codNombre2 = Constante.NOMBRE2;
				String nombre2 = dao.consultarNombre2(codNombre2);

				Paragraph nom1 = new Paragraph(nombre1);
				nom1.getFont().setSize(10);
				Paragraph nom2 = new Paragraph(nombre2);
				nom2.getFont().setSize(10);

				PdfPTable nombre = new PdfPTable(2);
				nombre.setWidthPercentage(100);
				nombre.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				nombre.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				nombre.addCell(nom1);
				nombre.addCell(nom2);
				document.add(nombre);

				PdfPTable espacio1 = new PdfPTable(1);
				espacio1.setWidthPercentage(100);
				espacio1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				espacio1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
				espacio1.addCell("");
				document.add(espacio1);

				Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
				firma2.getFont().setSize(10);

				PdfPTable wee = new PdfPTable(1);
				wee.setWidthPercentage(100);
				wee.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				wee.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
				PdfPCell cell3 = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
				cell3.setBorder(Rectangle.NO_BORDER);
				cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell3.setColspan(1);
				cell3.setPadding(0);
				wee.addCell(cell3);
				wee.addCell(cell3);
				document.add(wee);

				PdfPTable linea3 = new PdfPTable(1);
				linea3.setWidthPercentage(100);
				linea3.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

				PdfPCell cell2 = new PdfPCell(
						new Phrase("F.OP-433-E-V05-GPIF", FontFactory.getFont(FontFactory.HELVETICA, 7)));
				cell2.setBorder(Rectangle.NO_BORDER);
				cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell2.setColspan(1);
				cell2.setPadding(0);

				linea3.addCell(cell2);
				document.add(linea3);

				PdfPTable piePagina = new PdfPTable(1);
				piePagina.setWidthPercentage(100);
				piePagina.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				piePagina.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				PdfPCell cell = new PdfPCell(
						new Phrase("Pág. 02 de 02", FontFactory.getFont(FontFactory.HELVETICA, 7)));
				cell.setBorder(Rectangle.NO_BORDER);
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setColspan(1);
				cell.setPadding(0);
				piePagina.addCell(cell);

			} else

			{

				PdfPTable lineaEs1 = new PdfPTable(2);
				lineaEs1.setWidthPercentage(100);
				lineaEs1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				lineaEs1.addCell("        ");
				lineaEs1.addCell("        ");
				document.add(lineaEs1);

				PdfPTable lineaEs = new PdfPTable(2);
				lineaEs.setWidthPercentage(100);
				lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				lineaEs.addCell("        ");
				lineaEs.addCell("        ");
				document.add(lineaEs);

				document.add(lineaEs);

				document.add(lineaEs);

				document.add(lineaEs);

				PdfPTable linea = new PdfPTable(2);
				linea.setWidthPercentage(100);
				linea.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea.addCell("      _______________________________");
				linea.addCell("      _______________________________");
				document.add(linea);

				// Paragraph firma = new Paragraph("FIRMA DEL BANCO");
				// firma.getFont().setSize(10);

				PdfPTable linea31 = new PdfPTable(2);
				linea31.setWidthPercentage(100);

				linea31.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea31.addCell("                      FIRMA DEL BANCO         ");
				linea31.addCell("                      FIRMA DEL BANCO           ");

				document.add(linea31);

				PdfPTable espacio1 = new PdfPTable(1);
				espacio1.setWidthPercentage(100);
				espacio1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				espacio1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
				PdfPCell cell3 = new PdfPCell(new Phrase(" ", FontFactory.getFont(FontFactory.HELVETICA, 6)));
				cell3.setBorder(Rectangle.NO_BORDER);
				cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell3.setColspan(1);
				cell3.setPadding(0);
				espacio1.addCell(cell3);
				espacio1.addCell(cell3);
				document.add(espacio1);

				PdfPTable linea3 = new PdfPTable(1);
				linea3.setWidthPercentage(100);
				linea3.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

				PdfPCell cell2 = new PdfPCell(
						new Phrase("F.OP-433-E-V05-GPIF", FontFactory.getFont(FontFactory.HELVETICA, 7)));
				cell2.setBorder(Rectangle.NO_BORDER);
				cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell2.setColspan(1);
				cell2.setPadding(0);

				linea3.addCell(cell2);
				document.add(linea3);

				PdfPTable piePagina = new PdfPTable(1);
				piePagina.setWidthPercentage(100);
				piePagina.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				piePagina.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				PdfPCell cell = new PdfPCell(
						new Phrase("Pág. 02 de 02", FontFactory.getFont(FontFactory.HELVETICA, 7)));
				cell.setBorder(Rectangle.NO_BORDER);
				cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
				cell.setColspan(1);
				cell.setPadding(0);
				piePagina.addCell(cell);

			}

			document.add(codigo());

			// impreso

			String correspPoliza = correspondenciaCliente.substring(0, 1);

			if (correspPoliza.equalsIgnoreCase("N") || correspPoliza.equalsIgnoreCase("V")) {

				ConsultaImagen daoSolicitud1_1 = null;
				byte[] imageByteSolicitud1_1 = null;

				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(6);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					// String key = g.getKey();
					PdfReader reader2 = new PdfReader(pdf);
					int numeroPagina = reader2.getNumberOfPages();

					for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
						if (pageNum == 1) {

							document.add(espacios());
							document.add(creaPDFPolizaUnoAdulto(telefonoCliente1, secpoliza, acliente, finivigencia,
									tipodoc, sexo, fenac, nacionalidad, correoCliente, estcivil, telfijo,
									celularCliente1, ctrabajo, direccion, distritoCliente, provinciaCliente,
									dptoCliente, nprestamo, agencia, codvendedor));

						}
					}
					document.newPage();

				}

				Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(7);
				for (Entry<String, InputStream> g : resultado2.entrySet()) {
					InputStream pdf = g.getValue();
					// String key = g.getKey();
					PdfReader reader2 = new PdfReader(pdf);
					int numeroPagina = reader2.getNumberOfPages();
					for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
						if (pageNum == 1) {

							document.add(espacios());
							document.add(creaPDFPolizaDosAdulto(secpoliza, cuota, finivigencia, ftervigencia, nprestamo,
									acliente, tipodoc, correoCliente, direccion));
						}
					}
					document.newPage();

				}

				ConsultaImagen daoCondiciones1 = null;
				byte[] imageByteCondiciones1 = null;

				// hojas poliza
				Map<String, InputStream> resultadotem = new ConsultaDocumentoImpl().buscarPdf(3);
				for (Entry<String, InputStream> g : resultadotem.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
					}
					document.newPage();

				}

			} else {

				if (correspPoliza.equalsIgnoreCase("S") || correspPoliza.equalsIgnoreCase("T")) {

					Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(5);
					for (Entry<String, InputStream> g : resultado.entrySet()) {
						InputStream pdf = g.getValue();
						// String key = g.getKey();
						PdfReader reader2 = new PdfReader(pdf);
						int numeroPagina = reader2.getNumberOfPages();

						for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
							document.newPage();
							PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
							copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
							if (pageNum == 1) {

								document.add(espacios());
								document.add(creaPDFPolizaUnoAdulto(telefonoCliente1, secpoliza, acliente, finivigencia,
										tipodoc, sexo, fenac, nacionalidad, correoCliente, estcivil, telfijo,
										celularCliente1, ctrabajo, direccion, distritoCliente, provinciaCliente,
										dptoCliente, nprestamo, agencia, codvendedor));

							}
						}
						document.newPage();

					}
					Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(4);
					for (Entry<String, InputStream> g : resultado2.entrySet()) {
						InputStream pdf = g.getValue();
						// String key = g.getKey();
						PdfReader reader2 = new PdfReader(pdf);
						int numeroPagina = reader2.getNumberOfPages();

						for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
							document.newPage();
							PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
							copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
							if (pageNum == 1) {

								document.add(espacios());
								document.add(creaPDFPolizaDosAdultoOtro(secpoliza, cuota, finivigencia, ftervigencia,
										nprestamo, acliente, tipodoc, correoCliente, direccion));
							}
						}
						document.newPage();

					}

					Map<String, InputStream> resultadotem = new ConsultaDocumentoImpl().buscarPdf(2);
					for (Entry<String, InputStream> g : resultadotem.entrySet()) {
						InputStream pdf = g.getValue();
						PdfReader readerTemporal = new PdfReader(pdf);
						int numeroPagina = readerTemporal.getNumberOfPages();

						for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
							document.newPage();
							PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
							copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
						}

					}

					PdfPTable linea4 = new PdfPTable(2);
					linea4.setWidthPercentage(100);
					linea4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea4.addCell("                                              ");
					linea4.addCell("                                              ");
					document.add(linea4);

					PdfPTable linea444 = new PdfPTable(2);
					linea444.setWidthPercentage(100);
					linea444.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea444.addCell("                                              ");
					linea444.addCell("                                              ");
					document.add(linea4);

					PdfPTable linea5 = new PdfPTable(2);
					linea5.setWidthPercentage(100);
					linea5.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea5.addCell("                                              ");
					linea5.addCell("                                              ");
					/*
					 * document.add(linea5);
	
					 */

				} else {

					if (correspPoliza.equalsIgnoreCase("E")) {

					}

				}

			}

			Image logoPositiva = Image
					.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/positiva.jpg"));
			logoPositiva = Image.getInstance(logoPositiva);
			logoPositiva.scalePercent(50);

			if (prima.equalsIgnoreCase("0.00")) {

				document.newPage();
				PdfPTable linea4 = new PdfPTable(2);
				linea4.setWidthPercentage(100);
				linea4.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea4.addCell("                                              ");
				linea4.addCell("                                              ");
				document.add(linea4);

				PdfPTable linea444 = new PdfPTable(2);
				linea444.setWidthPercentage(100);
				linea444.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea444.addCell("                                              ");
				linea444.addCell("                                              ");
				document.add(linea4);

				PdfPTable linea5 = new PdfPTable(2);
				linea5.setWidthPercentage(100);
				linea5.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea5.addCell("                                              ");
				linea5.addCell("                                              ");

				document.add(creaPDFCartaInstruccion(fechaSolicitudPrestamo, cLaboralCliente, entidadCliente, aCliente1,
						dniCliente1, aGarante1, dniGarante1));

				// Clausulas generales y especificas

				// doc3 exportarprestamo
				System.out.println("PRIMA CERO DOC3 CLAUSULA-EXPORTPREST");
				Image logoBN2 = Image
						.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
				logoBN2 = Image.getInstance(logoBN2);
				logoBN2.setAlignment(Image.NO_BORDER);
				logoBN2.setAlignment(Image.LEFT);
				logoBN2.scalePercent(60f);
				Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(0);
				for (Entry<String, InputStream> g : resultado2.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
					}
					document.newPage();

				}
				// document.add(Testeopdf.clausulasGPageFinal2(fechaEnv,dniCliente1,aCliente1,firm1,firm2));

				String parametro = "0";
				if (agen.equals(agenDB)) {

					document.add(Testeopdf.clausulasGPageFinal2(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
							parametro, aGarante1, dniGarante1));

				} else {

					Image firmVacio = null;

					document.add(Testeopdf.clausulasGPageFinal2(fechaEnv, dniCliente1, aCliente1, firmVacio, firmVacio,
							agen, parametro, aGarante1, dniGarante1));

				}

				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(1);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
					}
					document.newPage();

				}

				if (agen.equals(agenDB)) {

					document.add(Testeopdf.clausulasGPageFinal3(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
							aGarante1, dniGarante1, parametro));

				} else {

					Image firmVacio = null;

					document.add(Testeopdf.clausulasGPageFinal3(fechaEnv, dniCliente1, aCliente1, firmVacio, firmVacio,
							agen, aGarante1, dniGarante1, parametro));

				}
				document.newPage();

				PdfPTable fechadoc = new PdfPTable(2);
				fechadoc.setWidthPercentage(100);
				fechadoc.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				fechadoc.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				fechadoc.addCell("  FECHA   ");

				document.add(fechadoc);

				// document.add(prueba());

				document.add(creaPDFCronograma(aGarante1, direccGarante, tceaPrestamo, telefonoCliente1,
						fechaDesembolso, aCliente, dniClienteCronograma, tlfCliente, dCliente, aGarante, dniGarante,
						deudaTotal, cronograma.getSPRESTAMO(), nPrestamoCronograma, tasa, tcea, seguroCP,
						cronograma.getNCUOTAS(), cronograma.getFVCTO(), cronograma.getSAMORTIZACION(),
						cronograma.getSINTERES(), cronograma.getSDESGRAVAMEN(), cronograma.getSDCUOTA(),
						cronograma.getACUOTA()));

				// crono1

				dao = new ConsultaImagen();
				String codFirma12 = Constante.FIRMA1;
				imageByte = dao.consultarFirma1(codFirma12);
				Image firm12 = Image.getInstance(imageByte);
				firm12 = Image.getInstance(firm12);
				firm12.scalePercent(50);

				dao = new ConsultaImagen();
				String codFirma22 = Constante.FIRMA2;
				imageByte = dao.consultarFirma2(codFirma22);
				Image firm22 = Image.getInstance(imageByte);
				firm22 = Image.getInstance(firm22);
				firm22.scalePercent(50);

				PdfPTable table2 = new PdfPTable(2);
				table2.setWidthPercentage(100);
				table2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				table2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

				String agenCrono = (solicitud.getAGENCIA()).substring(0, 4);

				String agenDBCrono = dao.consultarAgencia(agenCrono);

				if (agenCrono.equals(agenDBCrono)) {

					table2.addCell(firm1);
					table2.addCell(firm2);
					document.add(table2);

					dao = new ConsultaImagen();
					String codNombre12 = Constante.NOMBRE1;
					String nombre12 = dao.consultarNombre1(codNombre12);

					String codNombre22 = Constante.NOMBRE2;
					String nombre22 = dao.consultarNombre2(codNombre22);

					Paragraph nom12 = new Paragraph(nombre12);
					nom12.getFont().setSize(10);
					Paragraph nom22 = new Paragraph(nombre22);
					nom22.getFont().setSize(10);

					PdfPTable nombre222 = new PdfPTable(2);
					nombre222.setWidthPercentage(100);
					nombre222.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					nombre222.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					nombre222.addCell(nom12);
					nombre222.addCell(nom22);
					document.add(nombre222);

					PdfPTable espacio12 = new PdfPTable(1);
					espacio12.setWidthPercentage(100);
					espacio12.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					espacio12.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
					espacio12.addCell("");
					document.add(espacio12);

				} else

				{

					PdfPTable lineaEs1 = new PdfPTable(2);
					lineaEs1.setWidthPercentage(100);
					lineaEs1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs1.addCell("        ");
					lineaEs1.addCell("        ");
					document.add(lineaEs1);

					PdfPTable lineaEs = new PdfPTable(2);
					lineaEs.setWidthPercentage(100);
					lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs.addCell("        ");
					lineaEs.addCell("        ");
					document.add(lineaEs);

				}
		
				PdfPTable linea2 = new PdfPTable(2);
				linea2.setWidthPercentage(100);
				linea2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				linea2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				linea2.addCell("      ____________________________");
				linea2.addCell("      ____________________________");
				document.add(linea2);

				Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
				firma2.getFont().setSize(10);

				PdfPTable banco2 = new PdfPTable(2);
				banco2.setWidthPercentage(100);
				banco2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				banco2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				banco2.addCell(firma2);
				banco2.addCell(firma2);
				document.add(banco2);

			} else {

				Map<String, InputStream> resultado3 = new ConsultaDocumentoImpl().buscarPdf(8);
				for (Entry<String, InputStream> g : resultado3.entrySet()) {
					InputStream pdf = g.getValue();
					// String key = g.getKey();
					PdfReader reader2 = new PdfReader(pdf);
					int numeroPagina = reader2.getNumberOfPages();
					for (int pageNum = 1; pageNum <= numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(reader2, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
						if (pageNum == 1) {

							document.add(espacios(3));
							document.add(creaPDFPolizaCertificadoSeguroCuotaPPre(certificado, logoPositiva, secpoliza,
									acliente, finivigencia, ftervigencia, tipodoc, sexo, fenac, nacionalidad, estcivil,
									telefonoCliente1, celularCliente1, ctrabajo, direccion, dis, correoCliente,
									nprestamo, oficina, codvendedor, montoSolicitadoPrestamo, numeroCuotasPrestamo,
									tasaPrestamo, tceaPrestamo, prima, 9));
						}
					}
					document.newPage();

				}

				// ---------------------------------------- FIN SEGURO CUOTA PROTEGIDA
				// 2-----------------------------------------

				document.add(creaPDFCartaInstruccion(fechaSolicitudPrestamo, cLaboralCliente, entidadCliente, aCliente1,
						dniCliente1, aGarante1, dniGarante1));

				// doc4 exportarprestamo
				System.out.println("PRIMA DIEFERENTE CERO DOC4 CLAUSULA-EXPORTPREST");

				Image logoBN2 = Image
						.getInstance(this.getClass().getClassLoader().getResource("/assets/img/header/LogoBN.jpg"));
				logoBN2 = Image.getInstance(logoBN2);
				logoBN2.setAlignment(Image.NO_BORDER);
				logoBN2.setAlignment(Image.LEFT);
				logoBN2.scalePercent(60f);

				Map<String, InputStream> resultado2 = new ConsultaDocumentoImpl().buscarPdf(0);
				for (Entry<String, InputStream> g : resultado2.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
					}
					document.newPage();

				}

				String parametro = "0";
				document.add(Testeopdf.clausulasGPageFinal2(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						parametro, aGarante1, dniGarante1));
				// OTRO PDF
				Map<String, InputStream> resultado = new ConsultaDocumentoImpl().buscarPdf(1);
				for (Entry<String, InputStream> g : resultado.entrySet()) {
					InputStream pdf = g.getValue();
					PdfReader readerTemporal = new PdfReader(pdf);
					int numeroPagina = readerTemporal.getNumberOfPages();

					for (int pageNum = 1; pageNum < numeroPagina; pageNum++) {
						document.newPage();
						PdfImportedPage page = copy.getImportedPage(readerTemporal, pageNum);
						copy.getDirectContent().addTemplate(page, 0, 0); // Agregar la página importada
					}
					document.newPage();

				}
				document.add(Testeopdf.clausulasGPageFinal3(fechaEnv, dniCliente1, aCliente1, firm1, firm2, agen,
						aGarante1, dniGarante1, parametro));
				document.newPage();

				PdfPTable fechadoc = new PdfPTable(2);
				fechadoc.setWidthPercentage(100);
				fechadoc.getDefaultCell().setBorder(Rectangle.NO_BORDER);
				fechadoc.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
				fechadoc.addCell("  FECHA   ");

				document.add(fechadoc);

				// document.add(prueba());

				document.add(creaPDFCronograma(aGarante1, direccGarante, tceaPrestamo, telefonoCliente1,
						fechaDesembolso, aCliente, dniClienteCronograma, tlfCliente, dCliente, aGarante, dniGarante,
						deudaTotal, cronograma.getSPRESTAMO(), nPrestamoCronograma, tasa, tcea, seguroCP,
						cronograma.getNCUOTAS(), cronograma.getFVCTO(), cronograma.getSAMORTIZACION(),
						cronograma.getSINTERES(), cronograma.getSDESGRAVAMEN(), cronograma.getSDCUOTA(),
						cronograma.getACUOTA()));

				String agenCrono = (solicitud.getAGENCIA()).substring(0, 4);

				String agenDBCrono = dao.consultarAgencia(agenCrono);

				if (agenCrono.equals(agenDBCrono)) {
					// crono2

					PdfPTable table2 = new PdfPTable(2);
					table2.setWidthPercentage(100);
					table2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

					table2.addCell(firm1);
					table2.addCell(firm2);
					document.add(table2);

					dao = new ConsultaImagen();
					String codNombre1 = Constante.NOMBRE1;
					String nombre1 = dao.consultarNombre1(codNombre1);

					String codNombre2 = Constante.NOMBRE2;
					String nombre2 = dao.consultarNombre2(codNombre2);

					Paragraph nom1 = new Paragraph(nombre1);
					nom1.getFont().setSize(10);
					Paragraph nom2 = new Paragraph(nombre2);
					nom2.getFont().setSize(10);

					PdfPTable nombre = new PdfPTable(2);
					nombre.setWidthPercentage(100);
					nombre.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					nombre.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					nombre.addCell(nom1);
					nombre.addCell(nom2);
					document.add(nombre);

					PdfPTable linea2 = new PdfPTable(2);
					linea2.setWidthPercentage(100);
					linea2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					linea2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea2.addCell("    _________________________");
					linea2.addCell("    _________________________");
					document.add(linea2);

					Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
					firma2.getFont().setSize(10);

					PdfPTable banco2 = new PdfPTable(2);
					banco2.setWidthPercentage(100);
					banco2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					banco2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					banco2.addCell(firma2);
					banco2.addCell(firma2);
					document.add(banco2);

				} else

				{

					PdfPTable lineaEs1 = new PdfPTable(2);
					lineaEs1.setWidthPercentage(100);
					lineaEs1.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs1.addCell("        ");
					lineaEs1.addCell("        ");
					document.add(lineaEs1);

					PdfPTable lineaEs = new PdfPTable(2);
					lineaEs.setWidthPercentage(100);
					lineaEs.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					lineaEs.addCell("        ");
					lineaEs.addCell("        ");
					document.add(lineaEs);

					PdfPTable linea2 = new PdfPTable(2);
					linea2.setWidthPercentage(100);
					linea2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					linea2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					linea2.addCell("      _______________________________");
					linea2.addCell("      _______________________________");
					document.add(linea2);

					Paragraph firma2 = new Paragraph("FIRMA DEL BANCO");
					firma2.getFont().setSize(10);

					PdfPTable banco2 = new PdfPTable(2);
					banco2.setWidthPercentage(100);
					banco2.getDefaultCell().setBorder(Rectangle.NO_BORDER);
					banco2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
					banco2.addCell(firma2);
					banco2.addCell(firma2);
					document.add(banco2);

				}

			}

			// FIN DEL CRONOGRAMA

		} catch (DocumentException e) {

		}
		
		try {
		// Cierre del documento PDF
		document.close();
		
		// Convertir el PDF a un arreglo de bytes
		byte[] ba = baos.toByteArray();

		if (ba != null && ba.length > 0) {
		
		session.setAttribute("bytePDF", ba);
		
		//TODO PDF SESION
		// Codificar el PDF en Base64 y almacenarlo en la sesión
		String pdfBase64 = Base64Utils.encodeToString(ba);
		
		session.setAttribute("docPDF", pdfBase64);

		// Configurar la respuesta HTTP para la descarga del PDF
		response.setHeader("Expires", "0");
		response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
		response.setHeader("Pragma", "public");
		response.setContentType("application/pdf");
		response.setContentLength(baos.size());

		// Escribir el PDF en la respuesta para la descarga
		ServletOutputStream outputStream = response.getOutputStream();
		baos.writeTo(outputStream);
		outputStream.flush();
		outputStream.close();
	
	     // Configurar atributos para respuesta exitosa
		request.setAttribute("pdfcod", "0000");        
		request.setAttribute("pfdmsj", "PDF generado y enviado exitosamente.");
        System.out.println("PDF generado y enviado para descarga.");
   
    } else {
        // Manejo de error si el arreglo de bytes está vacío o nulo
        request.setAttribute("pdfcod", "9999");
        request.setAttribute("pfdmsj", "Error al generar el PDF.");
    }
} catch (Exception e) {
    // Manejo de errores excepcionales
    e.printStackTrace();
    request.setAttribute("pdfcod", "9999");
    request.setAttribute("pfdmsj", "Error inesperado al generar el PDF: " + e.getMessage());
}

		path = View.returnJsp(model, "prestamo/enviarDoc");

		return path;
	}

	

	@RequestMapping(value = "/getEnviarCorreoDoc/", method = RequestMethod.POST)
		@ResponseBody
		public Object EnviarCorreoDoc(@RequestBody Map<String, String> requestBody, HttpServletRequest request,
				HttpServletResponse response) throws ParametrosCompException, ExternalException {

			Map<String, String> respuesta = new HashMap<String, String>();
			compService.asignarParametros();
			CustomUser usuario = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			log.debug("Usuario autenticado: " + usuario.getUsername(), Constant.LOGGER_DEBUG_NIVEL_1);
			
			RepoLogAuditoria pdf = new RepoLogAuditoria();
			BnEnviarDoc enviardoc = new BnEnviarDoc();
			
			String prestamo = requestBody.get("numeroP");
			String nombreCliente = requestBody.get("nombreP");
			String numerodoc = requestBody.get("numDocP");
			//String correoCliente = requestBody.get("correoP");
				
			// TODO: Correo yapumelanie9 enviar pdf
			String correoCliente = "yapumelanie9@gmail.com";
			
			HttpSession session = request.getSession(false);		
			String pdfBase64 = (String) session.getAttribute("docPDF");	
			byte[] docBytes = (byte[]) session.getAttribute("bytePDF");
			String fecha = (String) session.getAttribute("fechaDS");
			
			boolean estado = servicioEnvioCorreo.enviarCorreoPdf(correoCliente, nombreCliente, pdfBase64, fecha, prestamo);
			
			LocalDateTime fechaHoraActual = LocalDateTime.now();

			DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern("yyyy-MM-dd");
			String fechaenvio = fechaHoraActual.format(formatoFecha);
			LocalDate fechaOpe = LocalDate.parse(fechaenvio, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
			Date sqlDate = Date.valueOf(fechaOpe);
			DateTimeFormatter formatoHora = DateTimeFormatter.ofPattern("HH:mm:ss");
			String hora = fechaHoraActual.format(formatoHora);
			
			enviardoc.setNUMPRESTAMO(prestamo);
			enviardoc.setTIPDOC("1");
			enviardoc.setNUMDOC(numerodoc);
			enviardoc.setCORREO(correoCliente);
			enviardoc.setNOMBRES(nombreCliente);
			enviardoc.setFECHA(fechaenvio);
			enviardoc.setHORA(hora);
			enviardoc.setUSUARIO(usuario.getUsername());
			enviardoc.setAGENCIA(usuario.getCodAgencia());
			enviardoc.setESTADO("ENVIADO");
			enviardoc.setPDF(docBytes);
			
			
			if (estado) {
				
				System.out.print("Correo enviado pdf: " + enviardoc);	
				
				try {
					
					String resultado = pdf.cargaDocumentopdf(enviardoc, sqlDate);

					if ("ENVIADO".equals(resultado)) {
						
						System.out.print("Correo enviado y guardado en bd " + enviardoc);
						respuesta.put("cod", "0000");
						respuesta.put("msj", "Se enviaron los documentos de manera satisfactoria");
						
						session.removeAttribute("docPDF");
						session.removeAttribute("bytePDF");
						session.removeAttribute("fechaDS");
						
					} else {
						respuesta.put("cod", "9998");
						respuesta.put("msj",
								"Correo enviado, pero no se pudo guardar en la base de datos");
					}
				} catch (Exception e) {

					respuesta.put("cod", "9998");
					respuesta.put("msj", "Error interno al guardar datos");
				}
							
			} else {
				respuesta.put("cod", "9999");
				respuesta.put("msj", "No se envio el correo. Ocurrio un error");

			}

			String json = "";
			try {
				// Convertir el mapa a JSON
				ObjectMapper mapper = new ObjectMapper();
				json = mapper.writeValueAsString(respuesta);

			} catch (Exception e) {
				e.printStackTrace();
			}
			return json;

		}	

	// TODO Seguimiento documento - formulario
			@RequestMapping("seguimientoEnvio")
			public String seguiEnvio(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {

				String path = "";
				DatosSesion datosSesion = Util.getIdUsuario(request);
				HttpSession sesion = request.getSession();

				// iniciando la ventana

				path = View.returnJsp(model, "prestamo/segEnvio");

				return path;

			}
			
			@RequestMapping(value = "/getConsultarREEnvio/", method = RequestMethod.POST)
			@ResponseBody
			public Object DatosClienteReenvio(@RequestBody Map<String, String> requestBody, HttpServletRequest request)
					throws ParametrosCompException, ExternalException, SQLException {

				compService.asignarParametros();

				String num = requestBody.get("numerop");
				RepoLogAuditoria datos = new RepoLogAuditoria();
				
				HttpSession session = request.getSession(false);	
				Map<String, String> respuesta = new HashMap<>();
				
				CustomUser usuario = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
							
				LocalDateTime fechaHoraActual = LocalDateTime.now();
				DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern("yyyy-MM-dd");
				String fecha_auditoria = fechaHoraActual.format(formatoFecha);
				
				BnEnviarDoc datosR = datos.buscardatosReenvio(num);
				String fecha_envio = datos.buscarfechaEnvio(num);
				String estado_envio = datos.buscarestado(num);
				String accion = Constant.CONSULTAR_PRESTAMO; 
				
				BnAuditoriaPM au = new BnAuditoriaPM();
				au.setPrestamo(num);
				au.setFecha(fecha_auditoria);
				au.setCusuario(usuario.getUsername());
				au.setCoficina(usuario.getCodAgencia());
				au.setCliente(datosR.getNOMBRES());
				au.setTipodoc(datosR.getTIPDOC());
				au.setNumerodoc(datosR.getNUMDOC());
				au.setCelular("");
				au.setCorreo(datosR.getCORREO());
				au.setSit_envio(estado_envio);
				au.setAccion(accion);		
						
					if(datosR == null || datosR.getNUMPRESTAMO() == null || datosR.getNUMPRESTAMO().isEmpty() ||
					        datosR.getNOMBRES() == null || datosR.getNOMBRES().isEmpty() ||
					        datosR.getTIPDOC() == null || datosR.getTIPDOC().isEmpty() ||
					        datosR.getNUMDOC() == null || datosR.getNUMDOC().isEmpty() ||
					        datosR.getCORREO() == null || datosR.getCORREO().isEmpty() ||
					        datosR.getESTADO() == null || datosR.getESTADO().isEmpty())  
							{
						
						respuesta.put("cod", "8888");
					    respuesta.put("msj", "No se envio el correo por primera vez");					
					}else {
					respuesta.put("estado", estado_envio);
					respuesta.put("prestamo", datosR.getNUMPRESTAMO());
					respuesta.put("nombres", datosR.getNOMBRES());
					respuesta.put("tipodoc", datosR.getTIPDOC());
					respuesta.put("numdoc", datosR.getNUMDOC());
					respuesta.put("correo", datosR.getCORREO());
					
					String consulta = datos.cargarAuditoriaPM(au);
					System.out.println("Cargar datos en auditoria CONSULTAR " +consulta) ;
					
					respuesta.put("cod", "0000");
					respuesta.put("msj", "Datos consultados con exito");
					
					session.setAttribute("ReenviarPDF", datosR.getPDF());
					session.setAttribute("prest", datosR.getNUMPRESTAMO());
					session.setAttribute("dniRE", datosR.getNUMDOC());
					session.setAttribute("tipodocRE", datosR.getTIPDOC());
					session.setAttribute("nombresRE", datosR.getNOMBRES());
					session.setAttribute("correoRE", datosR.getCORREO());
					session.setAttribute("fecha_primer_envio", fecha_envio);
					session.setAttribute("estado_envio",estado_envio );
					
				}
				
				
				String json = "";
				try {
					// Convertir el mapa a JSON
					ObjectMapper mapper = new ObjectMapper();
					json = mapper.writeValueAsString(respuesta);

				} catch (Exception e) {
					e.printStackTrace();
				}
				return json;
			}
			
		
			@RequestMapping(value = "verDocumentosR", method = RequestMethod.POST)
			@ResponseBody
			public String verdocReenviar(ModelMap model, HttpServletRequest request, HttpServletResponse response) throws Exception {
			    String path = "";
			    System.out.println("ver documento reenviar");

			    HttpSession session = request.getSession(false);
			    DatosSesion datosSesion = (DatosSesion) request.getSession().getAttribute("datosSesion");
			    RepoLogAuditoria datos = new RepoLogAuditoria();
			    
			    CustomUser usuario = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
				LocalDateTime fechaHoraActual = LocalDateTime.now();
				DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern("yyyy-MM-dd");
				String fecha_auditoria = fechaHoraActual.format(formatoFecha);
				
				String accion = Constant.DESCARGAR_PDF; 
			    String numdoc = (String)session.getAttribute("dniRE");
			    String tipodoc = (String)session.getAttribute("tipodocRE");
			    String nombre = (String)session.getAttribute("nombresRE");
			    String correo = (String)session.getAttribute("correoRE");
			    String estado_envio = (String)session.getAttribute("estado_envio");
			    String prestamo = (String)session.getAttribute("prest");
			    
			    BnAuditoriaPM au = new BnAuditoriaPM();
				au.setPrestamo(prestamo);
				au.setFecha(fecha_auditoria);
				au.setCusuario(usuario.getUsername());
				au.setCoficina(usuario.getCodAgencia());
				au.setCliente(nombre);
				au.setTipodoc(tipodoc);
				au.setNumerodoc(numdoc);
				au.setCelular("");
				au.setCorreo(correo);
				au.setSit_envio(estado_envio);
				au.setAccion(accion);		
			   			    
			    String nombredoc= "Prestamo_Multired_"+session.getAttribute("prest")+".pdf";
			    
			    // Obtener los bytes del PDF desde la sesión
			    byte[] ba = (byte[]) session.getAttribute("ReenviarPDF");
			    
			    if (ba == null) {
			        System.out.println("No se encontró el PDF en la sesión.");
			        return "error"; // O manejar de otra manera
			    }

			    try {
			        // Configurar la respuesta HTTP para la descarga del PDF
			        response.setHeader("Expires", "0");
			        response.setHeader("Cache-Control", "must-revalidate, post-check=0, pre-check=0");
			        response.setHeader("Pragma", "public");
			        response.setContentType("application/pdf");
			        response.setHeader("Content-Disposition", "attachment; filename=\""+ nombredoc +"\"");
			        response.setContentLength(ba.length); 

			        // Escribir el PDF en la respuesta para la descarga
			        ServletOutputStream outputStream = response.getOutputStream();
			        outputStream.write(ba); // Escribir directamente desde los bytes obtenidos
			        outputStream.flush();
			        outputStream.close();
			        
			        String consulta = datos.cargarAuditoriaPM(au);
					System.out.println("Cargar datos en auditoria DESGARGAR " +consulta) ;
			        
			        System.out.println("PDF generado y enviado para descarga.");

			        path = View.returnJsp(model, "prestamo/segEnvio");
			        return path;
			      //  return "exito";

			    } catch (Exception e) {
			        // Manejo de errores excepcionales
			        e.printStackTrace();
			        System.out.println("Error inesperado al generar el PDF: " + e.getMessage());
			        return "error"; 
			    }
			    
			    
			}
			
			
			@RequestMapping(value = "/getEnviarREEnvio/", method = RequestMethod.POST)
			@ResponseBody
			public Object REEnviarCorreoDoc(@RequestBody Map<String, String> requestBody, HttpServletRequest request,
					HttpServletResponse response) throws ParametrosCompException, ExternalException {

				Map<String, String> respuesta = new HashMap<String, String>();
				compService.asignarParametros();
				CustomUser usuario = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
				log.debug("Usuario autenticado: " + usuario.getUsername(), Constant.LOGGER_DEBUG_NIVEL_1);
			    RepoLogAuditoria datos = new RepoLogAuditoria();

				HttpSession session = request.getSession(false);
				RepoLogAuditoria pdf = new RepoLogAuditoria();
				BnEnviarDoc enviardoc = new BnEnviarDoc();

				String accion = Constant.REENVIAR_PDF_PRESTAMO; 
				
				String pdfBase64 ="";
				String prestamo = (String) session.getAttribute("prest");
				String numdoc = (String) session.getAttribute("dniRE");
				String nombre = (String) session.getAttribute("nombresRE");
				String fechaDe = (String) session.getAttribute("fecha_primer_envio");
				String tipodoc = (String) session.getAttribute("tipodocRE");
				String correoCliente = requestBody.get("correop");
				
					
		 			 
				 byte[] ba = (byte[]) session.getAttribute("ReenviarPDF");
				 if (ba != null) {
					 	 pdfBase64 = Base64Utils.encodeToString(ba);
					    System.out.println(pdfBase64); 
					} else {
					    System.out.println("No hay datos del pdf en la sesión.");
					}
				 
				 
				 System.out.println("FECHA DE DESEMBOLSO: "+ fechaDe);
				 
				boolean estado = servicioEnvioCorreo.enviarCorreoPdf(correoCliente, nombre, pdfBase64, fechaDe, prestamo);
					
				LocalDateTime fechaHoraActual = LocalDateTime.now();

				DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern("yyyy-MM-dd");
				String fechaenvio = fechaHoraActual.format(formatoFecha);
				LocalDate fechaOpe = LocalDate.parse(fechaenvio, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
				Date sqlDate = Date.valueOf(fechaOpe);

				DateTimeFormatter formatoHora = DateTimeFormatter.ofPattern("HH:mm:ss");
				String hora = fechaHoraActual.format(formatoHora);

				enviardoc.setNUMPRESTAMO(prestamo);
				enviardoc.setTIPDOC(tipodoc);
				enviardoc.setNUMDOC(numdoc);
				enviardoc.setNOMBRES(nombre);
				enviardoc.setCORREO(correoCliente);
				enviardoc.setFECHA(fechaenvio);
				enviardoc.setHORA(hora);
				enviardoc.setUSUARIO(usuario.getUsername());
				enviardoc.setAGENCIA(usuario.getCodAgencia());
				enviardoc.setESTADO("REENVIADO");
				enviardoc.setPDF(ba);
				
				BnAuditoriaPM au = new BnAuditoriaPM();
				au.setPrestamo(prestamo);
				au.setFecha(fechaenvio);
				au.setCusuario(usuario.getUsername());
				au.setCoficina(usuario.getCodAgencia());
				au.setCliente(nombre);
				au.setTipodoc(tipodoc);
				au.setNumerodoc(numdoc);
				au.setCelular("");
				au.setCorreo(correoCliente);
				au.setSit_envio(enviardoc.getESTADO());
				au.setAccion(accion);
				
				if (estado) {
					System.out.print("CORREO REENVIADO..." );
					
					try {
						
						String resultado = pdf.cargaDocumentopdf(enviardoc, sqlDate);

						if ("ENVIADO".equals(resultado)) {
							
							System.out.print("Correo Reenviado y guardado en bd" + enviardoc);
							respuesta.put("cod", "0000");
							respuesta.put("msj", "Se reenvió los documentos de manera satisfactoria");
							
							String consulta = datos.cargarAuditoriaPM(au);
							System.out.println("Cargar datos en auditoria REENVIAR " +consulta) ;
							
							session.removeAttribute("docPDF");
							session.removeAttribute("fechaDS");
							session.removeAttribute("dniRE");
							session.removeAttribute("nombresRE");
							session.removeAttribute("fecha_primer_envio");
							session.removeAttribute("tipodocRE");
							session.removeAttribute("correoRE");
							session.removeAttribute("estado_envio");
							
						} else {
							respuesta.put("cod", "9998");
							respuesta.put("msj",
									"Correo enviado, pero no se pudo guardar en la base de datos");
						}
					} catch (Exception e) {

						respuesta.put("cod", "9998");
						respuesta.put("msj", "Error interno al guardar datos");
					}
								
				} else {
					respuesta.put("cod", "9999");
					respuesta.put("msj", "No se envio el correo. Ocurrio un error");

				}

				String json = "";
				try {
					// Convertir el mapa a JSON
					ObjectMapper mapper = new ObjectMapper();
					json = mapper.writeValueAsString(respuesta);

				} catch (Exception e) {
					e.printStackTrace();
				}
				return json;
			}	
			
		
			@RequestMapping("logPM")
			public String logAuditoria(ModelMap model, HttpServletRequest request,
					HttpServletResponse response) {
				List<BnAuditoriaPM> contenlog = new ArrayList<BnAuditoriaPM>();
				request.setAttribute("contenlog", contenlog);
				request.setAttribute("first", "first"); 
				String path = View.returnJsp(model, "auditoriaPM/logPM");
				return path;
			}
			
			@RequestMapping("filterlogPM")
			public String logAuditoriaPMFiltro(ModelMap model,
					HttpServletRequest request, HttpServletResponse response)
					throws SQLException {
				List<BnLogAuditoriaPM> contenlog = new ArrayList<BnLogAuditoriaPM>();
				RepoLogAuditoria audi = new RepoLogAuditoria();
				String path = View.returnJsp(model, "auditoriaPM/logPM");
				String opcion = request.getParameter("opt");

				int opcionint = Integer.parseInt(opcion);
				switch (opcionint) {
				case 1:
					String forDni = request.getParameter("forDni");
					contenlog = audi.forDniPM(forDni);
					System.out.println("LISTAR POR DNI " +contenlog) ;
					break;
				case 2:
					String forFechaInicio = request.getParameter("forFechaInicio");
					String forFechaFin = request.getParameter("forFechaFin");
					//contenlog = audi.forFechas(forFechaInicio, forFechaFin);

					break;
				case 3:
					String forDia = request.getParameter("forDia");
					//contenlog = audi.forDia(forDia);

					break;
				case 4:
					//contenlog = audi.showLog();
					break;
				default:
					return path;
				}

				request.setAttribute("contenlog", contenlog);

				return path;
			}

}